# generated by fastapi-codegen:
#   filename:  PlantBreedingAPI-BrAPI-Genotyping-2.0-resolved.yaml
#   timestamp: 2021-03-24T21:00:43+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Dict, List, Optional, Union

from pydantic import AnyUrl, BaseModel, Extra, Field, conint


class Analysis(BaseModel):
    analysisDbId: Optional[str] = Field(
        None,
        description='Unique identifier for this analysis description',
        example='6191a6bd',
    )
    analysisName: Optional[str] = Field(
        None,
        description='A human readable name for this analysis',
        example='Standard QC',
    )
    created: Optional[datetime] = Field(
        None,
        description='The time at which this record was created, in ISO 8601 format.',
    )
    description: Optional[str] = Field(
        None,
        description='A human readable description of the analysis',
        example='This is a formal description of a QC methodology. Blah blah blah ...',
    )
    software: Optional[List[str]] = Field(
        None,
        description='The software run to generate this analysis.',
        example=['https://github.com/genotyping/QC'],
    )
    type: Optional[str] = Field(None, description='The type of analysis.', example='QC')
    updated: Optional[datetime] = Field(
        None,
        description='The time at which this record was last updated, in ISO 8601 format.',
    )


class AdditionalInfo(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class CallSet(BaseModel):
    additionalInfo: Optional[Dict[str, AdditionalInfo]] = Field(
        None, description='Additional arbitrary info'
    )
    callSetDbId: Optional[str] = Field(
        None, description='The call set ID.', example='eb2bfd3d'
    )
    callSetName: Optional[str] = Field(
        None, description='The call set name.', example='Sample_123_DNA_Run_456'
    )
    created: Optional[datetime] = Field(
        None, description='The date this call set was created'
    )
    sampleDbId: Optional[str] = Field(
        None,
        description='The Biosample entity the call set data was generated from.',
        example='5e50e11d',
    )
    studyDbId: Optional[str] = Field(
        None,
        description='The ID which uniquely identifies a study within the given database server',
        example='708149c1',
    )
    updated: Optional[datetime] = Field(
        None, description='The time at which this call set was last updated'
    )
    variantSetDbIds: Optional[List[str]] = Field(
        None,
        description='The IDs of the variant sets this call set has calls in.',
        example=['cfd3d60f', 'a4e8bfe9'],
    )


class Context(BaseModel):
    __root__: List[AnyUrl] = Field(
        ...,
        description='The JSON-LD Context is used to provide JSON-LD definitions to each field in a JSON object. By providing an array of context file urls, a BrAPI response object becomes JSON-LD compatible.  \n\nFor more information, see https://w3c.github.io/json-ld-syntax/#the-context',
        example=['https://brapi.org/jsonld/context/metadata.jsonld'],
        title='context',
    )


class GenomeMap(BaseModel):
    additionalInfo: Optional[Dict[str, AdditionalInfo]] = Field(
        None, description='Additional arbitrary info'
    )
    comments: Optional[str] = Field(
        None, description='Additional comments', example='Comments about this map'
    )
    commonCropName: str = Field(
        ..., description='The common name of the crop', example='Paw Paw'
    )
    documentationURL: Optional[AnyUrl] = Field(
        None,
        description='A URL to the human readable documentation of this object',
        example='https://brapi.org',
    )
    linkageGroupCount: Optional[int] = Field(
        None,
        description='The number of linkage groups present in this genomic map',
        example=5,
    )
    mapDbId: str = Field(
        ...,
        description='The ID which uniquely identifies this genomic map',
        example='142cffd5',
    )
    mapName: Optional[str] = Field(
        None,
        description='A human readable name for this genomic map',
        example='Genome Map 1',
    )
    mapPUI: Optional[str] = Field(
        None,
        description='The DOI or other permanent identifier for this genomic map',
        example='doi:10.3207/2959859860',
    )
    markerCount: Optional[int] = Field(
        None,
        description='The number of markers present in this genomic map',
        example=1100,
    )
    publishedDate: Optional[datetime] = Field(
        None, description='The date this genome was published'
    )
    scientificName: Optional[str] = Field(
        None,
        description='Full scientific binomial format name. This includes Genus, Species, and Sub-species',
        example='Zea mays',
    )
    type: str = Field(
        ...,
        description='The type of map this represents, usually "Genetic"',
        example='Genetic',
    )
    unit: Optional[str] = Field(
        None,
        description='The units used to describe the data in this map',
        example='cM',
    )


class LinkageGroup(BaseModel):
    additionalInfo: Optional[Dict[str, AdditionalInfo]] = Field(
        None, description='Additional arbitrary info'
    )
    linkageGroupName: Optional[str] = Field(
        None,
        description='The Uniquely Identifiable name of this linkage group',
        example='Chromosome 3',
    )
    markerCount: Optional[int] = Field(
        None,
        description='The number of markers associated with this linkage group',
        example=150,
    )
    maxPosition: Optional[int] = Field(
        None,
        description='The maximum position of a marker within this linkage group',
        example=2500,
    )


class ListValue(BaseModel):
    values: Optional[List[Union[bool, float, str]]] = Field(
        None, description='Repeated field of dynamically typed values.', example=['AA']
    )


class MarkerPosition(BaseModel):
    additionalInfo: Optional[Dict[str, AdditionalInfo]] = Field(
        None, description='Additional arbitrary info'
    )
    linkageGroupName: Optional[str] = Field(
        None,
        description='The Uniquely Identifiable name of this linkage group',
        example='Chromosome 3',
    )
    mapDbId: Optional[str] = Field(
        None, description='The unique ID of the map', example='3d52bdf3'
    )
    mapName: Optional[str] = Field(
        None, description='The human readable name of the map', example='Genome Map 1'
    )
    position: Optional[int] = Field(
        None,
        description='The position of a marker within a linkage group',
        example=2390,
    )
    variantDbId: Optional[str] = Field(
        None, description='Internal db identifier', example='a1eb250a'
    )
    variantName: Optional[str] = Field(
        None, description='The human readable name for a marker', example='Marker_2390'
    )


class Measurement(BaseModel):
    units: Optional[str] = Field(
        None, description='Units (example: "ng/ul")', example='ng/ul'
    )
    value: Optional[float] = Field(
        None, description='Value (example: "2.3")', example=2.3
    )


class LevelName(Enum):
    study = 'study'
    field = 'field'
    entry = 'entry'
    rep = 'rep'
    block = 'block'
    sub_block = 'sub-block'
    plot = 'plot'
    sub_plot = 'sub-plot'
    plant = 'plant'
    pot = 'pot'
    sample = 'sample'


class ObservationUnitHierarchyLevel(BaseModel):
    levelName: Optional[LevelName] = Field(
        None, description='A name for this level', example='plot'
    )
    levelOrder: Optional[int] = Field(
        None,
        description="`levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`'s lower numbers are at the top of the hierarchy (ie field -> 1) and higher numbers are at the bottom of the hierarchy (ie plant -> 9).",
        example=2,
    )


class OntologyTerm(BaseModel):
    term: Optional[str] = Field(
        None,
        description='Ontology term - the label of the ontology term the termId is pointing to.',
        example='sonic hedgehog',
    )
    termURI: Optional[str] = Field(
        None,
        description="Ontology term identifier - the CURIE for an ontology term. It differs from the standard GA4GH schema's :ref:`id ` in that it is a CURIE pointing to an information resource outside of the scope of the schema or its resource implementation.",
        example='MGI:MGI:98297',
    )


class PlateFormat(Enum):
    PLATE_96 = 'PLATE_96'
    TUBES = 'TUBES'


class Reference(BaseModel):
    additionalInfo: Optional[Dict[str, AdditionalInfo]] = Field(
        None, description='Additional arbitrary info'
    )
    isDerived: Optional[bool] = Field(
        None,
        description='A sequence X is said to be derived from source sequence Y, if X and Y are of the same length and the per-base sequence divergence at A/C/G/T bases is sufficiently small. Two sequences derived from the same official sequence share the same coordinates and annotations, and can be replaced with the official sequence for certain use cases.',
        example=False,
    )
    length: Optional[int] = Field(
        None, description="The length of this reference's sequence.", example=50000000
    )
    md5checksum: Optional[str] = Field(
        None,
        description='The MD5 checksum uniquely representing this `Reference` as a lower-case hexadecimal string, calculated as the MD5 of the upper-case sequence excluding all whitespace characters (this is equivalent to SQ:M5 in SAM).',
        example='c2365e900c81a89cf74d83dab60df146',
    )
    referenceDbId: Optional[str] = Field(
        None,
        description='The reference ID. Unique within the repository.',
        example='fc0a81d0',
    )
    referenceName: Optional[str] = Field(
        None,
        description='The unique name of this reference within the Reference Set.',
        example='Chromosome 2',
    )
    referenceSetDbId: Optional[str] = Field(
        None,
        description='The reference ID. Unique within the repository.',
        example='c1ecfef1',
    )
    sourceAccessions: Optional[List[str]] = Field(
        None,
        description='All known corresponding accession IDs in INSDC (GenBank/ENA/DDBJ) which must include a version number, e.g. `GCF_000001405.26`.',
        example=['GCF_000001405.26'],
    )
    sourceDivergence: Optional[float] = Field(
        None,
        description='The `sourceDivergence` is the fraction of non-indel bases that do not match the reference this message was derived from.',
        example=0.01,
    )
    sourceURI: Optional[str] = Field(
        None,
        description='The URI from which the sequence was obtained. Specifies a FASTA format file/string with one name, sequence pair. In most cases, clients should call the `getReferenceBases()` method to obtain sequence bases for a `Reference` instead of attempting to retrieve this URI.',
        example='https://wiki.brapi.org/files/demo.fast',
    )
    species: Optional[OntologyTerm] = None


class ReferenceBases(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='The continuation token, which is used to page through large result sets. Provide this value in a subsequent request to return the next page of results. This field will be empty if there are not any additional results.',
        example='3a3d658a',
    )
    offset: Optional[int] = Field(
        None,
        description='The offset position (0-based) of the given sequence from the start of this `Reference`. This value will differ for each page in a request.',
        example=20000,
    )
    sequence: Optional[str] = Field(
        None,
        description='A sub-string of the bases that make up this reference. Bases are represented as IUPAC-IUB codes; this string matches the regular expression `[ACGTMRWSYKVHDBN]*`.',
        example='TAGGATTGAGCTCTATATTAGGATTGAGCTCTATATTAGGATTGAGCTCTATATTAGGATTGAGCTCTATATTAGGATTGAGCTCTATATTAGGATTGAGCTCTATATTAGGATTGAGCTCTATATTAGGATTGAGCTCTATATTAGGATTGAGCTCTATAT',
    )


class ReferenceSet(BaseModel):
    additionalInfo: Optional[Dict[str, AdditionalInfo]] = Field(
        None, description='Additional arbitrary info'
    )
    assemblyPUI: Optional[str] = Field(
        None,
        description='The remaining information is about the source of the sequences Public id of this reference set, such as `GRCH_37`.',
        example='doi://10.12345/fake/9876',
    )
    description: Optional[str] = Field(
        None,
        description='Optional free text description of this reference set.',
        example='This is an example description for an assembly',
    )
    isDerived: Optional[bool] = Field(
        None,
        description='A reference set may be derived from a source if it contains additional sequences, or some of the sequences within it are derived (see the definition of `isDerived` in `Reference`).',
    )
    md5checksum: Optional[str] = Field(
        None,
        description='Order-independent MD5 checksum which identifies this `ReferenceSet`.\n\nTo compute this checksum, make a list of `Reference.md5checksum` for all\n`Reference` s in this set. Then sort that list, and take the MD5 hash of\nall the strings concatenated together. Express the hash as a lower-case\nhexadecimal string.',
        example='c2365e900c81a89cf74d83dab60df146',
    )
    referenceSetDbId: Optional[str] = Field(
        None,
        description='The reference set ID. Unique in the repository.',
        example='7e029a84',
    )
    referenceSetName: Optional[str] = Field(
        None, description='The reference set name.', example='The Best Assembly Ever'
    )
    sourceAccessions: Optional[List[str]] = Field(
        None,
        description='All known corresponding accession IDs in INSDC (GenBank/ENA/DDBJ) ideally with a version number, e.g. `NC_000001.11`.',
        example=['A0000002', 'A0009393'],
    )
    sourceURI: Optional[str] = Field(
        None,
        description='Specifies a FASTA format file/string.',
        example='https://wiki.brapi.org/files/demo.fast',
    )
    species: Optional[OntologyTerm] = None


class SearchRequestParametersCommonCropNames(BaseModel):
    commonCropNames: Optional[List[str]] = Field(
        None,
        description='Common name for the crop which this program is for',
        example=['Tomatillo', 'Paw Paw'],
    )


class SearchRequestParametersExternalReferences(BaseModel):
    externalReferenceIDs: Optional[List[str]] = Field(
        None,
        description='List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)',
        example=['http://purl.obolibrary.org/obo/ro.owl', '14a19841'],
    )
    externalReferenceSources: Optional[List[str]] = Field(
        None,
        description='List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)',
        example=['OBO Library', 'Field App Name'],
    )


class SearchRequestParametersGermplasm(BaseModel):
    germplasmDbIds: Optional[List[str]] = Field(
        None,
        description='List of IDs which uniquely identify germplasm to search for',
        example=['e9c6edd7', '1b1df4a6'],
    )
    germplasmNames: Optional[List[str]] = Field(
        None,
        description='List of human readable names to identify germplasm to search for',
        example=['A0000003', 'A0000477'],
    )


class SearchRequestParametersLocations(BaseModel):
    locationDbIds: Optional[List[str]] = Field(
        None,
        description='The location ids to search for',
        example=['b28911cf', '5071d1e4'],
    )
    locationNames: Optional[List[str]] = Field(
        None,
        description='A human readable names to search for',
        example=['Location Alpha', 'The Large Hadron Collider'],
    )


class SearchRequestParametersObservationVariables(BaseModel):
    observationVariableDbIds: Optional[List[str]] = Field(
        None,
        description='The DbIds of Variables to search for',
        example=['a646187d', '6d23513b'],
    )
    observationVariableNames: Optional[List[str]] = Field(
        None,
        description='The names of Variables to search for',
        example=['Plant Height in meters', 'Wheat rust score 1-5'],
    )


class SearchRequestParametersPaging(BaseModel):
    page: Optional[int] = Field(
        None,
        description="Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
        example=0,
    )
    pageSize: Optional[int] = Field(
        None,
        description='The size of the pages to be returned. Default is `1000`.',
        example=1000,
    )


class SearchRequestParametersPrograms(BaseModel):
    programDbIds: Optional[List[str]] = Field(
        None,
        description='A program identifier to search for',
        example=['8f5de35b', '0e2d4a13'],
    )
    programNames: Optional[List[str]] = Field(
        None,
        description='A name of a program to search for',
        example=['Better Breeding Program', 'Best Breeding Program'],
    )


class SearchRequestParametersStudies(BaseModel):
    studyDbIds: Optional[List[str]] = Field(
        None,
        description='List of study identifiers to search for',
        example=['cf6c4bd4', '691e69d6'],
    )
    studyNames: Optional[List[str]] = Field(
        None,
        description='List of study names to filter search results',
        example=['The First Bob Study 2017', 'Wheat Yield Trial 246'],
    )


class SearchRequestParametersTokenPaging(BaseModel):
    pageSize: Optional[int] = Field(
        None,
        description='The size of the pages to be returned. Default is `1000`.',
        example=1000,
    )
    pageToken: Optional[str] = Field(
        None,
        description='Used to request a specific page of data to be returned.\n\nTokenized pages are for large data sets which can not be efficiently broken into indexed pages. Use the nextPageToken and prevPageToken from a prior response to construct a query and move to the next or previous page respectively. ',
        example='33c27874',
    )


class SearchRequestParametersTrials(BaseModel):
    trialDbIds: Optional[List[str]] = Field(
        None,
        description='The ID which uniquely identifies a trial to search for',
        example=['d2593dc2', '9431a731'],
    )
    trialNames: Optional[List[str]] = Field(
        None,
        description='The human readable name of a trial to search for',
        example=['All Yield Trials 2016', 'Disease Resistance Study Comparison Group'],
    )


class TraitDataType(Enum):
    Code = 'Code'
    Date = 'Date'
    Duration = 'Duration'
    Nominal = 'Nominal'
    Numerical = 'Numerical'
    Ordinal = 'Ordinal'
    Text = 'Text'


class Variant(BaseModel):
    additionalInfo: Optional[Dict[str, AdditionalInfo]] = Field(
        None, description='Additional arbitrary info'
    )
    alternate_bases: Optional[List[str]] = Field(
        None,
        description='The bases that appear instead of the reference bases. Multiple alternate alleles are possible.',
        example=['TAGGATTGAGCTCTATAT'],
    )
    ciend: Optional[List[int]] = Field(
        None,
        description='Similar to "cipos", but for the variant\'s end position (which is derived from start + svlen).',
        example=[-1000, 0],
    )
    cipos: Optional[List[int]] = Field(
        None,
        description='In the case of structural variants, start and end of the variant may not\nbe known with an exact base position. "cipos" provides an interval with\nhigh confidence for the start position. The interval is provided by 0 or\n2 signed integers which are added to the start position.\nBased on the use in VCF v4.2',
        example=[-12000, 1000],
    )
    created: Optional[datetime] = Field(
        None, description='The timestamp when this variant was created.'
    )
    end: Optional[int] = Field(
        None,
        description='This field is optional and may be ignored if there is no relevant map or reference to be associated with.\n\nThe end position (exclusive), resulting in [start, end) closed-open interval. This is typically calculated \nby `start + referenceBases.length`.',
        example=518,
    )
    filtersApplied: Optional[bool] = Field(
        None,
        description='True if filters were applied for this variant. VCF column 7 "FILTER" any value other than the missing value.',
        example=True,
    )
    filtersFailed: Optional[List[str]] = Field(
        None,
        description='Zero or more filters that failed for this variant. VCF column 7 "FILTER" shared across all alleles in the same VCF record.',
        example=['d629a669', '3f14f578'],
    )
    filtersPassed: Optional[bool] = Field(
        None,
        description='True if all filters for this variant passed. VCF column 7 "FILTER" value PASS.',
        example=True,
    )
    referenceBases: Optional[str] = Field(
        None,
        description='The reference bases for this variant. They start at the given start position.',
        example='TAGGATTGAGCTCTATAT',
    )
    referenceName: Optional[str] = Field(
        None,
        description='The reference on which this variant occurs. (e.g. `chr_20` or `X`)',
        example='chr_20',
    )
    start: Optional[int] = Field(
        None,
        description='This field is optional and may be ignored if there is no relevant map or reference to be associated with.\n\nThe start position at which this variant occurs (0-based). This corresponds to the first base of the string \nof reference bases. Genomic positions are non-negative integers less than reference length. Variants spanning \nthe join of circular genomes are represented as two variants one on each side of the join (position 0).',
        example=500,
    )
    svlen: Optional[int] = Field(
        None,
        description='Length of the - if labeled as such in variant_type - structural variation. Based on the use in VCF v4.2',
        example=1500,
    )
    updated: Optional[datetime] = Field(
        None, description='The time at which this variant was last updated.'
    )
    variantDbId: Optional[str] = Field(
        None, description='The variant ID.', example='628e89c5'
    )
    variantNames: Optional[List[str]] = Field(
        None,
        description='Names for the variant, for example a RefSNP ID.',
        example=['RefSNP_ID_1', '06ea312e'],
    )
    variantSetDbId: Optional[List[str]] = Field(
        None,
        description='An array of `VariantSet` IDs this variant belongs to. This also defines the `ReferenceSet` against which the `Variant` is to be interpreted.',
        example=['c8ae400b', 'ef2c204b'],
    )
    variantType: Optional[str] = Field(
        None,
        description='The "variant_type" is used to denote e.g. structural variants.\nExamples:\n  DUP  : duplication of sequence following "start"\n  DEL  : deletion of sequence following "start"',
        example='DUP',
    )


class VariantSetsExtractRequest(SearchRequestParametersStudies):
    callSetDbIds: Optional[List[str]] = Field(
        None, description='The CallSet to search.', example=['9569cfc4', 'da1e888c']
    )
    expandHomozygotes: Optional[bool] = Field(
        None,
        description='Should homozygotes be expanded (true) or collapsed into a single occurrence (false)',
        example=True,
    )
    sepPhased: Optional[str] = Field(
        None, description='The string used as a separator for phased allele calls.'
    )
    sepUnphased: Optional[str] = Field(
        None,
        description='The string used as a separator for unphased allele calls.',
        example='|',
    )
    unknownString: Optional[str] = Field(
        None,
        description='The string used as a representation for missing data.',
        example='-',
    )
    variantDbIds: Optional[List[str]] = Field(
        None, description='The Variant to search.', example=['c80f068b', 'eb7c5f50']
    )
    variantSetDbIds: Optional[List[str]] = Field(
        None, description='The VariantSet to search.', example=['b2903842', 'dcbb8558']
    )


class VariantSetsSearchRequest(
    SearchRequestParametersPaging, SearchRequestParametersStudies
):
    callSetDbIds: Optional[List[str]] = Field(
        None, description='The CallSet to search.', example=['9569cfc4', 'da1e888c']
    )
    variantDbIds: Optional[List[str]] = Field(
        None, description='The Variant to search.', example=['c80f068b', 'eb7c5f50']
    )
    variantSetDbIds: Optional[List[str]] = Field(
        None, description='The VariantSet to search.', example=['b2903842', 'dcbb8558']
    )


class VendorContact(BaseModel):
    vendorAddress: Optional[str] = Field(
        None, description='The street address of the vendor', example='123 Main Street'
    )
    vendorCity: Optional[str] = Field(
        None,
        description='The name of the city where the vendor is located',
        example='Townsville',
    )
    vendorContactName: Optional[str] = Field(
        None,
        description='The name or identifier of the primary vendor contact',
        example='Bob Robertson',
    )
    vendorCountry: Optional[str] = Field(
        None,
        description='The name of the country where the vendor is located',
        example='USA',
    )
    vendorDescription: Optional[str] = Field(
        None,
        description='A description of the vendor',
        example='This is a sequencing vendor. Sequencing happens here.',
    )
    vendorEmail: Optional[str] = Field(
        None,
        description='The primary email address used to contact the vendor',
        example='bob@bob.org',
    )
    vendorName: str = Field(
        ...,
        description='The human readable name of the vendor',
        example='The Example Vendor Lab',
    )
    vendorPhone: Optional[str] = Field(
        None,
        description='The primary phone number used to contact the vendor',
        example='+1-800-555-5555',
    )
    vendorURL: Optional[str] = Field(
        None,
        description='The primary URL for the vendor',
        example='https://sequencing.org/vendor',
    )


class RequiredServiceInfo(BaseModel):
    class Config:
        extra = Extra.allow

    __root__: str


class VendorOrder(BaseModel):
    clientId: str = Field(
        ...,
        description='A unique, alpha-numeric ID which identifies the client to the vendor. Used to connect the order to the correct billing and contact info.',
        example='7b51ad15',
    )
    numberOfSamples: int = Field(
        ...,
        description='The total number of samples contained in this request. Used for billing and basic validation of the request.',
        example=180,
    )
    orderId: str = Field(
        ...,
        description='The order id returned by the vendor when the order was successfully submitted.',
        example='96ba0ca3',
    )
    requiredServiceInfo: Optional[Dict[str, RequiredServiceInfo]] = Field(
        None,
        description='A map of additional data required by the requested service. This includes things like Volume and Concentration.',
        example={
            'extractDNA': 'true',
            'genus': 'Zea',
            'species': 'mays',
            'volumePerWell': '2.3 ml',
        },
    )
    serviceIds: List[str] = Field(
        ...,
        description='A list of unique, alpha-numeric ID which identify the requested services to be applied to this order. \nA Vendor Service defines what platform, technology, and markers will be used. \nA list of available service IDs can be retrieved from the Vendor Specs.',
        example=['e8f60f64', '05bd925a', 'b698fb5e'],
    )


class VendorPlateSubmissionId(BaseModel):
    submissionId: str = Field(
        ...,
        description='A unique, alpha-numeric ID which identifies a set of plates which have been successfully submitted.',
        example='f8f409e0',
    )


class SampleType(Enum):
    DNA = 'DNA'
    RNA = 'RNA'
    Tissue = 'Tissue'


class VendorResultFile(BaseModel):
    additionalInfo: Optional[Dict[str, AdditionalInfo]] = Field(
        None, description='Additional arbitrary info'
    )
    clientSampleIds: List[str] = Field(
        ...,
        description='The list of sampleDbIds included in the file',
        example=['3968733e', 'e0de6391', '66854172'],
    )
    fileName: str = Field(
        ..., description='Name of the file', example='sequence_data_ce640bd3.csv'
    )
    fileType: str = Field(..., description='Format of the file', example='text/csv')
    fileURL: AnyUrl = Field(
        ...,
        description='The URL to a file with the results of a vendor analysis',
        example='https://vendor.org/data/sequence_data_ce640bd3.csv',
    )
    md5sum: Optional[str] = Field(
        None,
        description='MD5 Hash Check Sum for the file to confirm download without error',
        example='c2365e900c81a89cf74d83dab60df146',
    )


class ServicePlatformMarkerType(Enum):
    FIXED = 'FIXED'
    DISCOVERABLE = 'DISCOVERABLE'


class WSMIMEDataTypes(Enum):
    application_json = 'application/json'
    text_csv = 'text/csv'
    text_tsv = 'text/tsv'
    application_flapjack = 'application/flapjack'


class BasePagination(BaseModel):
    pageSize: int = Field(
        ...,
        description='The number of data elements returned, aka the size of the current page. If the requested page does not have enough elements to fill a page at the requested page size, this field should indicate the actual number of elements returned.',
        example=1000,
    )
    totalCount: Optional[int] = Field(
        None,
        description='The total number of elements that are available on the server and match the requested query parameters.',
        example=10,
    )
    totalPages: Optional[int] = Field(
        None,
        description='The total number of pages of elements available on the server. This should be calculated with the following formula. \n\ntotalPages = CEILING( totalCount / requested_page_size)',
        example=1,
    )


class CallSetsSearchRequest(
    SearchRequestParametersPaging, SearchRequestParametersGermplasm
):
    callSetDbIds: Optional[List[str]] = Field(
        None,
        description='Only return call sets with these DbIds (case-sensitive, exact match).',
        example=['6c7486b2', '49c36a73'],
    )
    callSetNames: Optional[List[str]] = Field(
        None,
        description='Only return call sets with these names (case-sensitive, exact match).',
        example=['Sample_123_DNA_Run_456', 'Sample_789_DNA_Run_101'],
    )
    sampleDbIds: Optional[List[str]] = Field(
        None,
        description='Return only call sets generated from the provided Biosample IDs.',
        example=['758d3f6d', '39c0a3f7'],
    )
    sampleNames: Optional[List[str]] = Field(
        None,
        description='Return only call sets generated from the provided Biosample human readable names.',
        example=['Sample_123', 'Sample_789'],
    )
    variantSetDbIds: Optional[List[str]] = Field(
        None, description='The VariantSet to search.', example=['8a9a8972', '32a2649a']
    )


class DataFile(BaseModel):
    fileDescription: Optional[str] = Field(
        None,
        description='A human readable description of the file contents',
        example='This is an Excel data file',
    )
    fileMD5Hash: Optional[str] = Field(
        None,
        description='The MD5 Hash of the file contents to be used as a check sum',
        example='c2365e900c81a89cf74d83dab60df146',
    )
    fileName: Optional[str] = Field(
        None, description='The name of the file', example='datafile.xlsx'
    )
    fileSize: Optional[int] = Field(
        None, description='The size of the file in bytes', example=4398
    )
    fileType: Optional[str] = Field(
        None,
        description='The type or format of the file. Preferably MIME Type.',
        example='application/vnd.ms-excel',
    )
    fileURL: AnyUrl = Field(
        ...,
        description='The absolute URL where the file is located',
        example='https://wiki.brapi.org/examples/datafile.xlsx',
    )


class IndexPagination(BasePagination):
    currentPage: int = Field(
        ...,
        description='The index number for the returned page of data. This should always match the requested page number or the default page (0).',
        example=0,
    )


class Position(BaseModel):
    __root__: List[float] = Field(
        ...,
        description='A single position',
        example=[-76.506042, 42.417373, 123],
        min_items=2,
    )


class MessageType(Enum):
    DEBUG = 'DEBUG'
    ERROR = 'ERROR'
    WARNING = 'WARNING'
    INFO = 'INFO'


class Status(BaseModel):
    message: str = Field(
        ...,
        description='A short message concerning the status of this request/response',
        example='Request accepted, response successful',
    )
    messageType: MessageType = Field(
        ..., description='The logging level for the attached message', example='INFO'
    )


class TokenPagination(BasePagination):
    currentPageToken: Optional[str] = Field(
        None,
        description='The string token used to query the current page of data.',
        example='48bc6ac1',
    )
    nextPageToken: str = Field(
        ...,
        description='The string token used to query the next page of data.',
        example='cb668f63',
    )
    prevPageToken: Optional[str] = Field(
        None,
        description='The string token used to query the previous page of data.',
        example='9659857e',
    )


class VariantsSearchRequest(SearchRequestParametersTokenPaging):
    callSetDbIds: Optional[List[str]] = Field(
        None,
        description='Only return variant calls which belong to call sets with these IDs. If unspecified, return all variants and no variant call objects.',
        example=['4639fe3e', 'b60d900b'],
    )
    end: Optional[int] = Field(
        None,
        description='The end of the window (0-based, exclusive) for which overlapping variants should be returned.',
        example=1500,
    )
    referenceDbId: Optional[str] = Field(
        None, description='Only return variants on this reference.', example='120a2d5c'
    )
    start: Optional[int] = Field(
        None,
        description='The beginning of the window (0-based, inclusive) for which overlapping variants should be returned. Genomic positions are non-negative integers less than reference length. Requests spanning the join of circular genomes are represented as two requests one on each side of the join (position 0).',
        example=100,
    )
    variantDbIds: Optional[List[str]] = Field(
        None, description='The `Variant`s to search.', example=['3b63d889', 'ab4d174d']
    )
    variantSetDbIds: Optional[List[str]] = Field(
        None,
        description='The `VariantSet` to search.',
        example=['ba63d810', '434d1760'],
    )


class ExternalReferencesInner(BaseModel):
    referenceID: Optional[str] = Field(
        None,
        description='The external reference ID. Could be a simple string or a URI.',
    )
    referenceSource: Optional[str] = Field(
        None,
        description='An identifier for the source system or database of this reference',
    )


class Type(Enum):
    OBO = 'OBO'
    RDF = 'RDF'
    WEBPAGE = 'WEBPAGE'


class OntologyReferenceDocumentationLinks(BaseModel):
    URL: Optional[AnyUrl] = Field(None, example='http://purl.obolibrary.org/obo/ro.owl')
    type: Optional[Type] = Field(None, example='OBO')


class ScaleBaseClassValidValuesCategories(BaseModel):
    label: Optional[str] = Field(None, description='A text label for a category')
    value: Optional[str] = Field(None, description='The actual value for a category')


class ScaleBaseClassValidValues(BaseModel):
    categories: Optional[List[ScaleBaseClassValidValuesCategories]] = Field(
        None,
        description='List of possible values with optional labels',
        example=[
            {'label': 'low', 'value': '0'},
            {'label': 'medium', 'value': '5'},
            {'label': 'high', 'value': '10'},
        ],
    )
    max: Optional[int] = Field(
        None,
        description='Maximum value (used for field data capture control).',
        example=9999,
    )
    min: Optional[int] = Field(
        None,
        description='Minimum value (used for data capture control) for numerical and date scales',
        example=2,
    )


class DataFormat(Enum):
    DartSeq = 'DartSeq'
    VCF = 'VCF'
    Hapmap = 'Hapmap'
    tabular = 'tabular'
    JSON = 'JSON'


class FileFormat(Enum):
    text_csv = 'text/csv'
    text_tsv = 'text/tsv'
    application_excel = 'application/excel'
    application_zip = 'application/zip'
    application_json = 'application/json'


class VariantSetAvailableFormats(BaseModel):
    dataFormat: Optional[DataFormat] = Field(
        None,
        description='dataFormat defines the structure of the data within a file (ie DartSeq, VCF, Hapmap, tabular, etc)',
    )
    fileFormat: Optional[FileFormat] = Field(
        None,
        description='fileFormat defines the MIME type of the file (ie text/csv, application/excel, application/zip). This should also be reflected in the Accept and ContentType HTTP headers for every relevant request and response.',
    )
    fileURL: Optional[AnyUrl] = Field(
        None,
        description='A URL which indicates the location of the file version of this VariantSet. Could be a static file URL or an API endpoint which generates the file.',
    )


class ShipmentForm(BaseModel):
    fileDescription: Optional[str] = Field(
        None,
        description='The human readable long description for this form',
        example='This is a shipment manifest form',
    )
    fileName: Optional[str] = Field(
        None,
        description='The human readable name for this form',
        example='Shipment Manifest',
    )
    fileURL: AnyUrl = Field(
        ...,
        description='The URL to download this form',
        example='https://vendor.org/forms/manifest.pdf',
    )


class VendorSpecificationServiceSpecificRequirements(BaseModel):
    description: Optional[str] = None
    key: Optional[str] = None


class CallSetsListResponseResult(BaseModel):
    data: List[CallSet]


class GenomeMapListResponseResult(BaseModel):
    data: List[GenomeMap]


class LinkageGroupListResponseResult(BaseModel):
    data: List[LinkageGroup]


class MarkerPositionListResponseResult(BaseModel):
    data: List[MarkerPosition]


class ReferencesListResponseResult(BaseModel):
    data: List[Reference]


class ReferenceSetsListResponseResult(BaseModel):
    data: List[ReferenceSet]


class Field202AcceptedSearchResponseResult(BaseModel):
    searchResultsDbId: Optional[str] = Field(None, example='551ae08c')


class VariantsListResponseResult(BaseModel):
    data: List[Variant]


class VendorOrderListResponseResult(BaseModel):
    data: List[VendorOrder]


class VendorResultFileListResponseResult(BaseModel):
    data: List[VendorResultFile]


class Status1(Enum):
    registered = 'registered'
    received = 'received'
    inProgress = 'inProgress'
    completed = 'completed'
    rejected = 'rejected'


class VendorOrderStatusResponseResult(BaseModel):
    status: Optional[Status1] = None


class Call(BaseModel):
    additionalInfo: Optional[Dict[str, AdditionalInfo]] = Field(
        None, description='Additional arbitrary info'
    )
    callSetDbId: Optional[str] = Field(
        None,
        description='The ID of the call set this variant call belongs to.\n\nIf this field is not present, the ordering of the call sets from a `SearchCallSetsRequest` over this `VariantSet` is guaranteed to match the ordering of the calls on this `Variant`. The number of results will also be the same.',
        example='16466f55',
    )
    callSetName: Optional[str] = Field(
        None,
        description='The name of the call set this variant call belongs to. If this field is not present, the ordering of the call sets from a `SearchCallSetsRequest` over this `VariantSet` is guaranteed to match the ordering of the calls on this `Variant`. The number of results will also be the same.',
        example='Sample_123_DNA_Run_456',
    )
    genotype: Optional[ListValue] = None
    genotype_likelihood: Optional[List[float]] = Field(
        None,
        description='The genotype likelihood for this variant call. Each array entry represents how likely a specific genotype is for this call as log10(P(data | genotype)), analogous to the GL tag in the VCF spec. The value ordering is defined by the GL tag in the VCF spec.',
        example=[1.0],
    )
    phaseSet: Optional[str] = Field(
        None,
        description="If this field is populated, this variant call's genotype ordering implies the phase of the bases and is consistent with any other variant calls on the same contig which have the same phase set string.",
        example='6410afc5',
    )
    variantDbId: Optional[str] = Field(
        None,
        description='The ID of the variant this call belongs to.',
        example='538c8ecf',
    )
    variantName: Optional[str] = Field(
        None,
        description='The name of the variant this call belongs to.',
        example='Marker A',
    )


class CallsSearchRequest(SearchRequestParametersTokenPaging):
    callSetDbIds: Optional[List[str]] = Field(
        None, description='The CallSet to search.', example=['a03202ec', '274e4f63']
    )
    expandHomozygotes: Optional[bool] = Field(
        None,
        description='Should homozygotes be expanded (true) or collapsed into a single occurrence (false)',
        example=True,
    )
    sepPhased: Optional[str] = Field(
        None, description='The string used as a separator for phased allele calls.'
    )
    sepUnphased: Optional[str] = Field(
        None,
        description='The string used as a separator for unphased allele calls.',
        example='|',
    )
    unknownString: Optional[str] = Field(
        None,
        description='The string used as a representation for missing data.',
        example='-',
    )
    variantDbIds: Optional[List[str]] = Field(
        None, description='The Variant to search.', example=['bba0b258', 'ff97d4f0']
    )
    variantSetDbIds: Optional[List[str]] = Field(
        None, description='The VariantSet to search.', example=['407c0508', '49e24dfc']
    )


class ExternalReferences(BaseModel):
    __root__: List[ExternalReferencesInner] = Field(
        ...,
        description='An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.',
        example=[
            {'referenceID': 'doi:10.155454/12341234', 'referenceSource': 'DOI'},
            {
                'referenceID': 'http://purl.obolibrary.org/obo/ro.owl',
                'referenceSource': 'OBO Library',
            },
            {
                'referenceID': '75a50e76',
                'referenceSource': 'Remote Data Collection Upload Tool',
            },
        ],
        title='ExternalReferences',
    )


class MarkerPositionSearchRequest(SearchRequestParametersPaging):
    linkageGroupNames: Optional[List[str]] = Field(
        None,
        description='The Uniquely Identifiable name of this linkage group',
        example=['Chromosome 2', 'Chromosome 3'],
    )
    mapDbIds: Optional[List[str]] = Field(
        None, description='The unique ID of the map', example=['7e6fa8aa', 'bedc418c']
    )
    maxPosition: Optional[int] = Field(
        None, description='The maximum position', example=4000
    )
    minPosition: Optional[int] = Field(
        None, description='The minimum position', example=250
    )
    variantDbIds: Optional[List[str]] = Field(
        None, description='Internal db identifier', example=['a0caa928', 'f8894a26']
    )


class OntologyReference(BaseModel):
    documentationLinks: Optional[List[OntologyReferenceDocumentationLinks]] = Field(
        None, description='links to various ontology documentation'
    )
    ontologyDbId: str = Field(
        ..., description='Ontology database unique identifier', example='6b071868'
    )
    ontologyName: str = Field(
        ..., description='Ontology name', example='The Crop Ontology'
    )
    version: Optional[str] = Field(
        None, description='Ontology version (no specific format)', example='7.2.3'
    )


class ReferenceSetsSearchRequest(SearchRequestParametersPaging):
    accessions: Optional[List[str]] = Field(
        None,
        description='If set, return the reference sets for which the `accession` matches this string (case-sensitive, exact match).',
        example=['A0009283', 'A0006657'],
    )
    assemblyPUIs: Optional[List[str]] = Field(
        None,
        description='If set, return the reference sets for which the `assemblyId` matches this string (case-sensitive, exact match).',
        example=['doi:10.15454/312953986E3', 'doi:10.15454/312953986E3'],
    )
    md5checksums: Optional[List[str]] = Field(
        None,
        description='If set, return the reference sets for which the `md5checksum` matches this string (case-sensitive, exact match).',
        example=['c2365e900c81a89cf74d83dab60df146'],
    )
    referenceSetDbIds: Optional[List[str]] = Field(
        None,
        description='The `ReferenceSets` to search.',
        example=['32a19dd7', '2c182c18'],
    )


class ReferencesSearchRequest(SearchRequestParametersPaging):
    accessions: Optional[List[str]] = Field(
        None,
        description='If specified, return the references for which the `accession` matches this string (case-sensitive, exact match).',
        example=['A0009283', 'A0006657'],
    )
    isDerived: Optional[bool] = Field(
        None,
        description='A sequence X is said to be derived from source sequence Y, if X and Y are of the same length and the per-base sequence divergence at A/C/G/T bases is sufficiently small. Two sequences derived from the same official sequence share the same coordinates and annotations, and can be replaced with the official sequence for certain use cases.',
    )
    maxLength: Optional[int] = Field(
        None,
        description="The minimum length of this reference's sequence.",
        example=90000,
    )
    md5checksums: Optional[List[str]] = Field(
        None,
        description='If specified, return the references for which the `md5checksum` matches this string (case-sensitive, exact match).',
        example=['c2365e900c81a89cf74d83dab60df146'],
    )
    minLength: Optional[int] = Field(
        None,
        description="The minimum length of this reference's sequence.",
        example=4000,
    )
    referenceDbIds: Optional[List[str]] = Field(
        None,
        description='The `References` to search.',
        example=['04c83ea7', 'd0998a34'],
    )
    referenceSetDbIds: Optional[List[str]] = Field(
        None,
        description='The `ReferenceSets` to search.',
        example=['32a19dd7', '2c182c18'],
    )


class SampleNewRequest(BaseModel):
    additionalInfo: Optional[Dict[str, AdditionalInfo]] = Field(
        None, description='Additional arbitrary info'
    )
    column: Optional[conint(ge=1, le=12)] = Field(
        None,
        description='The Column identifier for this samples location in the plate',
        example=6,
    )
    externalReferences: Optional[ExternalReferences] = None
    germplasmDbId: Optional[str] = Field(
        None,
        description='The ID which uniquely identifies a germplasm',
        example='7e08d538',
    )
    observationUnitDbId: Optional[str] = Field(
        None,
        description='The ID which uniquely identifies an observation unit',
        example='073a3ce5',
    )
    plateDbId: Optional[str] = Field(
        None,
        description='The ID which uniquely identifies a plate of samples',
        example='2dce16d1',
    )
    plateName: Optional[str] = Field(
        None,
        description='The human readable name of a plate',
        example='Plate_alpha_20191022',
    )
    programDbId: Optional[str] = Field(
        None,
        description='The ID which uniquely identifies a program within the given database server',
        example='bd748e00',
    )
    row: Optional[str] = Field(
        None,
        description='The Row identifier for this samples location in the plate',
        example='B',
    )
    sampleBarcode: Optional[str] = Field(
        None,
        description='A unique identifier physically attached to the sample',
        example='3a027b59',
    )
    sampleDescription: Optional[str] = Field(
        None,
        description='Description of a sample\n\nMIAPPE V1.1 (DM-79) Sample description - Any information not captured by the other sample fields, including quantification, sample treatments and processing.',
        example='This sample was taken from the root of a tree',
    )
    sampleGroupDbId: Optional[str] = Field(
        None,
        description='The ID which uniquely identifies a group of samples',
        example='8524b436',
    )
    sampleName: Optional[str] = Field(
        None, description='The name of the sample', example='Sample_alpha_20191022'
    )
    samplePUI: Optional[str] = Field(
        None,
        description='A permanent unique identifier for the sample (DOI, URL, UUID, etc)\n\nMIAPPE V1.1 (DM-81) External ID - An identifier for the sample in a persistent repository, comprising the name of the repository and the accession number of the observation unit therein. Submission to the EBI Biosamples repository is recommended. URI are recommended when possible. ',
        example='doi:10.15454/312953986E3',
    )
    sampleTimestamp: Optional[datetime] = Field(
        None,
        description='The date and time a sample was collected from the field\n\nMIAPPE V1.1 (DM-80) Collection date - The date and time when the sample was collected / harvested',
    )
    sampleType: Optional[str] = Field(
        None,
        description="The type of sample taken. ex. 'DNA', 'RNA', 'Tissue', etc",
        example='Tissue',
    )
    studyDbId: Optional[str] = Field(
        None,
        description='The ID which uniquely identifies a study within the given database server',
        example='64bd6bf9',
    )
    takenBy: Optional[str] = Field(
        None,
        description='The name or identifier of the entity which took the sample from the field',
        example='Bob',
    )
    tissueType: Optional[str] = Field(
        None,
        description="The type of tissue sampled. ex. 'Leaf', 'Root', etc.\n\nMIAPPE V1.1 (DM-78) Plant anatomical entity - A description of  the plant part (e.g. leaf) or the plant product (e.g. resin) from which the sample was taken, in the form of an accession number to a suitable controlled vocabulary (Plant Ontology).",
        example='Root',
    )
    trialDbId: Optional[str] = Field(
        None,
        description='The ID which uniquely identifies a trial within the given database server',
        example='d34c5349',
    )
    well: Optional[str] = Field(
        None,
        description='The Well identifier for this samples location in the plate. Usually a concatenation of Row and Column, or just a number if the samples are not part of an ordered plate.',
        example='B6',
    )


class SampleSearchRequest(
    SearchRequestParametersPaging,
    SearchRequestParametersGermplasm,
    SearchRequestParametersStudies,
    SearchRequestParametersExternalReferences,
):
    observationUnitDbIds: Optional[List[str]] = Field(
        None,
        description='The ID which uniquely identifies an observation unit',
        example=['3cd0ca36', '983f3b14'],
    )
    plateDbIds: Optional[List[str]] = Field(
        None,
        description='The ID which uniquely identifies a plate of samples',
        example=['0cac98b8', 'b96125fb'],
    )
    sampleDbIds: Optional[List[str]] = Field(
        None,
        description='The ID which uniquely identifies a sample',
        example=['3bece2ca', 'dd286cc6'],
    )


class ScaleBaseClass(BaseModel):
    additionalInfo: Optional[Dict[str, AdditionalInfo]] = Field(
        None, description='Additional arbitrary info'
    )
    dataType: Optional[TraitDataType] = None
    decimalPlaces: Optional[int] = Field(
        None,
        description='For numerical, number of decimal places to be reported',
        example=2,
    )
    externalReferences: Optional[ExternalReferences] = None
    ontologyReference: Optional[OntologyReference] = None
    scaleName: str = Field(
        ...,
        description='Name of the scale\n\nMIAPPE V1.1 (DM-92) Scale Name of the scale associated with the variable',
        example='Meters',
    )
    validValues: Optional[ScaleBaseClassValidValues] = None


class TraitBaseClass(BaseModel):
    additionalInfo: Optional[Dict[str, AdditionalInfo]] = Field(
        None, description='Additional arbitrary info'
    )
    alternativeAbbreviations: Optional[List[str]] = Field(
        None,
        description='Other frequent abbreviations of the trait, if any. These abbreviations do not have to follow a convention',
        example=['H', 'PH', 'H1'],
    )
    attribute: Optional[str] = Field(
        None,
        description='A trait can be decomposed as "Trait" = "Entity" + "Attribute", the attribute is the observed feature (or characteristic) of the entity e.g., for "grain colour", attribute = "colour"',
        example='height',
    )
    entity: Optional[str] = Field(
        None,
        description='A trait can be decomposed as "Trait" = "Entity" + "Attribute", the entity is the part of the plant that the trait refers to e.g., for "grain colour", entity = "grain"',
        example='Stalk',
    )
    externalReferences: Optional[ExternalReferences] = None
    mainAbbreviation: Optional[str] = Field(
        None,
        description='Main abbreviation for trait name. (examples: "Carotenoid content" => "CC")',
        example='PH',
    )
    ontologyReference: Optional[OntologyReference] = None
    status: Optional[str] = Field(
        None,
        description='Trait status (examples: "recommended", "obsolete", "legacy", etc.)',
        example='recommended',
    )
    synonyms: Optional[List[str]] = Field(
        None,
        description='Other trait names',
        example=['Height', 'Plant Height', 'Stalk Height', 'Canopy Height'],
    )
    traitClass: Optional[str] = Field(
        None,
        description='Trait class. (examples: "morphological", "phenological", "agronomical", "physiological", "abiotic stress", "biotic stress", "biochemical", "quality traits", "fertility", etc.)',
        example='phenological',
    )
    traitDescription: Optional[str] = Field(
        None,
        description='The description of a trait',
        example='The height of the plant',
    )
    traitName: Optional[str] = Field(
        None,
        description='The human readable name of a trait\n\nMIAPPE V1.1 (DM-86) Trait - Name of the (plant or environmental) trait under observation',
        example='Height',
    )


class Scale(ScaleBaseClass):
    scaleDbId: str = Field(
        ...,
        description='Unique identifier of the scale. If left blank, the upload system will automatically generate a scale ID.',
        example='af730171',
    )


class Trait(TraitBaseClass):
    traitDbId: Optional[str] = Field(
        None, description='The ID which uniquely identifies a trait', example='9b2e34f5'
    )


class VariantSet(BaseModel):
    additionalInfo: Optional[Dict[str, AdditionalInfo]] = Field(
        None, description='Additional arbitrary info'
    )
    analysis: Optional[List[Analysis]] = Field(
        None, description='Set of Analysis descriptors for this VariantSet'
    )
    availableFormats: Optional[List[VariantSetAvailableFormats]] = Field(
        None,
        description='When the data for a VariantSet is retrieved, it can be retrieved in a variety of data formats and file formats. \n\ndataFormat defines the structure of the data within a file (ie DartSeq, VCF, Hapmap, tabular, etc)\n\nfileFormat defines the MIME type of the file (ie text/csv, application/excel, application/zip). This should also be reflected in the Accept and ContentType HTTP headers for every relevant request and response.',
        example=[
            {
                'dataFormat': 'VCF',
                'fileFormat': 'application/excel',
                'fileURL': 'https://brapi.org/example/VCF_1.xlsx',
            },
            {
                'dataFormat': 'VCF',
                'fileFormat': 'text/csv',
                'fileURL': 'https://brapi.org/example/VCF_2.csv',
            },
        ],
    )
    callSetCount: Optional[int] = Field(
        None,
        description='The number of CallSets included in this VariantSet',
        example=341,
    )
    referenceSetDbId: Optional[str] = Field(
        None,
        description='The ID of the reference set that describes the sequences used by the variants in this set.',
        example='57eae639',
    )
    studyDbId: Optional[str] = Field(
        None,
        description='The ID of the dataset this variant set belongs to.',
        example='2fc3b034',
    )
    variantCount: Optional[int] = Field(
        None,
        description='The number of Variants included in this VariantSet',
        example=250,
    )
    variantSetDbId: Optional[str] = Field(
        None, description='The variant set ID.', example='87a6ac1e'
    )
    variantSetName: Optional[str] = Field(
        None, description='The variant set name.', example='Maize QC DataSet 002334'
    )


class VendorOrderSubmission(BaseModel):
    orderId: str = Field(
        ...,
        description='A unique, alpha-numeric ID which identifies the order',
        example='b5144468',
    )
    shipmentForms: Optional[List[ShipmentForm]] = Field(
        None,
        description='Array of paper forms which need to be printed and included with the physical shipment',
    )


class VendorSample(BaseModel):
    clientSampleBarCode: Optional[str] = Field(
        None,
        description='(Optional) The value of the bar code attached to this sample',
        example='7c07e527',
    )
    clientSampleId: str = Field(
        ...,
        description='The ID which uniquely identifies this sample to the client making the request',
        example='bd96bd69',
    )
    column: Optional[conint(ge=1, le=12)] = Field(
        None,
        description='The Column identifier for this samples location in the plate',
        example=6,
    )
    comments: Optional[str] = Field(
        None,
        description='Generic comments about this sample for the vendor',
        example='This is my favorite sample, please be extra careful with it.',
    )
    concentration: Optional[Measurement] = None
    organismName: Optional[str] = Field(
        None, description='Scientific organism name', example='Aspergillus fructus'
    )
    row: Optional[str] = Field(
        None,
        description='The Row identifier for this samples location in the plate',
        example='B',
    )
    speciesName: Optional[str] = Field(
        None, description='Scientific species name', example='Aspergillus fructus'
    )
    taxonomyOntologyReference: Optional[OntologyReference] = None
    tissueType: Optional[str] = Field(
        None,
        description='The type of tissue in this sample. List of accepted tissue types can be found in the Vendor Specs.',
        example='Root',
    )
    tissueTypeOntologyReference: Optional[OntologyReference] = None
    volume: Optional[Measurement] = None
    well: Optional[str] = Field(
        None,
        description='The Well identifier for this samples location in the plate. Usually a concatenation of Row and Column, or just a number if the samples are not part of an ordered plate.',
        example='B6',
    )


class VendorSpecificationService(BaseModel):
    serviceDescription: Optional[str] = Field(
        None,
        description='Description of the vendor platform',
        example='A combined DNA extract and Sequencing process using technology and science. Lots of automated pipet machines.',
    )
    serviceId: str = Field(
        ..., description='Unique identifier for this service', example='085d298f'
    )
    serviceName: str = Field(
        ...,
        description='The human readable name of a platform',
        example='The Deluxe Service',
    )
    servicePlatformMarkerType: Optional[ServicePlatformMarkerType] = Field(
        None,
        description='The type of markers used in this services platform',
        example='FIXED',
    )
    servicePlatformName: Optional[str] = Field(
        None,
        description='The technology platform used by this service',
        example='RNA-seq',
    )
    specificRequirements: Optional[
        List[VendorSpecificationServiceSpecificRequirements]
    ] = Field(
        None,
        description='Additional arbitrary requirements for a particular platform',
        example=[
            {'description': 'The genus of the samples', 'key': 'genus'},
            {'description': 'The species of the samples', 'key': 'species'},
            {
                'description': 'Approximate volume of each sample (ex 2.3 ml)',
                'key': 'volumePerWell',
            },
            {
                'description': 'Does DNA extraction need to happen before sequencing (ex true)',
                'key': 'extractDNA',
            },
        ],
    )


class LinearRing(BaseModel):
    __root__: List[Position] = Field(
        ...,
        description='An array of at least four positions where the first equals the last',
        example=[
            [-77.456654, 42.241133, 494],
            [-75.414133, 41.508282, 571],
            [-76.506042, 42.417373, 123],
            [-77.456654, 42.241133, 346],
        ],
        min_items=4,
    )


class MetadataBase(BaseModel):
    datafiles: Optional[List[DataFile]] = Field(
        None,
        description='The datafiles contains a list of file URLs and metadata. \nThese files contain additional information related to the returned object and can be retrieved by a subsequent call. \nThis could be a supplementary data file, an informational file, the uploaded file where the data originated from, a generated file representing the whole dataset in a particular format, or any other related file. ',
    )
    status: Optional[List[Status]] = Field(
        None,
        description='The status field contains a list of informational status messages from the server. \nIf no status is reported, an empty list should be returned. See Error Reporting for more information.',
    )


class MetadataTokenPagination(MetadataBase):
    pagination: Optional[TokenPagination] = None


class PointGeometry(BaseModel):
    coordinates: Optional[Position] = None
    type: Optional[str] = Field(
        'Point', description='The literal string "Point"', example='Point'
    )


class Polygon(BaseModel):
    __root__: List[LinearRing] = Field(
        ...,
        description='An array of linear rings',
        example=[
            [
                [-77.456654, 42.241133, 494],
                [-75.414133, 41.508282, 571],
                [-76.506042, 42.417373, 123],
                [-77.456654, 42.241133, 346],
            ]
        ],
    )


class PolygonGeometry(BaseModel):
    coordinates: Optional[Polygon] = None
    type: Optional[str] = Field(
        'Polygon', description='The literal string "Polygon"', example='Polygon'
    )


class VariantsListResponse(BaseModel):
    _context: Optional[Context] = Field(None, alias='@context')
    metadata: MetadataTokenPagination
    result: VariantsListResponseResult


class VendorPlateSubmissionPlates(BaseModel):
    clientPlateBarcode: Optional[str] = Field(
        None,
        description='(Optional) The value of the bar code attached to this plate',
        example='bfb33593',
    )
    clientPlateId: Optional[str] = Field(
        None,
        description='The ID which uniquely identifies this plate to the client making the request',
        example='dae8f49d',
    )
    sampleSubmissionFormat: Optional[PlateFormat] = None
    samples: Optional[List[VendorSample]] = None


class VendorPlateSubmissionRequestPlates(BaseModel):
    clientPlateBarcode: Optional[str] = Field(
        None,
        description='(Optional) The value of the bar code attached to this plate',
        example='6ebf3f25',
    )
    clientPlateId: Optional[str] = Field(
        None,
        description='The ID which uniquely identifies this plate to the client making the request',
        example='02a8d6f0',
    )
    sampleSubmissionFormat: Optional[PlateFormat] = None
    samples: Optional[List[VendorSample]] = None


class CallsListResponseResult(BaseModel):
    data: List[Call]
    expandHomozygotes: Optional[bool] = Field(
        None,
        description='Should homozygotes be expanded (true) or collapsed into a single occurrence (false)',
        example=True,
    )
    sepPhased: Optional[str] = Field(
        None, description='The string used as a separator for phased allele calls.'
    )
    sepUnphased: Optional[str] = Field(
        None,
        description='The string used as a separator for unphased allele calls.',
        example='|',
    )
    unknownString: Optional[str] = Field(
        None,
        description='The string used as a representation for missing data.',
        example='-',
    )


class VariantSetsListResponseResult(BaseModel):
    data: List[VariantSet]


class MethodBaseClass(BaseModel):
    additionalInfo: Optional[Dict[str, AdditionalInfo]] = Field(
        None, description='Additional arbitrary info'
    )
    bibliographicalReference: Optional[str] = Field(
        None,
        description='Bibliographical reference describing the method.\n\nMIAPPE V1.1 (DM-91) Reference associated to the method - URI/DOI of reference describing the method.',
        example='Smith, 1893, Really Cool Paper, Popular Journal',
    )
    description: Optional[str] = Field(
        None,
        description='Method description\n\nMIAPPE V1.1 (DM-90) Method description - Textual description of the method, which may extend a method defined in an external reference with specific parameters, e.g. growth stage, inoculation precise organ (leaf number)',
        example='A measuring tape was used',
    )
    externalReferences: Optional[ExternalReferences] = None
    formula: Optional[str] = Field(
        None,
        description='For computational methods i.e., when the method consists in assessing the trait by computing measurements, write the generic formula used for the calculation',
        example='a^2 + b^2 = c^2',
    )
    methodClass: Optional[str] = Field(
        None,
        description='Method class (examples: "Measurement", "Counting", "Estimation", "Computation", etc.)',
        example='Measurement',
    )
    methodName: Optional[str] = Field(
        None,
        description='Human readable name for the method\n\nMIAPPE V1.1 (DM-88) Method  Name of the method of observation',
        example='Measuring Tape',
    )
    ontologyReference: Optional[OntologyReference] = None


class Sample(SampleNewRequest):
    sampleDbId: Optional[str] = Field(
        None,
        description='The ID which uniquely identifies a sample\n\nMIAPPE V1.1 (DM-76) Sample ID - Unique identifier for the sample.',
        example='cd06a61d',
    )


class Method(MethodBaseClass):
    methodDbId: Optional[str] = Field(
        None, description='Method unique identifier', example='0adb2764'
    )


class VariableBaseClass(BaseModel):
    additionalInfo: Optional[Dict[str, AdditionalInfo]] = Field(
        None, description='Additional arbitrary info'
    )
    commonCropName: Optional[str] = Field(
        None, description='Crop name (examples: "Maize", "Wheat")', example='Maize'
    )
    contextOfUse: Optional[List[str]] = Field(
        None,
        description='Indication of how trait is routinely used. (examples: ["Trial evaluation", "Nursery evaluation"])',
        example=['Trial evaluation', 'Nursery evaluation'],
    )
    defaultValue: Optional[str] = Field(
        None,
        description='Variable default value. (examples: "red", "2.3", etc.)',
        example='2.0',
    )
    documentationURL: Optional[AnyUrl] = Field(
        None,
        description='A URL to the human readable documentation of this object',
        example='https://wiki.brapi.org/documentation.html',
    )
    externalReferences: Optional[ExternalReferences] = None
    growthStage: Optional[str] = Field(
        None,
        description='Growth stage at which measurement is made (examples: "flowering")',
        example='flowering',
    )
    institution: Optional[str] = Field(
        None,
        description='Name of institution submitting the variable',
        example='The BrAPI Institute',
    )
    language: Optional[str] = Field(
        None,
        description='2 letter ISO 639-1 code for the language of submission of the variable.',
        example='en',
    )
    method: Method
    ontologyReference: Optional[OntologyReference] = None
    scale: Scale
    scientist: Optional[str] = Field(
        None,
        description='Name of scientist submitting the variable.',
        example='Dr. Bob Robertson',
    )
    status: Optional[str] = Field(
        None,
        description='Variable status. (examples: "recommended", "obsolete", "legacy", etc.)',
        example='recommended',
    )
    submissionTimestamp: Optional[datetime] = Field(
        None, description='Timestamp when the Variable was added (ISO 8601)'
    )
    synonyms: Optional[List[str]] = Field(
        None,
        description='Other variable names',
        example=['Maize Height', 'Stalk Height', 'Corn Height'],
    )
    trait: Trait


class VendorPlate(BaseModel):
    clientPlateBarcode: Optional[str] = Field(
        None,
        description='(Optional) The value of the bar code attached to this plate',
        example='31dd5787',
    )
    clientPlateId: Optional[str] = Field(
        None,
        description='The ID which uniquely identifies this plate to the client making the request',
        example='0ad6c0ef',
    )
    sampleSubmissionFormat: Optional[PlateFormat] = None
    samples: Optional[List[VendorSample]] = None


class VendorPlateSubmission(BaseModel):
    clientId: str = Field(
        ...,
        description='A unique, alpha-numeric ID which identifies the client to the vendor. Used to connect the order to the contract, billing, and contact info.',
        example='e470ae0d',
    )
    numberOfSamples: int = Field(
        ...,
        description='The total number of samples contained in this request. Used for billing and basic validation of the request.',
        example=180,
    )
    plates: List[VendorPlateSubmissionPlates] = Field(
        ..., description='Array of new plates to be submitted to a vendor'
    )


class VendorPlateSubmissionRequest(BaseModel):
    clientId: str = Field(
        ...,
        description='A unique, alpha-numeric ID which identifies the client to the vendor. Used to connect the order to the contract, billing, and contact info.',
        example='b8aac350',
    )
    numberOfSamples: int = Field(
        ...,
        description='The total number of samples contained in this request. Used for billing and basic validation of the request.',
        example=180,
    )
    plates: List[VendorPlateSubmissionRequestPlates] = Field(
        ..., description='Array of new plates to be submitted to a vendor'
    )
    sampleType: SampleType = Field(
        ..., description='The type of Samples being submitted', example='Tissue'
    )


class VendorSpecification(BaseModel):
    additionalInfo: Optional[Dict[str, AdditionalInfo]] = Field(
        None,
        description='Additional arbitrary information specific to a particular Vendor. Look for the Vendors specific API documentation for more details',
    )
    services: Optional[List[VendorSpecificationService]] = Field(
        None, description='List of platform specifications available at the vendor'
    )
    vendorContact: Optional[VendorContact] = None


class GeoJSON(BaseModel):
    geometry: Optional[Union[PointGeometry, PolygonGeometry]] = Field(
        None,
        description='A geometry as defined by GeoJSON (RFC 7946). In this context, only Point or Polygon geometry are allowed.',
        example={'coordinates': [-76.506042, 42.417373, 123], 'type': 'Point'},
        title='GeoJSON Geometry',
    )
    type: Optional[str] = Field(
        'Feature', description='The literal string "Feature"', example='Feature'
    )


class GeoJSONSearchArea(GeoJSON):
    pass


class Metadata(MetadataBase):
    pagination: Optional[IndexPagination] = None


class CallsListResponse(BaseModel):
    _context: Optional[Context] = Field(None, alias='@context')
    metadata: MetadataTokenPagination
    result: CallsListResponseResult


class CallSetsListResponse(BaseModel):
    _context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: CallSetsListResponseResult


class CallSetResponse(BaseModel):
    _context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: CallSet


class GenomeMapListResponse(BaseModel):
    _context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: GenomeMapListResponseResult


class GenomeMapSingleResponse(BaseModel):
    _context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: GenomeMap


class LinkageGroupListResponse(BaseModel):
    _context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: LinkageGroupListResponseResult


class MarkerPositionListResponse(BaseModel):
    _context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: MarkerPositionListResponseResult


class ReferencesListResponse(BaseModel):
    _context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: ReferencesListResponseResult


class ReferenceSingleResponse(BaseModel):
    _context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: Reference


class ReferenceBasesResponse(BaseModel):
    _context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: ReferenceBases


class ReferenceSetsListResponse(BaseModel):
    _context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: ReferenceSetsListResponseResult


class ReferenceSetsSingleResponse(BaseModel):
    _context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: ReferenceSet


class SampleSingleResponse(BaseModel):
    _context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: Sample


class Field202AcceptedSearchResponse(BaseModel):
    _context: Optional[Context] = Field(None, alias='@context')
    metadata: Optional[Metadata] = None
    result: Optional[Field202AcceptedSearchResponseResult] = None


class VariantSetsListResponse(BaseModel):
    _context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: VariantSetsListResponseResult


class VariantSingleResponse(BaseModel):
    _context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: Variant


class VariantSetResponse(BaseModel):
    _context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: VariantSet


class VendorOrderListResponse(BaseModel):
    _context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: VendorOrderListResponseResult


class VendorOrderSubmissionSingleResponse(BaseModel):
    _context: Optional[Context] = Field(None, alias='@context')
    metadata: Optional[Metadata] = None
    result: Optional[VendorOrderSubmission] = None


class VendorResultFileListResponse(BaseModel):
    _context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: VendorResultFileListResponseResult


class VendorOrderStatusResponse(BaseModel):
    _context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: VendorOrderStatusResponseResult


class VendorPlateSubmissionIdSingleResponse(BaseModel):
    _context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: VendorPlateSubmissionId


class VendorPlateSubmissionSingleResponse(BaseModel):
    _context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: VendorPlateSubmission


class VendorSpecificationSingleResponse(BaseModel):
    _context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: VendorSpecification


class SampleListResponseResult(BaseModel):
    data: List[Sample]


class VendorPlateListResponseResult(BaseModel):
    data: List[VendorPlate]


class VendorOrderSubmissionRequest(VendorPlateSubmissionRequest):
    requiredServiceInfo: Optional[Dict[str, RequiredServiceInfo]] = Field(
        None,
        description='A map of additional data required by the requested service. This includes things like Volume and Concentration.',
        example={
            'extractDNA': True,
            'genus': 'Zea',
            'species': 'mays',
            'volumePerWell': '2.3 ml',
        },
    )
    serviceIds: List[str] = Field(
        ...,
        description='A list of unique, alpha-numeric ID which identify the requested services to be applied to this order. \nA Vendor Service defines what platform, technology, and markers will be used. \nA list of available service IDs can be retrieved from the Vendor Specs.',
        example=['e8f60f64', '05bd925a', 'b698fb5e'],
    )


class SampleListResponse(BaseModel):
    _context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: SampleListResponseResult


class VendorPlateListResponse(BaseModel):
    _context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: VendorPlateListResponseResult
