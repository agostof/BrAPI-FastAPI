---
openapi: 3.0.0
info:
  title: BrAPI-Core
  description: "The Breeding API (BrAPI) is a Standardized REST ful Web Service API Specification for communicating Plant Breeding Data. BrAPI allows for easy data sharing between databases and tools involved in plant breeding.\n<div class=\"brapi-section\">\n<h2 class=\"brapi-section-title\">General Reference Documentation</h2>\n<div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/URL_Structure.md\">URL Structure</a></div>\n<div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Response_Structure.md\">Response Structure</a></div>\n<div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Date_Time_Encoding.md\">Date/Time Encoding</a></div>\n<div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Location_Encoding.md\">Location Encoding</a></div>\n<div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Error_Handling.md\">Error Handling</a></div>\n<div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Search_Services.md\">Search Services</a></div>\n</div>\n\n<div class=\"current-brapi-section brapi-section\">\n<h2 class=\"brapi-section-title\">BrAPI Core</h2>\n<div class=\"brapi-section-description\">The BrAPI Core module contains high level entities used for organization and management. This includes Programs, Trials, Studies, Locations, People, and Lists</div>\n<div class=\"version-number\">V2.0</div>\n<div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Core\">GitHub</a></div>\n<div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Core\">SwaggerHub</a></div>\n<div class=\"link-btn\"><a href=\"https://brapicore.docs.apiary.io\">Apiary</a></div>\n<div class=\"stop-float\"></div>\n</div>\n\n<div class=\"brapi-section\">\n<h2 class=\"brapi-section-title\">BrAPI Phenotyping</h2>\n<div class=\"brapi-section-description\">The BrAPI Phenotyping module contains entities related to phenotypic observations. This includes Observation Units, Observations, Observation Variables, Traits, Scales, Methods, and Images</div>\n<div class=\"version-number\">V2.0</div>\n<div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Phenotyping\">GitHub</a></div>\n<div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Phenotyping\">SwaggerHub</a></div>\n<div class=\"link-btn\"><a href=\"https://brapiphenotyping.docs.apiary.io\">Apiary</a></div>\n<div class=\"stop-float\"></div>\n</div>\n\n<div class=\"brapi-section\">\n<h2 class=\"brapi-section-title\">BrAPI Genotyping</h2>\n<div class=\"brapi-section-description\">The BrAPI Genotyping module contains entities related to genotyping analysis. This includes Samples, Markers, Variant Sets, Variants, Call Sets, Calls, References, Reads, and Vendor Orders</div>\n<div class=\"version-number\">V2.0</div>\n<div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Genotyping\">GitHub</a></div>\n<div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Genotyping\">SwaggerHub</a></div>\n<div class=\"link-btn\"><a href=\"https://brapigenotyping.docs.apiary.io\">Apiary</a></div>\n<div class=\"stop-float\"></div>\n</div>\n\n<div class=\"brapi-section\">\n<h2 class=\"brapi-section-title\">BrAPI Germplasm</h2>\n<div class=\"brapi-section-description\">The BrAPI Germplasm module contains entities related to germplasm management. This includes Germplasm, Germplasm Attributes, Seed Lots, Crosses, Pedigree, and Progeny</div>\n<div class=\"version-number\">V2.0</div>\n<div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Germplasm\">GitHub</a></div>\n<div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Germplasm\">SwaggerHub</a></div>\n<div class=\"link-btn\"><a href=\"https://brapigermplasm.docs.apiary.io\">Apiary</a></div>\n<div class=\"stop-float\"></div>\n</div>\n\n<style>\n.link-btn{\nfloat: left; \nmargin: 2px 10px 0 0; \npadding: 0 5px; \nborder-radius: 5px; \nbackground-color: #ddd;\n}\n.stop-float{\n  clear: both;\n}\n.version-number{\n  float: left; \n  margin: 5px 10px 0 5px;\n}\n.brapi-section-title{\n  margin: 0 10px 0 0;\n  font-size: 20px;\n}\n.current-brapi-section{\n  font-weight: bolder;\n  border-radius: 5px; \n  background-color: #ddd;\n}\n.brapi-section{\n  padding: 5px 5px; \n}\n.brapi-section-description{\n  margin: 5px 0 0 5px;\n}\n</style>"
  version: "2.0"
servers:
- url: https://test-server.brapi.org/brapi/v2
security:
- AuthorizationToken: []
tags:
- name: Server Info
  description: Check the available calls on a server
  externalDocs:
    description: Docs
    url: https://wiki.brapi.org/
- name: Common Crop Names
  description: List of crops supported by this server
  externalDocs:
    description: Docs
    url: https://wiki.brapi.org/
- name: Programs
  description: Information about Programs
  externalDocs:
    description: Docs
    url: https://wiki.brapi.org/
- name: Trials
  description: Information about Trials
  externalDocs:
    description: Docs
    url: https://wiki.brapi.org/
- name: Studies
  description: Information about Studies
  externalDocs:
    description: Docs
    url: https://wiki.brapi.org/
- name: Locations
  description: Information about Locations
  externalDocs:
    description: Docs
    url: https://wiki.brapi.org/
- name: Seasons
  description: Information about Seasons
  externalDocs:
    description: Docs
    url: https://wiki.brapi.org/
- name: Lists
  description: Create and manipulate generic lists
  externalDocs:
    description: Docs
    url: https://wiki.brapi.org/
- name: People
  description: Create and manipulate information about people
  externalDocs:
    description: Docs
    url: https://wiki.brapi.org/
paths:
  /commoncropnames:
    get:
      tags:
      - Common Crop Names
      summary: Get the Common Crop Names
      description: "List the common crop names for the crops available in a database server. \n\nThis call is ** required ** for multi-crop systems where data from multiple \ncrops may be stored in the same database server. A distinct database server \nis defined by everything in the URL before \"/brapi/v2\", including host \nname and base path.\n\nThis call is recommended for single crop systems to be compatible with \nmulti-crop clients. For a single crop system the response should contain \nan array with exactly 1 element. \n\nThe common crop name can be used as a search parameter for Programs, \nStudies, and Germplasm."
      parameters:
      - name: page
        in: query
        description: |-
          Used to request a specific page of data to be returned.

          The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: "0"
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 1000
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/commonCropNamesResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /lists:
    get:
      tags:
      - Lists
      summary: Get filtered set of generic lists
      description: Get filtered set of generic lists
      parameters:
      - name: listType
        in: query
        description: The type of objects contained by this generic list
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/ListTypes'
      - name: listName
        in: query
        description: The human readable name of this generic list
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: listDbId
        in: query
        description: The unique ID of this generic list
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: listSource
        in: query
        description: The source tag of this generic list
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: externalReferenceID
        in: query
        description: An external reference ID. Could be a simple string or a URI. (use with `externalReferenceSource` parameter)
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: externalReferenceSource
        in: query
        description: An identifier for the source system or database of an external reference (use with `externalReferenceID` parameter)
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: page
        in: query
        description: |-
          Used to request a specific page of data to be returned.

          The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: "0"
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 1000
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListsListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
    post:
      tags:
      - Lists
      summary: Create New List Objects
      description: Create new list objects in the database
      parameters:
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ListNewRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListsListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /lists/{listDbId}:
    get:
      tags:
      - Lists
      summary: Get the details of a specific List
      description: Get a specific generic lists
      parameters:
      - name: listDbId
        in: path
        description: The unique ID of this generic list
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListsSingleResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found
    put:
      tags:
      - Lists
      summary: Update an existing generic list
      description: Update an existing generic list
      parameters:
      - name: listDbId
        in: path
        description: The unique ID of this generic list
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListNewRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListsSingleResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found
  /lists/{listDbId}/items:
    post:
      tags:
      - Lists
      summary: Add Items to a specific List
      description: Add new data to a specific generic lists
      parameters:
      - name: listDbId
        in: path
        description: The unique ID of this generic list
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        content:
          application/json:
            schema:
              type: array
              example:
              - 758a78c0
              - 2c78f9ee
              items:
                type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found
  /locations:
    get:
      tags:
      - Locations
      summary: Get a filtered list of Locations
      description: |-
        Get a list of locations.
        * The `countryCode` is as per [ISO_3166-1_alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) spec.
        * `altitude` is in meters.
      parameters:
      - name: locationType
        in: query
        description: Filter by location type specified.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: locationDbId
        in: query
        description: Filter by location DbId
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: externalReferenceID
        in: query
        description: An external reference ID. Could be a simple string or a URI. (use with `externalReferenceSource` parameter)
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: externalReferenceSource
        in: query
        description: An identifier for the source system or database of an external reference (use with `externalReferenceID` parameter)
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: page
        in: query
        description: |-
          Used to request a specific page of data to be returned.

          The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: "0"
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 1000
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
    post:
      tags:
      - Locations
      summary: Create new Locations
      description: |-
        Add new locations to database
        * The `countryCode` is as per [ISO_3166-1_alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) spec.
        * `altitude` is in meters.
      parameters:
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/LocationNewRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /locations/{locationDbId}:
    get:
      tags:
      - Locations
      summary: Get the details of a specific Location
      description: |-
        Get details for a location.
        - The `countryCode` is as per [ISO_3166-1_alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) spec.
        - `altitude` is in meters.'
      parameters:
      - name: locationDbId
        in: path
        description: The internal DB id for a location
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationSingleResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found
    put:
      tags:
      - Locations
      summary: Update the details for an existing Location
      description: |-
        Update the details for an existing location.
        - The `countryCode` is as per [ISO_3166-1_alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) spec.
        - `altitude` is in meters.'
      parameters:
      - name: locationDbId
        in: path
        description: The internal DB id for a location
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocationNewRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationSingleResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found
  /people:
    get:
      tags:
      - People
      summary: Get filtered list of People
      description: Get filtered list of people
      parameters:
      - name: firstName
        in: query
        description: A persons first name
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: lastName
        in: query
        description: A persons last name
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: personDbId
        in: query
        description: The unique ID of a person
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: userID
        in: query
        description: A systems user ID associated with this person. Different from personDbId because you could have a person who is not a user of the system.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: externalReferenceID
        in: query
        description: An external reference ID. Could be a simple string or a URI. (use with `externalReferenceSource` parameter)
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: externalReferenceSource
        in: query
        description: An identifier for the source system or database of an external reference (use with `externalReferenceID` parameter)
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: page
        in: query
        description: |-
          Used to request a specific page of data to be returned.

          The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: "0"
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 1000
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
    post:
      tags:
      - People
      summary: Create new People
      description: Create new People entities. `personDbId` is generated and managed by the server.
      parameters:
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/PersonNewRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /people/{personDbId}:
    get:
      tags:
      - People
      summary: Get the details for a specific Person
      description: Get the details for a specific Person
      parameters:
      - name: personDbId
        in: path
        description: The unique ID of a person
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonSingleResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found
    put:
      tags:
      - People
      summary: Update an existing Person
      description: Update an existing Person
      parameters:
      - name: personDbId
        in: path
        description: The unique ID of a person
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonNewRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonSingleResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found
  /programs:
    get:
      tags:
      - Programs
      summary: Get a filtered list of breeding Programs
      description: Get a filtered list of breeding Programs. This list can be filtered by common crop name to narrow results to a specific crop.
      parameters:
      - name: commonCropName
        in: query
        description: Filter by the common crop name. Exact match.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: programDbId
        in: query
        description: Program filter to only return trials associated with given program id.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: programName
        in: query
        description: Filter by program name. Exact match.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: abbreviation
        in: query
        description: Filter by program abbreviation. Exact match.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: externalReferenceID
        in: query
        description: An external reference ID. Could be a simple string or a URI. (use with `externalReferenceSource` parameter)
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: externalReferenceSource
        in: query
        description: An identifier for the source system or database of an external reference (use with `externalReferenceID` parameter)
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: page
        in: query
        description: |-
          Used to request a specific page of data to be returned.

          The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: "0"
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 1000
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProgramListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
    post:
      tags:
      - Programs
      summary: Add new breeding Programs to the database
      description: Add new breeding Programs to the database. The `programDbId` is set by the server, all other fields are take from the request body, or a default value is used.
      parameters:
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ProgramNewRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProgramListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /programs/{programDbId}:
    get:
      tags:
      - Programs
      summary: Get a breeding Program by Id
      description: Get a single breeding Program by Id. This can be used to quickly get the details of a Program when you have the Id from another entity.
      parameters:
      - name: programDbId
        in: path
        description: Filter by the common crop name. Exact match.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProgramSingleResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
    put:
      tags:
      - Programs
      summary: Update an existing Program
      description: Update the details of an existing breeding Program.
      parameters:
      - name: programDbId
        in: path
        description: Filter by the common crop name. Exact match.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProgramNewRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProgramSingleResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /search/lists:
    post:
      tags:
      - Lists
      summary: Submit a search request for Lists
      description: |-
        Advanced searching for the list resource.
        See Search Services for additional implementation details.
      parameters:
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListSearchRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListsListResponse'
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/202AcceptedSearchResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /search/lists/{searchResultsDbId}:
    get:
      tags:
      - Lists
      summary: Get the results of a List search request
      description: |-
        Advanced searching for the list resource.
        See Search Services for additional implementation details.
      parameters:
      - name: searchResultsDbId
        in: path
        description: Unique identifier which references the search results
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: page
        in: query
        description: |-
          Used to request a specific page of data to be returned.

          The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: "0"
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 1000
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListsListResponse'
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/202AcceptedSearchResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /search/locations:
    post:
      tags:
      - Locations
      summary: Submit a search request for Locations
      description: |-
        Advanced searching for the locations resource.
        See Search Services for additional implementation details.
      parameters:
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocationSearchRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationListResponse'
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/202AcceptedSearchResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /search/locations/{searchResultsDbId}:
    get:
      tags:
      - Locations
      summary: Get the results of a Locations search request
      description: |-
        Advanced searching for the locations resource.
        See Search Services for additional implementation details.
      parameters:
      - name: searchResultsDbId
        in: path
        description: Unique identifier which references the search results
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: page
        in: query
        description: |-
          Used to request a specific page of data to be returned.

          The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: "0"
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 1000
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationListResponse'
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/202AcceptedSearchResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /search/people:
    post:
      tags:
      - People
      summary: Submit a search request for People
      description: |-
        Advanced searching for the programs resource.

        See Search Services for additional implementation details.
      parameters:
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonSearchRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonListResponse'
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/202AcceptedSearchResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /search/people/{searchResultsDbId}:
    get:
      tags:
      - People
      summary: Get the results of a People search request
      description: |-
        Advanced searching for the people resource.

        See Search Services for additional implementation details.
      parameters:
      - name: searchResultsDbId
        in: path
        description: Unique identifier which references the search results
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: page
        in: query
        description: |-
          Used to request a specific page of data to be returned.

          The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: "0"
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 1000
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonListResponse'
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/202AcceptedSearchResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /search/programs:
    post:
      tags:
      - Programs
      summary: Submit a search request for Programs
      description: |-
        Advanced searching for the programs resource.
        See Search Services for additional implementation details.
      parameters:
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProgramSearchRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProgramListResponse'
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/202AcceptedSearchResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /search/programs/{searchResultsDbId}:
    get:
      tags:
      - Programs
      summary: Get the results of a Programs search request
      description: |-
        Advanced searching for the programs resource.
        See Search Services for additional implementation details.
      parameters:
      - name: searchResultsDbId
        in: path
        description: Unique identifier which references the search results
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: page
        in: query
        description: |-
          Used to request a specific page of data to be returned.

          The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: "0"
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 1000
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProgramListResponse'
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/202AcceptedSearchResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found
  /search/studies:
    post:
      tags:
      - Studies
      summary: Submit a search request for Studies
      description: |-
        Get list of studies
        StartDate and endDate should be ISO-8601 format for dates
        See Search Services for additional implementation details.
      parameters:
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        description: Study Search request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StudySearchRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudyListResponse'
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/202AcceptedSearchResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /search/studies/{searchResultsDbId}:
    get:
      tags:
      - Studies
      summary: Get the results of a Studies search request
      description: |-
        Get list of studies

        StartDate and endDate should be ISO-8601 format for dates

        See Search Services for additional implementation details.
      parameters:
      - name: searchResultsDbId
        in: path
        description: Unique identifier which references the search results
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: page
        in: query
        description: |-
          Used to request a specific page of data to be returned.

          The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: "0"
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 1000
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudyListResponse'
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/202AcceptedSearchResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found
  /search/trials:
    post:
      tags:
      - Trials
      summary: Submit a search request for Trials
      description: |-
        Advanced searching for the programs resource.
        See Search Services for additional implementation details.
      parameters:
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrialSearchRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrialListResponse'
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/202AcceptedSearchResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /search/trials/{searchResultsDbId}:
    get:
      tags:
      - Trials
      summary: Get the results of a Trials search request
      description: |-
        Advanced searching for the trials resource.
        See Search Services for additional implementation details.
      parameters:
      - name: searchResultsDbId
        in: path
        description: Unique identifier which references the search results
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: page
        in: query
        description: |-
          Used to request a specific page of data to be returned.

          The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: "0"
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 1000
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrialListResponse'
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/202AcceptedSearchResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found
  /seasons:
    get:
      tags:
      - Seasons
      summary: Get the Seasons
      description: "Call to retrieve all seasons in the database.\n\nA season is made of 2 parts; the primary year and a term which defines a segment of the year. \nThis could be a traditional season, like \"Spring\" or \"Summer\" or this could be a month, like \n\"May\" or \"June\" or this could be an arbitrary season name which is meaningful to the breeding \nprogram like \"PlantingTime_3\" or \"Season E\""
      parameters:
      - name: seasonDbId
        in: query
        description: The unique identifier for a season. For backward compatibility it can be a string like '2012', '1957-2004'
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: b230a1d2, Spring_2017, 3
      - name: season
        in: query
        description: The term to describe a given season. Example "Spring" OR "May" OR "Planting_Time_7".
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: Spring
      - name: year
        in: query
        description: The 4 digit year of a season. Example "2017"
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 2017
      - name: page
        in: query
        description: |-
          Used to request a specific page of data to be returned.

          The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: "0"
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 1000
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SeasonListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
    post:
      tags:
      - Seasons
      summary: POST new Seasons
      description: Add new season entries to the database
      parameters:
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Season'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SeasonListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /seasons/{seasonDbId}:
    get:
      tags:
      - Seasons
      summary: Get the a single Season
      description: Get the a single Season
      parameters:
      - name: seasonDbId
        in: path
        description: The unique identifier for a season. For backward compatibility it can be a string like '2012', '1957-2004'
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: b230a1d2, Spring_2017, 3
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SeasonSingleResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
    put:
      tags:
      - Seasons
      summary: Update existing Seasons
      description: Update existing Seasons
      parameters:
      - name: seasonDbId
        in: path
        description: The unique identifier for a season. For backward compatibility it can be a string like '2012', '1957-2004'
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: b230a1d2, Spring_2017, 3
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Season'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SeasonSingleResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /serverinfo:
    get:
      tags:
      - Server Info
      summary: Get the list of implemented Calls
      description: "Implementation Notes\n\nHaving a consistent structure for the path string of each call is very \nimportant for teams to be able to connect and find errors. Read more on Github.\n\nHere are the rules for the path of each call that should be returned\n\nEvery word in the call path should match the documentation exactly, both in \nspelling and capitalization. Note that path strings are all lower case, but \npath parameters are camel case.\n\nEach path should start relative to \\\"/\\\" and therefore should not include \\\"/\\\"\n\nNo leading or trailing slashes (\\\"/\\\") \n\nPath parameters are wrapped in curly braces (\\\"{}\\\"). The name of the path parameter \nshould be spelled exactly as it is specified in the documentation.\n\nExamples \n\nGOOD   \"call\": \"germplasm/{germplasmDbId}/pedigree\" \n\nBAD    \"call\": \"germplasm/{id}/pedigree\"\n\nBAD    \"call\": \"germplasm/{germplasmDBid}/pedigree\" \n\nBAD    \"call\": \"brapi/v2/germplasm/{germplasmDbId}/pedigree\" \n\nBAD    \"call\": \"/germplasm/{germplasmDbId}/pedigree/\" \n\nBAD    \"call\": \"germplasm/<germplasmDbId>/pedigree\""
      parameters:
      - name: dataType
        in: query
        description: The data format supported by the call.
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/WSMIMEDataTypes'
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerInfoResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /studies:
    get:
      tags:
      - Studies
      summary: Get a filtered list of Studies
      description: |-
        Get list of studies

        StartDate and endDate should be ISO-8601 format for dates
      parameters:
      - name: commonCropName
        in: query
        description: Common name for the crop associated with this study
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: studyType
        in: query
        description: Filter based on study type unique identifier
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: programDbId
        in: query
        description: Program filter to only return studies associated with given program id.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: locationDbId
        in: query
        description: Filter by location
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: seasonDbId
        in: query
        description: Filter by season or year
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: trialDbId
        in: query
        description: Filter by trial
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: studyDbId
        in: query
        description: Filter by study DbId
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: studyName
        in: query
        description: Filter by study name
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: studyCode
        in: query
        description: Filter by study code
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: studyPUI
        in: query
        description: Filter by study PUI
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: germplasmDbId
        in: query
        description: Filter by germplasm DbId
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: observationVariableDbId
        in: query
        description: Filter by observation variable DbId
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: active
        in: query
        description: Filter active status true/false.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: sortBy
        in: query
        description: Name of the field to sort by.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - studyDbId
          - trialDbId
          - programDbId
          - locationDbId
          - seasonDbId
          - studyType
          - studyName
          - studyLocation
          - programName
      - name: sortOrder
        in: query
        description: Sort order direction. Ascending/Descending.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - asc
          - ASC
          - desc
          - DESC
      - name: externalReferenceID
        in: query
        description: An external reference ID. Could be a simple string or a URI. (use with `externalReferenceSource` parameter)
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: externalReferenceSource
        in: query
        description: An identifier for the source system or database of an external reference (use with `externalReferenceID` parameter)
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: page
        in: query
        description: |-
          Used to request a specific page of data to be returned.

          The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: "0"
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 1000
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudyListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
    post:
      tags:
      - Studies
      summary: Create new Studies.
      description: |-
        Create new studies

        Implementation Notes

        StartDate and endDate should be ISO-8601 format for dates

        `studDbId` is generated by the server.
      parameters:
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/StudyNewRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudyListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /studies/{studyDbId}:
    get:
      tags:
      - Studies
      summary: Get the details for a specific Study
      description: |-
        Retrieve the information of the study required for field data collection

        An additionalInfo field was added to provide a controlled vocabulary for less common data fields.
      parameters:
      - name: studyDbId
        in: path
        description: Identifier of the study. Usually a number, could be alphanumeric.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudySingleResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found
    put:
      tags:
      - Studies
      summary: Update an existing Study
      description: Update an existing Study with new data
      parameters:
      - name: studyDbId
        in: path
        description: Identifier of the study. Usually a number, could be alphanumeric.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StudyNewRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudySingleResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found
  /studytypes:
    get:
      tags:
      - Studies
      summary: Get the Study Types
      description: Call to retrieve the list of study types.
      parameters:
      - name: page
        in: query
        description: |-
          Used to request a specific page of data to be returned.

          The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: "0"
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 1000
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/studyTypesResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /trials:
    get:
      tags:
      - Trials
      summary: Get a filtered list of Trials
      description: Retrieve a filtered list of breeding Trials. A Trial is a collection of Studies
      parameters:
      - name: active
        in: query
        description: Filter active status true/false.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: commonCropName
        in: query
        description: Common name for the crop associated with this trial
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: contactDbId
        in: query
        description: Contact entities associated with this trial
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: programDbId
        in: query
        description: Program filter to only return trials associated with given program id.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: locationDbId
        in: query
        description: Filter by location
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: searchDateRangeStart
        in: query
        description: "The start of the overlapping search date range. `searchDateRangeStart` must be before `searchDateRangeEnd`.\n\nReturn a Trial entity if any of the following cases are true\n\n- `searchDateRangeStart` is before `trial.endDate` AND `searchDateRangeEnd` is null \n\n- `searchDateRangeStart` is before `trial.endDate` AND `searchDateRangeEnd` is after `trial.startDate`\n\n- `searchDateRangeEnd` is after `trial.startDate` AND `searchDateRangeStart` is null\n\n- `searchDateRangeEnd` is after `trial.startDate` AND `searchDateRangeStart` is before `trial.endDate`"
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date
      - name: searchDateRangeEnd
        in: query
        description: "The start of the overlapping search date range. `searchDateRangeStart` must be before `searchDateRangeEnd`.\n\nReturn a Trial entity if any of the following cases are true\n\n- `searchDateRangeStart` is before `trial.endDate` AND `searchDateRangeEnd` is null \n\n- `searchDateRangeStart` is before `trial.endDate` AND `searchDateRangeEnd` is after `trial.startDate`\n\n- `searchDateRangeEnd` is after `trial.startDate` AND `searchDateRangeStart` is null\n\n- `searchDateRangeEnd` is after `trial.startDate` AND `searchDateRangeStart` is before `trial.endDate`"
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date
      - name: studyDbId
        in: query
        description: Filter by connected studyDbId
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: trialDbId
        in: query
        description: Filter by trialDbId
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: trialName
        in: query
        description: Filter by trial name
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: trialPUI
        in: query
        description: Filter by trial PUI
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: sortBy
        in: query
        description: Sort order. Name of the field to sort by.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - trialDbId
          - trialName
          - programDbId
          - programName
          - locationDbId
          - startDate
          - endDate
      - name: sortOrder
        in: query
        description: 'Sort order direction: asc/desc'
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - asc
          - ASC
          - desc
          - DESC
      - name: externalReferenceID
        in: query
        description: An external reference ID. Could be a simple string or a URI. (use with `externalReferenceSource` parameter)
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: externalReferenceSource
        in: query
        description: An identifier for the source system or database of an external reference (use with `externalReferenceID` parameter)
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: page
        in: query
        description: |-
          Used to request a specific page of data to be returned.

          The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: "0"
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 1000
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrialListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
    post:
      tags:
      - Trials
      summary: Create new trials
      description: Create new breeding Trials. A Trial represents a collection of related Studies. `trialDbId` is generated by the server.
      parameters:
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/TrialNewRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrialListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /trials/{trialDbId}:
    get:
      tags:
      - Trials
      summary: Get the details of a specific Trial
      description: Get the details of a specific Trial
      parameters:
      - name: trialDbId
        in: path
        description: The internal trialDbId
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrialSingleResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found
    put:
      tags:
      - Trials
      summary: Update the details of an existing Trial
      description: Update the details of an existing Trial
      parameters:
      - name: trialDbId
        in: path
        description: The internal trialDbId
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrialNewRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrialSingleResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found
components:
  schemas:
    Contact:
      required:
      - contactDbId
      type: object
      properties:
        contactDbId:
          type: string
          description: |-
            The ID which uniquely identifies this contact

            MIAPPE V1.1 (DM-33) Person ID - An identifier for the data submitter. If that submitter is an individual, ORCID identifiers are recommended.
          example: 5f4e5509
        email:
          type: string
          description: |-
            The contacts email address

            MIAPPE V1.1 (DM-32) Person email - The electronic mail address of the person.
          example: bob@bob.com
        instituteName:
          type: string
          description: |-
            The name of the institution which this contact is part of

            MIAPPE V1.1 (DM-35) Person affiliation - The institution the person belongs to
          example: The BrAPI Institute
        name:
          type: string
          description: |-
            The full name of this contact person

            MIAPPE V1.1 (DM-31) Person name - The name of the person (either full name or as used in scientific publications)
          example: Bob Robertson
        orcid:
          type: string
          description: |-
            The Open Researcher and Contributor ID for this contact person (orcid.org)

            MIAPPE V1.1 (DM-33) Person ID - An identifier for the data submitter. If that submitter is an individual, ORCID identifiers are recommended.
          example: http://orcid.org/0000-0001-8640-1750
        type:
          type: string
          description: |-
            The type of person this contact represents (ex: Coordinator, Scientist, PI, etc.)

            MIAPPE V1.1 (DM-34) Person role - Type of contribution of the person to the investigation
          example: PI
    Context:
      title: context
      type: array
      description: "The JSON-LD Context is used to provide JSON-LD definitions to each field in a JSON object. By providing an array of context file urls, a BrAPI response object becomes JSON-LD compatible.  \n\nFor more information, see https://w3c.github.io/json-ld-syntax/#the-context"
      example:
      - https://brapi.org/jsonld/context/metadata.jsonld
      items:
        type: string
        format: uri
    DataLink:
      type: object
      properties:
        dataFormat:
          type: string
          description: |-
            The structure of the data within a file. For example - VCF, table, image archive, multispectral image archives in EDAM ontology (used in Galaxy)

            MIAPPE V1.1 (DM-38) Data file description - Description of the format of the data file. May be a standard file format name, or a description of organization of the data in a tabular file.
          example: Image Archive
        description:
          type: string
          description: |-
            The general description of this data link

            MIAPPE V1.1 (DM-38) Data file description - Description of the format of the data file. May be a standard file format name, or a description of organization of the data in a tabular file.
          example: Raw drone images collected for this study
        fileFormat:
          type: string
          description: |-
            The MIME type of the file (ie text/csv, application/excel, application/zip).

            MIAPPE V1.1 (DM-38) Data file description - Description of the format of the data file. May be a standard file format name, or a description of organization of the data in a tabular file.
          example: application/zip
        name:
          type: string
          description: |-
            The name of the external data link

            MIAPPE V1.1 (DM-38) Data file description - Description of the format of the data file. May be a standard file format name, or a description of organization of the data in a tabular file.
          example: image-archive.zip
        provenance:
          type: string
          description: The description of the origin or ownership of this linked data. Could be a formal reference to software, method, or workflow.
          example: 'Image Processing Pipeline, built at the University of Antarctica: https://github.com/antarctica/pipeline'
        scientificType:
          type: string
          description: The general type of data. For example- Genotyping, Phenotyping raw data, Phenotyping reduced data, Environmental, etc
          example: Environmental
        url:
          type: string
          description: |-
            URL describing the location of this data file to view or download

            MIAPPE V1.1 (DM-37) Data file link - Link to the data file (or digital object) in a public database or in a persistent institutional repository; or identifier of the data file when submitted together with the MIAPPE submission.
          format: uri
          example: https://brapi.org/image-archive.zip
        version:
          type: string
          description: "The version number for this data \n\nMIAPPE V1.1 (DM-39) Data file version - The version of the dataset (the actual data)."
          example: 1.0.3
    EnvironmentParameter:
      required:
      - description
      - parameterName
      type: object
      properties:
        description:
          type: string
          description: Human-readable value of the environment parameter (defined above) constant within the experiment
          example: the soil type was clay
        parameterName:
          type: string
          description: "Name of the environment parameter constant within the experiment\n\nMIAPPE V1.1 (DM-58) Environment parameter - Name of the environment parameter constant within the experiment. "
          example: soil type
        parameterPUI:
          type: string
          description: URI pointing to an ontology class for the parameter
          example: PECO:0007155
        unit:
          type: string
          description: Unit of the value for this parameter
          example: pH
        unitPUI:
          type: string
          description: URI pointing to an ontology class for the unit
          example: PECO:0007059
        value:
          type: string
          description: |-
            Numerical or categorical value

            MIAPPE V1.1 (DM-59) Environment parameter value - Value of the environment parameter (defined above) constant within the experiment.
          example: clay soil
        valuePUI:
          type: string
          description: URI pointing to an ontology class for the parameter value
          example: ENVO:00002262
    ExternalReferences:
      title: ExternalReferences
      type: array
      description: An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.
      example:
      - referenceID: doi:10.155454/12341234
        referenceSource: DOI
      - referenceID: http://purl.obolibrary.org/obo/ro.owl
        referenceSource: OBO Library
      - referenceID: 75a50e76
        referenceSource: Remote Data Collection Upload Tool
      items:
        $ref: '#/components/schemas/ExternalReferences_inner'
    ListBaseFields:
      required:
      - listType
      type: object
      properties:
        additionalInfo:
          type: object
          additionalProperties:
            type: string
          description: Additional arbitrary info
          example: {}
        dateCreated:
          type: string
          description: Timestamp when the entity was first created
          format: date-time
        dateModified:
          type: string
          description: Timestamp when the entity was last updated
          format: date-time
        externalReferences:
          $ref: '#/components/schemas/ExternalReferences'
        listDescription:
          type: string
          description: Description of a List
          example: This is a list of germplasm I would like to investigate next season
        listName:
          type: string
          description: Human readable name of a List
          example: MyGermplasm_Sept_2020
        listOwnerName:
          type: string
          description: Human readable name of a List Owner. (usually a user or person)
          example: Bob Robertson
        listOwnerPersonDbId:
          type: string
          description: The unique identifier for a List Owner. (usually a user or person)
          example: 58db0628
        listSize:
          type: integer
          description: The number of elements in a List
          example: 53
        listSource:
          type: string
          description: The description of where a List originated from
          example: GeneBank Repository 1.3
        listType:
          $ref: '#/components/schemas/ListTypes'
    ListDetails:
      allOf:
      - $ref: '#/components/schemas/ListSummary'
      - $ref: '#/components/schemas/ListNewRequest'
    ListNewRequest:
      allOf:
      - $ref: '#/components/schemas/ListBaseFields'
      - type: object
        properties:
          data:
            type: array
            description: The list of DbIds contained in this list
            example:
            - 758a78c0
            - 2c78f9ee
            items:
              type: string
    ListSearchRequest:
      allOf:
      - $ref: '#/components/schemas/SearchRequestParametersPaging'
      - $ref: '#/components/schemas/SearchRequestParametersExternalReferences'
      - type: object
        properties:
          dateCreatedRangeEnd:
            type: string
            format: date-time
          dateCreatedRangeStart:
            type: string
            format: date-time
          dateModifiedRangeEnd:
            type: string
            format: date-time
          dateModifiedRangeStart:
            type: string
            format: date-time
          listDbIds:
            type: array
            example:
            - 55f20cf6
            - 3193ca3d
            items:
              type: string
          listNames:
            type: array
            example:
            - Planing List 1
            - Bobs List
            items:
              type: string
          listOwnerNames:
            type: array
            example:
            - Bob Robertson
            - Rob Robertson
            items:
              type: string
          listOwnerPersonDbIds:
            type: array
            example:
            - bob@bob.com
            - rob@bob.com
            items:
              type: string
          listSources:
            type: array
            example:
            - USER
            - SYSTEM
            - EXTERNAL
            items:
              type: string
          listType:
            $ref: '#/components/schemas/ListTypes'
    ListSummary:
      allOf:
      - $ref: '#/components/schemas/ListBaseFields'
      - required:
        - listDbId
        type: object
        properties:
          listDbId:
            type: string
            description: The unique identifier for a List
            example: 6f621cfa
    ListTypes:
      type: string
      example: germplasm
      enum:
      - germplasm
      - markers
      - programs
      - trials
      - studies
      - observationUnits
      - observations
      - observationVariables
      - samples
    Location:
      allOf:
      - $ref: '#/components/schemas/LocationNewRequest'
      - type: object
        properties:
          locationDbId:
            type: string
            description: The unique identifier for a Location
            example: 3cfdd67d
    LocationNewRequest:
      type: object
      properties:
        abbreviation:
          type: string
          description: An abbreviation which represents this location
          example: L1
        additionalInfo:
          type: object
          additionalProperties:
            type: string
          description: Additional arbitrary info
          example: {}
        coordinateDescription:
          type: string
          description: Describes the precision and landmarks of the coordinate values used for this location. (ex. the site, the nearest town, a 10 kilometers radius circle, +/- 20 meters, etc)
          example: North East corner of greenhouse
        coordinateUncertainty:
          type: string
          description: Uncertainty associated with the coordinates in meters. Leave the value empty if the uncertainty is unknown.
          example: "20"
        coordinates:
          $ref: '#/components/schemas/geoJSON'
        countryCode:
          type: string
          description: |2-
             [ISO_3166-1_alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) spec
            MIAPPE V1.1 (DM-17) Geographic location (country) - The country where the experiment took place, either as a full name or preferably as a 2-letter code.
          example: PER
        countryName:
          type: string
          description: |-
            The full name of the country where this location is

            MIAPPE V1.1 (DM-17) Geographic location (country) - The country where the experiment took place, either as a full name or preferably as a 2-letter code.
          example: Peru
        documentationURL:
          type: string
          description: A URL to the human readable documentation of this object
          format: uri
          example: https://brapi.org
        environmentType:
          type: string
          description: Describes the general type of environment of the location. (ex. forest, field, nursery, etc)
          example: Nursery
        exposure:
          type: string
          description: Describes the level of protection/exposure for things like sun light and wind.
          example: Structure, no exposure
        externalReferences:
          $ref: '#/components/schemas/ExternalReferences'
        instituteAddress:
          type: string
          description: |-
            The street address of the institute representing this location

            MIAPPE V1.1 (DM-16) Contact institution - Name and address of the institution responsible for the study.
          example: 71 Pilgrim Avenue Chevy Chase MD 20815
        instituteName:
          type: string
          description: |-
            Each institute/laboratory can have several experimental field

            MIAPPE V1.1 (DM-16) Contact institution - Name and address of the institution responsible for the study.
          example: Plant Science Institute
        locationName:
          type: string
          description: |-
            A human readable name for this location

            MIAPPE V1.1 (DM-18) Experimental site name - The name of the natural site, experimental field, greenhouse, phenotyping facility, etc. where the experiment took place.
          example: Location 1
        locationType:
          type: string
          description: The type of location this represents (ex. Breeding Location, Storage Location, etc)
          example: Storage Location
        siteStatus:
          type: string
          description: Description of the accessibility of the location (ex. Public, Private)
          example: Private
        slope:
          type: string
          description: Describes the approximate slope (height/distance) of the location.
          example: "0"
        topography:
          type: string
          description: Describes the topography of the land at the location. (ex. Plateau, Cirque, Hill, Valley, etc)
          example: Valley
    LocationSearchRequest:
      allOf:
      - $ref: '#/components/schemas/SearchRequestParametersPaging'
      - $ref: '#/components/schemas/SearchRequestParametersExternalReferences'
      - $ref: '#/components/schemas/SearchRequestParametersLocations'
      - type: object
        properties:
          abbreviations:
            type: array
            description: An abbreviation which represents this location
            example:
            - L1
            - LHC
            items:
              type: string
          altitudeMax:
            type: number
            description: The maximum altitude to search for
            example: 200
          altitudeMin:
            type: number
            description: The minimum altitude to search for
            example: 20
          coordinates:
            $ref: '#/components/schemas/geoJSONSearchArea'
          countryCodes:
            type: array
            description: '[ISO_3166-1_alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) spec'
            example:
            - USA
            - PER
            items:
              type: string
          countryNames:
            type: array
            description: The full name of the country to search for
            example:
            - United States of America
            - Peru
            items:
              type: string
          instituteAddresses:
            type: array
            description: The street address of the institute to search for
            example:
            - 123 Main Street
            - 456 Side Street
            items:
              type: string
          instituteNames:
            type: array
            description: The name of the institute to search for
            example:
            - The Institute
            - The Other Institute
            items:
              type: string
          locationTypes:
            type: array
            description: The type of location this represents (ex. Breeding Location, Storage Location, etc)
            example:
            - Nursery
            - Storage Location
            items:
              type: string
    MethodBaseClass:
      type: object
      properties:
        additionalInfo:
          type: object
          additionalProperties:
            type: string
          description: Additional arbitrary info
        bibliographicalReference:
          type: string
          description: |-
            Bibliographical reference describing the method.

            MIAPPE V1.1 (DM-91) Reference associated to the method - URI/DOI of reference describing the method.
          example: Smith, 1893, Really Cool Paper, Popular Journal
        description:
          type: string
          description: |-
            Method description

            MIAPPE V1.1 (DM-90) Method description - Textual description of the method, which may extend a method defined in an external reference with specific parameters, e.g. growth stage, inoculation precise organ (leaf number)
          example: A measuring tape was used
        externalReferences:
          $ref: '#/components/schemas/ExternalReferences'
        formula:
          type: string
          description: For computational methods i.e., when the method consists in assessing the trait by computing measurements, write the generic formula used for the calculation
          example: a^2 + b^2 = c^2
        methodClass:
          type: string
          description: 'Method class (examples: "Measurement", "Counting", "Estimation", "Computation", etc.)'
          example: Measurement
        methodName:
          type: string
          description: |-
            Human readable name for the method

            MIAPPE V1.1 (DM-88) Method  Name of the method of observation
          example: Measuring Tape
        ontologyReference:
          $ref: '#/components/schemas/OntologyReference'
    ObservationUnitHierarchyLevel:
      title: ObservationUnitHierarchyLevel
      type: object
      properties:
        levelName:
          type: string
          description: A name for this level
          example: plot
          enum:
          - study
          - field
          - entry
          - rep
          - block
          - sub-block
          - plot
          - sub-plot
          - plant
          - pot
          - sample
        levelOrder:
          type: integer
          description: '`levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`''s lower numbers are at the top of the hierarchy (ie field -> 1) and higher numbers are at the bottom of the hierarchy (ie plant -> 9).'
          example: 2
      description: 'Observation levels indicate the granularity level at which the measurements are taken. `levelName` defines the level, `levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`s lower numbers are at the top of the hierarchy (ie field > 0) and higher numbers are at the bottom of the hierarchy (ie plant > 6). '
    OntologyReference:
      required:
      - ontologyDbId
      - ontologyName
      type: object
      properties:
        documentationLinks:
          type: array
          description: links to various ontology documentation
          items:
            $ref: '#/components/schemas/OntologyReference_documentationLinks'
        ontologyDbId:
          type: string
          description: Ontology database unique identifier
          example: 6b071868
        ontologyName:
          type: string
          description: Ontology name
          example: The Crop Ontology
        version:
          type: string
          description: Ontology version (no specific format)
          example: 7.2.3
      description: |-
        MIAPPE V1.1

        (DM-85) Variable accession number - Accession number of the variable in the Crop Ontology

        (DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).

        (DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).

        (DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology).
    Person:
      allOf:
      - $ref: '#/components/schemas/PersonNewRequest'
      - required:
        - personDbId
        type: object
        properties:
          personDbId:
            type: string
            description: Unique ID for a person
            example: 14340a54
    PersonNewRequest:
      type: object
      properties:
        additionalInfo:
          type: object
          additionalProperties:
            type: string
          description: Additional arbitrary info
        description:
          type: string
          description: description of this person
          example: Bob likes pina coladas and getting caught in the rain.
        emailAddress:
          type: string
          description: email address for this person
          example: bob@bob.com
        externalReferences:
          $ref: '#/components/schemas/ExternalReferences'
        firstName:
          type: string
          description: Persons first name
          example: Bob
        lastName:
          type: string
          description: Persons last name
          example: Robertson
        mailingAddress:
          type: string
          description: physical address of this person
          example: 123 Street Ave, City, State, Country
        middleName:
          type: string
          description: Persons middle name
          example: Danger
        phoneNumber:
          type: string
          description: phone number of this person
          example: +1-555-555-5555
        userID:
          type: string
          description: A systems user ID associated with this person. Different from personDbId because you could have a person who is not a user of the system.
          example: bob-23
    PersonSearchRequest:
      allOf:
      - $ref: '#/components/schemas/SearchRequestParametersPaging'
      - $ref: '#/components/schemas/SearchRequestParametersExternalReferences'
      - type: object
        properties:
          emailAddresses:
            type: array
            description: email address for this person
            example:
            - bob@bob.com
            - rob@bob.com
            items:
              type: string
          firstNames:
            type: array
            description: Persons first name
            example:
            - Bob
            - Rob
            items:
              type: string
          lastNames:
            type: array
            description: Persons last name
            example:
            - Robertson
            - Smith
            items:
              type: string
          mailingAddresses:
            type: array
            description: physical address of this person
            example:
            - 123 Main Street
            - 456 Side Street
            items:
              type: string
          middleNames:
            type: array
            description: Persons middle name
            example:
            - Danger
            - Fight
            items:
              type: string
          personDbIds:
            type: array
            description: Unique ID for this person
            example:
            - 1e7731ab
            - bc28cff8
            items:
              type: string
          phoneNumbers:
            type: array
            description: phone number of this person
            example:
            - "9995555555"
            - "8884444444"
            items:
              type: string
          userIDs:
            type: array
            description: A systems user ID associated with this person. Different from personDbId because you could have a person who is not a user of the system.
            example:
            - bob
            - rob
            items:
              type: string
    Program:
      allOf:
      - $ref: '#/components/schemas/ProgramNewRequest'
      - required:
        - programDbId
        type: object
        properties:
          programDbId:
            type: string
            description: The ID which uniquely identifies the program
            example: f60f15b2
    ProgramNewRequest:
      type: object
      properties:
        abbreviation:
          type: string
          description: An abbreviation which represents this program
          example: P1
        additionalInfo:
          type: object
          additionalProperties:
            type: string
          description: Additional arbitrary info
        commonCropName:
          type: string
          description: Common name for the crop which this program is for
          example: Tomatillo
        documentationURL:
          type: string
          description: A URL to the human readable documentation of this object
          format: uri
          example: https://wiki.brapi.org
        externalReferences:
          $ref: '#/components/schemas/ExternalReferences'
        leadPersonDbId:
          type: string
          description: The unique identifier of the program leader
          example: fe6f5c50
        leadPersonName:
          type: string
          description: The name of the program leader
          example: Bob Robertson
        objective:
          type: string
          description: The primary objective of the program
          example: Make a better tomatillo
        programName:
          type: string
          description: Human readable name of the program
          example: Tomatillo_Breeding_Program
    ProgramSearchRequest:
      allOf:
      - $ref: '#/components/schemas/SearchRequestParametersPaging'
      - $ref: '#/components/schemas/SearchRequestParametersCommonCropNames'
      - $ref: '#/components/schemas/SearchRequestParametersPrograms'
      - $ref: '#/components/schemas/SearchRequestParametersExternalReferences'
      - type: object
        properties:
          abbreviations:
            type: array
            description: An abbreviation of a program to search for
            example:
            - P1
            - P2
            items:
              type: string
          leadPersonDbIds:
            type: array
            description: The person DbIds of the program leader to search for
            example:
            - d8bd96c7
            - a2b9c8e7
            items:
              type: string
          leadPersonNames:
            type: array
            description: The names of the program leader to search for
            example:
            - Bob Robertson
            - Rob Robertson
            items:
              type: string
          objectives:
            type: array
            description: A program objective to search for
            example:
            - Objective Code One
            - This is a longer objective search query
            items:
              type: string
    ScaleBaseClass:
      required:
      - scaleName
      type: object
      properties:
        additionalInfo:
          type: object
          additionalProperties:
            type: string
          description: Additional arbitrary info
        dataType:
          $ref: '#/components/schemas/TraitDataType'
        decimalPlaces:
          type: integer
          description: For numerical, number of decimal places to be reported
          example: 2
        externalReferences:
          $ref: '#/components/schemas/ExternalReferences'
        ontologyReference:
          $ref: '#/components/schemas/OntologyReference'
        scaleName:
          type: string
          description: |-
            Name of the scale

            MIAPPE V1.1 (DM-92) Scale Name of the scale associated with the variable
          example: Meters
        validValues:
          $ref: '#/components/schemas/ScaleBaseClass_validValues'
      description: Scale metadata
    SearchRequestParametersCommonCropNames:
      type: object
      properties:
        commonCropNames:
          type: array
          description: Common name for the crop which this program is for
          example:
          - Tomatillo
          - Paw Paw
          items:
            type: string
    SearchRequestParametersExternalReferences:
      type: object
      properties:
        externalReferenceIDs:
          type: array
          description: List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)
          example:
          - http://purl.obolibrary.org/obo/ro.owl
          - 14a19841
          items:
            type: string
        externalReferenceSources:
          type: array
          description: List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)
          example:
          - OBO Library
          - Field App Name
          items:
            type: string
    SearchRequestParametersGermplasm:
      type: object
      properties:
        germplasmDbIds:
          type: array
          description: List of IDs which uniquely identify germplasm to search for
          example:
          - e9c6edd7
          - 1b1df4a6
          items:
            type: string
        germplasmNames:
          type: array
          description: List of human readable names to identify germplasm to search for
          example:
          - A0000003
          - A0000477
          items:
            type: string
    SearchRequestParametersLocations:
      type: object
      properties:
        locationDbIds:
          type: array
          description: The location ids to search for
          example:
          - b28911cf
          - 5071d1e4
          items:
            type: string
        locationNames:
          type: array
          description: A human readable names to search for
          example:
          - Location Alpha
          - The Large Hadron Collider
          items:
            type: string
    SearchRequestParametersObservationVariables:
      type: object
      properties:
        observationVariableDbIds:
          type: array
          description: The DbIds of Variables to search for
          example:
          - a646187d
          - 6d23513b
          items:
            type: string
        observationVariableNames:
          type: array
          description: The names of Variables to search for
          example:
          - Plant Height in meters
          - Wheat rust score 1-5
          items:
            type: string
    SearchRequestParametersPaging:
      type: object
      properties:
        page:
          type: integer
          description: Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
          example: 0
        pageSize:
          type: integer
          description: The size of the pages to be returned. Default is `1000`.
          example: 1000
    SearchRequestParametersPrograms:
      type: object
      properties:
        programDbIds:
          type: array
          description: A program identifier to search for
          example:
          - 8f5de35b
          - 0e2d4a13
          items:
            type: string
        programNames:
          type: array
          description: A name of a program to search for
          example:
          - Better Breeding Program
          - Best Breeding Program
          items:
            type: string
    SearchRequestParametersStudies:
      type: object
      properties:
        studyDbIds:
          type: array
          description: List of study identifiers to search for
          example:
          - cf6c4bd4
          - 691e69d6
          items:
            type: string
        studyNames:
          type: array
          description: List of study names to filter search results
          example:
          - The First Bob Study 2017
          - Wheat Yield Trial 246
          items:
            type: string
    SearchRequestParametersTokenPaging:
      type: object
      properties:
        pageSize:
          type: integer
          description: The size of the pages to be returned. Default is `1000`.
          example: 1000
        pageToken:
          type: string
          description: "Used to request a specific page of data to be returned.\n\nTokenized pages are for large data sets which can not be efficiently broken into indexed pages. Use the nextPageToken and prevPageToken from a prior response to construct a query and move to the next or previous page respectively. "
          example: 33c27874
    SearchRequestParametersTrials:
      type: object
      properties:
        trialDbIds:
          type: array
          description: The ID which uniquely identifies a trial to search for
          example:
          - d2593dc2
          - 9431a731
          items:
            type: string
        trialNames:
          type: array
          description: The human readable name of a trial to search for
          example:
          - All Yield Trials 2016
          - Disease Resistance Study Comparison Group
          items:
            type: string
    Season:
      required:
      - seasonDbId
      type: object
      properties:
        seasonDbId:
          type: string
          description: The ID which uniquely identifies a season. For backward compatibility it can be a string like '2012', '1957-2004'
          example: Spring_2018
        seasonName:
          type: string
          description: Name of the season. ex. 'Spring', 'Q2', 'Season A', etc.
          example: Spring
        year:
          type: integer
          description: The 4 digit year of the season.
          example: 2018
    ServerInfo:
      required:
      - calls
      type: object
      properties:
        calls:
          type: array
          description: Array of available calls on this server
          items:
            $ref: '#/components/schemas/Service'
        contactEmail:
          type: string
          description: A contact email address for this server management
          example: contact@institute.org
        documentationURL:
          type: string
          description: A URL to the human readable documentation of this object
          example: institute.org/server
        location:
          type: string
          description: Physical location of this server (ie. City, Country)
          example: USA
        organizationName:
          type: string
          description: The name of the organization that manages this server and data
          example: The Institute
        organizationURL:
          type: string
          description: The URL of the organization that manages this server and data
          example: institute.org/home
        serverDescription:
          type: string
          description: A description of this server
          example: |-
            The BrAPI Test Server
            Web Server - Apache Tomcat 7.0.32
            Database - Postgres 10
            Supported BrAPI Version - V2.0
        serverName:
          type: string
          description: The name of this server
          example: The BrAPI Test Server
    Service:
      required:
      - methods
      - service
      - versions
      type: object
      properties:
        dataTypes:
          type: array
          description: The possible data formats returned by the available call
          example:
          - application/json
          items:
            $ref: '#/components/schemas/WSMIMEDataTypes'
        methods:
          type: array
          description: The possible HTTP Methods to be used with the available call
          example:
          - GET
          - POST
          items:
            type: string
            enum:
            - GET
            - POST
            - PUT
            - DELETE
        service:
          type: string
          description: The name of the available call as recorded in the documentation
          example: germplasm/{germplasmDbId}/pedigree
        versions:
          type: array
          description: The supported versions of a particular call
          example:
          - "2.0"
          - "2.1"
          items:
            type: string
            enum:
            - "2.0"
            - "2.1"
            - "2.2"
    Study:
      allOf:
      - $ref: '#/components/schemas/StudyNewRequest'
      - required:
        - studyDbId
        type: object
        properties:
          studyDbId:
            type: string
            description: |-
              The ID which uniquely identifies a study within the given database server

              MIAPPE V1.1 (DM-11) Study unique ID - Unique identifier comprising the name or identifier for the institution/database hosting the submission of the study data, and the identifier of the study in that institution.
            example: 175ac75a
    StudyNewRequest:
      type: object
      properties:
        active:
          type: boolean
          description: Is this study currently active
          example: true
        additionalInfo:
          type: object
          additionalProperties:
            type: string
          description: Additional arbitrary info
        commonCropName:
          type: string
          description: Common name for the crop associated with this study
          example: Grape
        contacts:
          type: array
          description: List of contact entities associated with this study
          items:
            $ref: '#/components/schemas/Contact'
        culturalPractices:
          type: string
          description: MIAPPE V1.1 (DM-28) Cultural practices - General description of the cultural practices of the study.
          example: Irrigation was applied according needs during summer to prevent water stress.
        dataLinks:
          type: array
          description: List of links to extra data files associated with this study. Extra data could include notes, images, and reference data.
          items:
            $ref: '#/components/schemas/DataLink'
        documentationURL:
          type: string
          description: A URL to the human readable documentation of this object
          format: uri
          example: https://wiki.brapi.org
        endDate:
          type: string
          description: |-
            The date the study ends

            MIAPPE V1.1 (DM-15) End date of study - Date and, if relevant, time when the experiment ended
          format: date-time
        environmentParameters:
          type: array
          description: |-
            Environmental parameters that were kept constant throughout the study and did not change between observation units.

            MIAPPE V1.1 (DM-57) Environment - Environmental parameters that were kept constant throughout the study and did not change between observation units or assays. Environment characteristics that vary over time, i.e. environmental variables, should be recorded as Observed Variables (see below).
          items:
            $ref: '#/components/schemas/EnvironmentParameter'
        experimentalDesign:
          $ref: '#/components/schemas/StudyNewRequest_experimentalDesign'
        externalReferences:
          $ref: '#/components/schemas/ExternalReferences'
        growthFacility:
          $ref: '#/components/schemas/StudyNewRequest_growthFacility'
        lastUpdate:
          $ref: '#/components/schemas/StudyNewRequest_lastUpdate'
        license:
          type: string
          description: The usage license associated with the study data
          example: MIT License
        locationDbId:
          type: string
          description: The unique identifier for a Location
          example: 3cfdd67d
        locationName:
          type: string
          description: |-
            A human readable name for this location

            MIAPPE V1.1 (DM-18) Experimental site name - The name of the natural site, experimental field, greenhouse, phenotyping facility, etc. where the experiment took place.
          example: Location 1
        observationLevels:
          type: array
          description: 'Observation levels indicate the granularity level at which the measurements are taken. `levelName` defines the level, `levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`s lower numbers are at the top of the hierarchy (ie field > 0) and higher numbers are at the bottom of the hierarchy (ie plant > 6). '
          example:
          - levelName: field
            levelOrder: 0
          - levelName: block
            levelOrder: 1
          - levelName: plot
            levelOrder: 2
          items:
            $ref: '#/components/schemas/ObservationUnitHierarchyLevel'
        observationUnitsDescription:
          type: string
          description: MIAPPE V1.1 (DM-25) Observation unit description - General description of the observation units in the study.
          example: Observation units consisted in individual plots themselves consisting of a row of 15 plants at a density of approximately six plants per square meter.
        seasons:
          type: array
          description: List of seasons over which this study was performed.
          example:
          - Spring_2018
          items:
            type: string
        startDate:
          type: string
          description: |-
            The date this study started

            MIAPPE V1.1 (DM-14) Start date of study - Date and, if relevant, time when the experiment started
          format: date-time
        studyCode:
          type: string
          description: A short human readable code for a study
          example: Grape_Yield_Spring_2018
        studyDescription:
          type: string
          description: |-
            The description of this study

            MIAPPE V1.1 (DM-13) Study description - Human-readable text describing the study
          example: This is a yield study for Spring 2018
        studyName:
          type: string
          description: |-
            The human readable name for a study

            MIAPPE V1.1 (DM-12) Study title - Human-readable text summarising the study
          example: INRA's Walnut Genetic Resources Observation at Kenya
        studyPUI:
          type: string
          description: A permanent unique identifier associated with this study data. For example, a URI or DOI
          example: doi:10.155454/12349537312
        studyType:
          type: string
          description: The type of study being performed. ex. "Yield Trial", etc
          example: Phenotyping
        trialDbId:
          type: string
          description: The ID which uniquely identifies a trial
          example: 48b327ea
        trialName:
          type: string
          description: The human readable name of a trial
          example: Grape_Yield_Trial
    StudySearchRequest:
      allOf:
      - $ref: '#/components/schemas/SearchRequestParametersPaging'
      - $ref: '#/components/schemas/SearchRequestParametersCommonCropNames'
      - $ref: '#/components/schemas/SearchRequestParametersPrograms'
      - $ref: '#/components/schemas/SearchRequestParametersTrials'
      - $ref: '#/components/schemas/SearchRequestParametersStudies'
      - $ref: '#/components/schemas/SearchRequestParametersLocations'
      - $ref: '#/components/schemas/SearchRequestParametersGermplasm'
      - $ref: '#/components/schemas/SearchRequestParametersObservationVariables'
      - $ref: '#/components/schemas/SearchRequestParametersExternalReferences'
      - type: object
        properties:
          active:
            type: boolean
            description: Is this study currently active
            example: true
          observationVariableDbIds:
            type: array
            description: List of observation variable IDs to search for
            example:
            - 819e508f
            - f540b703
            items:
              type: string
          seasonDbIds:
            type: array
            description: The ID which uniquely identifies a season
            example:
            - Harvest Two 2017
            - Summer 2018
            items:
              type: string
          sortBy:
            type: string
            description: Name of one of the fields within the study object on which results can be sorted
            enum:
            - studyDbId
            - trialDbId
            - programDbId
            - locationDbId
            - seasonDbId
            - studyType
            - studyName
            - studyLocation
            - programName
            - germplasmDbId
            - observationVariableDbId
          sortOrder:
            type: string
            description: Order results should be sorted. ex. "ASC" or "DESC"
            enum:
            - ASC
            - DESC
          studyCodes:
            type: array
            description: A short human readable code for a study
            example:
            - Grape_Yield_Spring_2018
            - Walnut_Kenya
            items:
              type: string
          studyPUIs:
            type: array
            description: Permanent unique identifier associated with study data. For example, a URI or DOI
            example:
            - doi:10.155454/12349537312
            - https://pui.per/d8dd35e1
            items:
              type: string
          studyTypes:
            type: array
            description: The type of study being performed. ex. "Yield Trial", etc
            example:
            - Yield Trial
            - Disease Resistance Trial
            items:
              type: string
    TraitBaseClass:
      type: object
      properties:
        additionalInfo:
          type: object
          additionalProperties:
            type: string
          description: Additional arbitrary info
        alternativeAbbreviations:
          type: array
          description: Other frequent abbreviations of the trait, if any. These abbreviations do not have to follow a convention
          example:
          - H
          - PH
          - H1
          items:
            type: string
        attribute:
          type: string
          description: A trait can be decomposed as "Trait" = "Entity" + "Attribute", the attribute is the observed feature (or characteristic) of the entity e.g., for "grain colour", attribute = "colour"
          example: height
        entity:
          type: string
          description: A trait can be decomposed as "Trait" = "Entity" + "Attribute", the entity is the part of the plant that the trait refers to e.g., for "grain colour", entity = "grain"
          example: Stalk
        externalReferences:
          $ref: '#/components/schemas/ExternalReferences'
        mainAbbreviation:
          type: string
          description: 'Main abbreviation for trait name. (examples: "Carotenoid content" => "CC")'
          example: PH
        ontologyReference:
          $ref: '#/components/schemas/OntologyReference'
        status:
          type: string
          description: 'Trait status (examples: "recommended", "obsolete", "legacy", etc.)'
          example: recommended
        synonyms:
          type: array
          description: Other trait names
          example:
          - Height
          - Plant Height
          - Stalk Height
          - Canopy Height
          items:
            type: string
        traitClass:
          type: string
          description: 'Trait class. (examples: "morphological", "phenological", "agronomical", "physiological", "abiotic stress", "biotic stress", "biochemical", "quality traits", "fertility", etc.)'
          example: phenological
        traitDescription:
          type: string
          description: The description of a trait
          example: The height of the plant
        traitName:
          type: string
          description: |-
            The human readable name of a trait

            MIAPPE V1.1 (DM-86) Trait - Name of the (plant or environmental) trait under observation
          example: Height
    TraitDataType:
      type: string
      description: |-
        <p>Class of the scale, entries can be</p>
        <p>"Code" -  This scale class is exceptionally used to express complex traits. Code is a nominal scale that combines the expressions of the different traits composing the complex trait. For example a severity trait might be expressed by a 2 digit and 2 character code. The first 2 digits are the percentage of the plant covered by a fungus and the 2 characters refer to the delay in development, e.g. "75VD" means "75 %" of the plant is infected and the plant is very delayed.</p>
        <p>"Date" - The date class is for events expressed in a time format, See ISO 8601</p>
        <p>"Duration" - The Duration class is for time elapsed between two events expressed in a time format, e.g. days, hours, months</p>
        <p>"Nominal" - Categorical scale that can take one of a limited and fixed number of categories. There is no intrinsic ordering to the categories</p>
        <p>"Numerical" - Numerical scales express the trait with real numbers. The numerical scale defines the unit e.g. centimeter, ton per hectare, branches</p>
        <p>"Ordinal" - Ordinal scales are scales composed of ordered categories</p>
        <p>"Text" - A free text is used to express the trait.</p>
      example: Numerical
      enum:
      - Code
      - Date
      - Duration
      - Nominal
      - Numerical
      - Ordinal
      - Text
    Trial:
      allOf:
      - $ref: '#/components/schemas/TrialNewRequest'
      - required:
        - trialDbId
        type: object
        properties:
          trialDbId:
            type: string
            description: |-
              The ID which uniquely identifies a trial

              MIAPPE V1.1 (DM-2) Investigation unique ID - Identifier comprising the unique name of the institution/database hosting the submission of the investigation data, and the accession number of the investigation in that institution.
            example: 1883b402
    TrialNewRequest:
      type: object
      properties:
        active:
          type: boolean
          description: Is this trail currently active
          example: true
        additionalInfo:
          type: object
          additionalProperties:
            type: string
          description: Additional arbitrary info
        commonCropName:
          type: string
          description: Common name for the crop associated with this trial
          example: Wheat
        contacts:
          type: array
          description: List of contact entities associated with this trial
          items:
            $ref: '#/components/schemas/Contact'
        datasetAuthorships:
          type: array
          description: License and citation information for the data in this trial
          items:
            $ref: '#/components/schemas/TrialNewRequest_datasetAuthorships'
        documentationURL:
          type: string
          description: A URL to the human readable documentation of this object
          format: uri
          example: https://wiki.brapi.org
        endDate:
          type: string
          description: The date this trial ends
          format: date
        externalReferences:
          $ref: '#/components/schemas/ExternalReferences'
        programDbId:
          type: string
          description: A program identifier to search for
          example: 673f378a
        programName:
          type: string
          description: Human readable name of the program
          example: Tomatillo_Breeding_Program
        publications:
          type: array
          description: MIAPPE V1.1 (DM-9) Associated publication - An identifier for a literature publication where the investigation is described. Use of DOIs is recommended.
          items:
            $ref: '#/components/schemas/TrialNewRequest_publications'
        startDate:
          type: string
          description: The date this trial started
          format: date
        trialDescription:
          type: string
          description: |-
            The human readable description of a trial

            MIAPPE V1.1 (DM-4) Investigation description - Human-readable text describing the investigation in more detail.
          example: General drought resistance trial initiated in Peru before duplication in Africa
        trialName:
          type: string
          description: |-
            The human readable name of a trial

            MIAPPE V1.1 (DM-3) Investigation title - Human-readable string summarising the investigation.
          example: Peru Yield Trial 1
        trialPUI:
          type: string
          description: A permanent identifier for a trial. Could be DOI or other URI formatted identifier.
          example: https://doi.org/101093190
    TrialSearchRequest:
      allOf:
      - $ref: '#/components/schemas/SearchRequestParametersPaging'
      - $ref: '#/components/schemas/SearchRequestParametersCommonCropNames'
      - $ref: '#/components/schemas/SearchRequestParametersPrograms'
      - $ref: '#/components/schemas/SearchRequestParametersTrials'
      - $ref: '#/components/schemas/SearchRequestParametersStudies'
      - $ref: '#/components/schemas/SearchRequestParametersLocations'
      - $ref: '#/components/schemas/SearchRequestParametersExternalReferences'
      - type: object
        properties:
          active:
            type: boolean
            description: Is this trail currently active
            example: true
          contactDbIds:
            type: array
            description: List of contact entities associated with this trial
            example:
            - e0f70c2a
            - b82f0967
            items:
              type: string
          searchDateRangeEnd:
            type: string
            description: "The end of the overlapping search date range. `searchDateRangeStart` must be before `searchDateRangeEnd`.\n\nReturn a Trial entity if any of the following cases are true\n\n- `searchDateRangeStart` is before `trial.endDate` AND `searchDateRangeEnd` is null \n\n- `searchDateRangeStart` is before `trial.endDate` AND `searchDateRangeEnd` is after `trial.startDate`\n\n- `searchDateRangeEnd` is after `trial.startDate` AND `searchDateRangeStart` is null\n\n- `searchDateRangeEnd` is after `trial.startDate` AND `searchDateRangeStart` is before `trial.endDate`"
            format: date
          searchDateRangeStart:
            type: string
            description: "The start of the overlapping search date range. `searchDateRangeStart` must be before `searchDateRangeEnd`.\n\nReturn a Trial entity if any of the following cases are true\n\n- `searchDateRangeStart` is before `trial.endDate` AND `searchDateRangeEnd` is null \n\n- `searchDateRangeStart` is before `trial.endDate` AND `searchDateRangeEnd` is after `trial.startDate`\n\n- `searchDateRangeEnd` is after `trial.startDate` AND `searchDateRangeStart` is null\n\n- `searchDateRangeEnd` is after `trial.startDate` AND `searchDateRangeStart` is before `trial.endDate`"
            format: date
          trialPUIs:
            type: array
            description: A permanent identifier for a trial. Could be DOI or other URI formatted identifier.
            example:
            - https://doi.org/01093190
            - https://doi.org/11192409
            items:
              type: string
    VariableBaseClass:
      required:
      - method
      - scale
      - trait
      type: object
      properties:
        additionalInfo:
          type: object
          additionalProperties:
            type: string
          description: Additional arbitrary info
        commonCropName:
          type: string
          description: 'Crop name (examples: "Maize", "Wheat")'
          example: Maize
        contextOfUse:
          type: array
          description: 'Indication of how trait is routinely used. (examples: ["Trial evaluation", "Nursery evaluation"])'
          example:
          - Trial evaluation
          - Nursery evaluation
          items:
            type: string
        defaultValue:
          type: string
          description: 'Variable default value. (examples: "red", "2.3", etc.)'
          example: "2.0"
        documentationURL:
          type: string
          description: A URL to the human readable documentation of this object
          format: uri
          example: https://wiki.brapi.org/documentation.html
        externalReferences:
          $ref: '#/components/schemas/ExternalReferences'
        growthStage:
          type: string
          description: 'Growth stage at which measurement is made (examples: "flowering")'
          example: flowering
        institution:
          type: string
          description: Name of institution submitting the variable
          example: The BrAPI Institute
        language:
          type: string
          description: 2 letter ISO 639-1 code for the language of submission of the variable.
          example: en
        method:
          allOf:
          - $ref: '#/components/schemas/MethodBaseClass'
          - type: object
            properties:
              methodDbId:
                type: string
                description: Method unique identifier
                example: 0adb2764
        ontologyReference:
          $ref: '#/components/schemas/OntologyReference'
        scale:
          allOf:
          - $ref: '#/components/schemas/ScaleBaseClass'
          - required:
            - scaleDbId
            type: object
            properties:
              scaleDbId:
                type: string
                description: Unique identifier of the scale. If left blank, the upload system will automatically generate a scale ID.
                example: af730171
            description: Scale metadata
        scientist:
          type: string
          description: Name of scientist submitting the variable.
          example: Dr. Bob Robertson
        status:
          type: string
          description: 'Variable status. (examples: "recommended", "obsolete", "legacy", etc.)'
          example: recommended
        submissionTimestamp:
          type: string
          description: Timestamp when the Variable was added (ISO 8601)
          format: date-time
        synonyms:
          type: array
          description: Other variable names
          example:
          - Maize Height
          - Stalk Height
          - Corn Height
          items:
            type: string
        trait:
          allOf:
          - $ref: '#/components/schemas/TraitBaseClass'
          - type: object
            properties:
              traitDbId:
                type: string
                description: The ID which uniquely identifies a trait
                example: 9b2e34f5
    WSMIMEDataTypes:
      type: string
      enum:
      - application/json
      - text/csv
      - text/tsv
      - application/flapjack
    basePagination:
      required:
      - pageSize
      type: object
      properties:
        pageSize:
          type: integer
          description: The number of data elements returned, aka the size of the current page. If the requested page does not have enough elements to fill a page at the requested page size, this field should indicate the actual number of elements returned.
          example: 1000
          default: 1000
        totalCount:
          type: integer
          description: The total number of elements that are available on the server and match the requested query parameters.
          example: 10
        totalPages:
          type: integer
          description: "The total number of pages of elements available on the server. This should be calculated with the following formula. \n\ntotalPages = CEILING( totalCount / requested_page_size)"
          example: 1
    dataFile:
      required:
      - fileURL
      type: object
      properties:
        fileDescription:
          type: string
          description: A human readable description of the file contents
          example: This is an Excel data file
        fileMD5Hash:
          type: string
          description: The MD5 Hash of the file contents to be used as a check sum
          example: c2365e900c81a89cf74d83dab60df146
        fileName:
          type: string
          description: The name of the file
          example: datafile.xlsx
        fileSize:
          type: integer
          description: The size of the file in bytes
          example: 4398
        fileType:
          type: string
          description: The type or format of the file. Preferably MIME Type.
          example: application/vnd.ms-excel
        fileURL:
          type: string
          description: The absolute URL where the file is located
          format: uri
          example: https://wiki.brapi.org/examples/datafile.xlsx
      description: A dataFile contains a URL and the relevant file metadata to represent a file
    geoJSON:
      title: GeoJSON
      type: object
      properties:
        geometry:
          title: GeoJSON Geometry
          type: object
          description: A geometry as defined by GeoJSON (RFC 7946). In this context, only Point or Polygon geometry are allowed.
          example:
            coordinates:
            - -76.506042
            - 42.417373
            - 123
            type: Point
          discriminator:
            propertyName: type
            mapping:
              Point: '#/components/schemas/pointGeometry'
              Polygon: '#/components/schemas/polygonGeometry'
          oneOf:
          - $ref: '#/components/schemas/pointGeometry'
          - $ref: '#/components/schemas/polygonGeometry'
        type:
          type: string
          description: The literal string "Feature"
          example: Feature
          default: Feature
      description: |-
        One geometry as defined by GeoJSON (RFC 7946). All coordinates are decimal values on the WGS84 geographic coordinate reference system.

        Copied from RFC 7946 Section 3.1.1

        A position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or
        easting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.
    geoJSONSearchArea:
      allOf:
      - $ref: '#/components/schemas/geoJSON'
      - title: GeoJSONSearchArea
        type: object
        properties: {}
        description: "A GeoJSON Polygon which describes an area to search for other GeoJSON objects. All contained Points and intersecting Polygons should be returned as search results. \n\nAll coordinates are decimal values on the WGS84 geographic coordinate reference system."
        example:
          geometry:
            coordinates:
            - - - -77.456654
                - 42.241133
              - - -75.414133
                - 41.508282
              - - -76.506042
                - 42.417373
              - - -77.456654
                - 42.241133
            type: Polygon
          type: Feature
    indexPagination:
      allOf:
      - $ref: '#/components/schemas/basePagination'
      - required:
        - currentPage
        type: object
        properties:
          currentPage:
            type: integer
            description: The index number for the returned page of data. This should always match the requested page number or the default page (0).
            example: 0
            default: 0
        description: "The pagination object is applicable only when the payload contains a \"data\" key. It describes the pagination of the data contained in the \"data\" array, as a way to identify which subset of data is being returned. \n\nPages are zero indexed, so the first page will be page 0 (zero)."
    linearRing:
      minItems: 4
      type: array
      description: An array of at least four positions where the first equals the last
      example:
      - - -77.456654
        - 42.241133
        - 494
      - - -75.414133
        - 41.508282
        - 571
      - - -76.506042
        - 42.417373
        - 123
      - - -77.456654
        - 42.241133
        - 346
      items:
        $ref: '#/components/schemas/position'
    metadata:
      allOf:
      - $ref: '#/components/schemas/metadataBase'
      - type: object
        properties:
          pagination:
            $ref: '#/components/schemas/indexPagination'
    metadataBase:
      type: object
      properties:
        datafiles:
          type: array
          description: "The datafiles contains a list of file URLs and metadata. \nThese files contain additional information related to the returned object and can be retrieved by a subsequent call. \nThis could be a supplementary data file, an informational file, the uploaded file where the data originated from, a generated file representing the whole dataset in a particular format, or any other related file. "
          items:
            $ref: '#/components/schemas/dataFile'
        status:
          type: array
          description: "The status field contains a list of informational status messages from the server. \nIf no status is reported, an empty list should be returned. See Error Reporting for more information."
          items:
            $ref: '#/components/schemas/status'
    metadataTokenPagination:
      allOf:
      - $ref: '#/components/schemas/metadataBase'
      - type: object
        properties:
          pagination:
            $ref: '#/components/schemas/tokenPagination'
    pointGeometry:
      type: object
      properties:
        coordinates:
          $ref: '#/components/schemas/position'
        type:
          type: string
          description: The literal string "Point"
          example: Point
          default: Point
      description: |-
        Copied from RFC 7946 Section 3.1.1

        A position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or
        easting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.
    polygon:
      type: array
      description: An array of linear rings
      example:
      - - - -77.456654
          - 42.241133
          - 494
        - - -75.414133
          - 41.508282
          - 571
        - - -76.506042
          - 42.417373
          - 123
        - - -77.456654
          - 42.241133
          - 346
      items:
        $ref: '#/components/schemas/linearRing'
    polygonGeometry:
      type: object
      properties:
        coordinates:
          $ref: '#/components/schemas/polygon'
        type:
          type: string
          description: The literal string "Polygon"
          example: Polygon
          default: Polygon
      description: "An array of Linear Rings. Each Linear Ring is an array of Points. \n\nA Point is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element."
    position:
      minItems: 2
      type: array
      description: A single position
      example:
      - -76.506042
      - 42.417373
      - 123
      items:
        type: number
    status:
      required:
      - message
      - messageType
      type: object
      properties:
        message:
          type: string
          description: A short message concerning the status of this request/response
          example: Request accepted, response successful
        messageType:
          type: string
          description: The logging level for the attached message
          example: INFO
          enum:
          - DEBUG
          - ERROR
          - WARNING
          - INFO
      description: An array of status messages to convey technical logging information from the server to the client.
    tokenPagination:
      allOf:
      - $ref: '#/components/schemas/basePagination'
      - required:
        - nextPageToken
        type: object
        properties:
          currentPageToken:
            type: string
            description: The string token used to query the current page of data.
            example: 48bc6ac1
          nextPageToken:
            type: string
            description: The string token used to query the next page of data.
            example: cb668f63
          prevPageToken:
            type: string
            description: The string token used to query the previous page of data.
            example: 9659857e
        description: "The pagination object is applicable only when the payload contains a \"data\" key. It describes the pagination of the data contained in the \"data\" array, as a way to identify which subset of data is being returned. \n\nTokenized pages are for large data sets which can not be efficiently broken into indexed pages. Use the nextPageToken and prevPageToken to construct an additional query and move to the next or previous page respectively.  "
    commonCropNamesResponse:
      title: commonCropNamesResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/commonCropNamesResponse_result'
    ListsListResponse:
      title: ListsListResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/ListsListResponse_result'
    ListsSingleResponse:
      title: ListsSingleResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/ListDetails'
    listResponse:
      title: listResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/ListDetails'
    LocationListResponse:
      title: LocationListResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/LocationListResponse_result'
    LocationSingleResponse:
      title: LocationSingleResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/Location'
    PersonListResponse:
      title: PersonListResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/PersonListResponse_result'
    PersonSingleResponse:
      title: PersonSingleResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/Person'
    ProgramListResponse:
      title: ProgramListResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/ProgramListResponse_result'
    ProgramSingleResponse:
      title: ProgramSingleResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/Program'
    "202AcceptedSearchResponse":
      title: 202AcceptedSearchResponse
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/202AcceptedSearchResponse_result'
    StudyListResponse:
      title: StudyListResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/StudyListResponse_result'
    TrialListResponse:
      title: TrialListResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/TrialListResponse_result'
    SeasonListResponse:
      title: SeasonListResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/SeasonListResponse_result'
    SeasonSingleResponse:
      title: SeasonSingleResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/Season'
    ServerInfoResponse:
      title: ServerInfoResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/ServerInfo'
    StudySingleResponse:
      title: StudySingleResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/Study'
    studyTypesResponse:
      title: studyTypesResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/studyTypesResponse_result'
    TrialSingleResponse:
      title: TrialSingleResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/Trial'
    ExternalReferences_inner:
      type: object
      properties:
        referenceID:
          type: string
          description: The external reference ID. Could be a simple string or a URI.
        referenceSource:
          type: string
          description: An identifier for the source system or database of this reference
    OntologyReference_documentationLinks:
      type: object
      properties:
        URL:
          type: string
          format: uri
          example: http://purl.obolibrary.org/obo/ro.owl
        type:
          type: string
          example: OBO
          enum:
          - OBO
          - RDF
          - WEBPAGE
    ScaleBaseClass_validValues_categories:
      type: object
      properties:
        label:
          type: string
          description: A text label for a category
        value:
          type: string
          description: The actual value for a category
    ScaleBaseClass_validValues:
      type: object
      properties:
        categories:
          type: array
          description: List of possible values with optional labels
          example:
          - label: low
            value: "0"
          - label: medium
            value: "5"
          - label: high
            value: "10"
          items:
            $ref: '#/components/schemas/ScaleBaseClass_validValues_categories'
        max:
          type: integer
          description: Maximum value (used for field data capture control).
          example: 9999
        min:
          type: integer
          description: Minimum value (used for data capture control) for numerical and date scales
          example: 2
    StudyNewRequest_experimentalDesign:
      type: object
      properties:
        PUI:
          type: string
          description: MIAPPE V1.1 (DM-23) Type of experimental design - Type of experimental  design of the study, in the form of an accession number from the Crop Ontology.
          example: CO_715:0000145
        description:
          type: string
          description: MIAPPE V1.1 (DM-22) Description of the experimental design - Short description of the experimental design, possibly including statistical design. In specific cases, e.g. legacy datasets or data computed from several studies, the experimental design can be "unknown"/"NA", "aggregated/reduced data", or simply 'none'.
          example: Lines were repeated twice at each location using a complete block design. In order to limit competition effects, each block was organized into four sub-blocks corresponding to earliest groups based on a prior information.
      description: The experimental and statistical design full description plus a category PUI taken from crop research ontology or agronomy ontology
    StudyNewRequest_growthFacility:
      type: object
      properties:
        PUI:
          type: string
          description: MIAPPE V1.1 (DM-27) Type of growth facility - Type of growth facility in which the study was carried out, in the form of an accession number from the Crop Ontology.
          example: CO_715:0000162
        description:
          type: string
          description: MIAPPE V1.1 (DM-26) Description of growth facility - Short description of the facility in which the study was carried out.
          example: field environment condition, greenhouse
      description: Short description of the facility in which the study was carried out.
    StudyNewRequest_lastUpdate:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        version:
          type: string
          example: 1.2.3
      description: The date and time when this study was last modified
    TrialNewRequest_datasetAuthorships:
      type: object
      properties:
        datasetPUI:
          type: string
          example: doi:10.15454/312953986E3
        license:
          type: string
          description: MIAPPE V1.1 (DM-7) License - License for the reuse of the data associated with this investigation. The Creative Commons licenses cover most use cases and are recommended.
          example: https://CreativeCommons.org/licenses/by/4.0
        publicReleaseDate:
          type: string
          description: MIAPPE V1.1 (DM-6) Public release date - Date of first public release of the dataset presently being described.
          format: date
        submissionDate:
          type: string
          description: MIAPPE V1.1 (DM-5) Submission date - Date of submission of the dataset presently being described to a host repository.
          format: date
    TrialNewRequest_publications:
      type: object
      properties:
        publicationPUI:
          type: string
          example: doi:10.15454/312953986E3
        publicationReference:
          type: string
          example: Selby, BrAPI - An application programming interface for plant breeding applications, Bioinformatics, https://doi.org/10.1093/bioinformatics/190
    commonCropNamesResponse_result:
      required:
      - data
      type: object
      properties:
        data:
          type: array
          description: array of crop names available on the server
          example:
          - Tomatillo
          - Paw Paw
          items:
            type: string
            description: supported crop name
    ListsListResponse_result:
      required:
      - data
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ListSummary'
    LocationListResponse_result:
      required:
      - data
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Location'
    PersonListResponse_result:
      required:
      - data
      type: object
      properties:
        data:
          type: array
          description: Array of people
          items:
            $ref: '#/components/schemas/Person'
    ProgramListResponse_result:
      required:
      - data
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Program'
    "202AcceptedSearchResponse_result":
      type: object
      properties:
        searchResultsDbId:
          type: string
          example: 551ae08c
    StudyListResponse_result:
      required:
      - data
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Study'
    TrialListResponse_result:
      required:
      - data
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Trial'
    SeasonListResponse_result:
      required:
      - data
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Season'
    studyTypesResponse_result:
      required:
      - data
      type: object
      properties:
        data:
          type: array
          description: the list of all study types available in this server.
          example:
          - Crossing Nursery
          - Yield study
          items:
            type: string
  responses:
    "202AcceptedSearchResponse":
      description: Accepted
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/202AcceptedSearchResponse'
    "400BadRequest":
      description: Bad Request
      content:
        application/json:
          schema:
            type: string
          example: |-
            ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

            ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

            ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
    "401Unauthorized":
      description: Unauthorized
      content:
        application/json:
          schema:
            type: string
          example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
    "403Forbidden":
      description: Forbidden
      content:
        application/json:
          schema:
            type: string
          example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
    "404NotFound":
      description: Not Found
      content:
        application/json:
          schema:
            type: string
          example: ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found
    ListsListResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ListsListResponse'
    ListsSingleResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ListsSingleResponse'
    LocationListResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LocationListResponse'
    LocationSingleResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LocationSingleResponse'
    PersonListResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PersonListResponse'
    PersonSingleResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PersonSingleResponse'
    ProgramListResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProgramListResponse'
    ProgramSingleResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProgramSingleResponse'
    SeasonListResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SeasonListResponse'
    SeasonSingleResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SeasonSingleResponse'
    StudyListResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/StudyListResponse'
    StudySingleResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/StudySingleResponse'
    TrialListResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TrialListResponse'
    TrialSingleResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TrialSingleResponse'
  parameters:
    acceptHeader:
      name: Accept
      in: header
      description: The requested content type which should be returned by the server
      required: true
      style: simple
      explode: false
      schema:
        $ref: '#/components/schemas/WSMIMEDataTypes'
      example: application/json
    authorizationHeader:
      name: Authorization
      in: header
      description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
      required: false
      style: simple
      explode: false
      schema:
        pattern: ^Bearer .*$
        type: string
      example: Bearer XXXX
    externalReferenceID:
      name: externalReferenceID
      in: query
      description: An external reference ID. Could be a simple string or a URI. (use with `externalReferenceSource` parameter)
      required: false
      style: form
      explode: true
      schema:
        type: string
    externalReferenceSource:
      name: externalReferenceSource
      in: query
      description: An identifier for the source system or database of an external reference (use with `externalReferenceID` parameter)
      required: false
      style: form
      explode: true
      schema:
        type: string
    page:
      name: page
      in: query
      description: |-
        Used to request a specific page of data to be returned.

        The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
      required: false
      style: form
      explode: true
      schema:
        type: integer
      example: "0"
    pageSize:
      name: pageSize
      in: query
      description: The size of the pages to be returned. Default is `1000`.
      required: false
      style: form
      explode: true
      schema:
        type: integer
      example: 1000
    pageToken:
      name: pageToken
      in: query
      description: "Used to request a specific page of data to be returned.\n\nTokenized pages are for large data sets which can not be efficiently broken into indexed pages. Use the nextPageToken and prevPageToken from a prior response to construct a query and move to the next or previous page respectively. "
      required: false
      style: form
      explode: true
      schema:
        type: string
      example: 33c27874
    searchResultsDbId:
      name: searchResultsDbId
      in: path
      description: Unique identifier which references the search results
      required: true
      style: simple
      explode: false
      schema:
        type: string
  securitySchemes:
    AuthorizationToken:
      type: http
      description: OAuth Bearer Token - A valid Bearer token to prove authorization
      scheme: bearer
      bearerFormat: nonce token or JWT
