---
openapi: 3.0.0
info:
  title: BrAPI-Phenotyping
  description: "The Breeding API (BrAPI) is a Standardized REST ful Web Service API Specification for communicating Plant Breeding Data. BrAPI allows for easy data sharing between databases and tools involved in plant breeding.\n<div class=\"brapi-section\">\n<h2 class=\"brapi-section-title\">General Reference Documentation</h2>\n<div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/URL_Structure.md\">URL Structure</a></div>\n<div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Response_Structure.md\">Response Structure</a></div>\n<div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Date_Time_Encoding.md\">Date/Time Encoding</a></div>\n<div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Location_Encoding.md\">Location Encoding</a></div>\n<div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Error_Handling.md\">Error Handling</a></div>\n<div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Search_Services.md\">Search Services</a></div>\n</div>\n\n<div class=\"brapi-section\">\n<h2 class=\"brapi-section-title\">BrAPI Core</h2>\n<div class=\"brapi-section-description\">The BrAPI Core module contains high level entities used for organization and management. This includes Programs, Trials, Studies, Locations, People, and Lists</div>\n<div class=\"version-number\">V2.0</div>\n<div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Core\">GitHub</a></div>\n<div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Core\">SwaggerHub</a></div>\n<div class=\"link-btn\"><a href=\"https://brapicore.docs.apiary.io\">Apiary</a></div>\n<div class=\"stop-float\"></div>\n</div>\n\n<div class=\"current-brapi-section brapi-section\">\n<h2 class=\"brapi-section-title\">BrAPI Phenotyping</h2>\n<div class=\"brapi-section-description\">The BrAPI Phenotyping module contains entities related to phenotypic observations. This includes Observation Units, Observations, Observation Variables, Traits, Scales, Methods, and Images</div>\n<div class=\"version-number\">V2.0</div>\n<div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Phenotyping\">GitHub</a></div>\n<div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Phenotyping\">SwaggerHub</a></div>\n<div class=\"link-btn\"><a href=\"https://brapiphenotyping.docs.apiary.io\">Apiary</a></div>\n<div class=\"stop-float\"></div>\n</div>\n\n<div class=\"brapi-section\">\n<h2 class=\"brapi-section-title\">BrAPI Genotyping</h2>\n<div class=\"brapi-section-description\">The BrAPI Genotyping module contains entities related to genotyping analysis. This includes Samples, Markers, Variant Sets, Variants, Call Sets, Calls, References, Reads, and Vendor Orders</div>\n<div class=\"version-number\">V2.0</div>\n<div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Genotyping\">GitHub</a></div>\n<div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Genotyping\">SwaggerHub</a></div>\n<div class=\"link-btn\"><a href=\"https://brapigenotyping.docs.apiary.io\">Apiary</a></div>\n<div class=\"stop-float\"></div>\n</div>\n\n<div class=\"brapi-section\">\n<h2 class=\"brapi-section-title\">BrAPI Germplasm</h2>\n<div class=\"brapi-section-description\">The BrAPI Germplasm module contains entities related to germplasm management. This includes Germplasm, Germplasm Attributes, Seed Lots, Crosses, Pedigree, and Progeny</div>\n<div class=\"version-number\">V2.0</div>\n<div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Germplasm\">GitHub</a></div>\n<div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Germplasm\">SwaggerHub</a></div>\n<div class=\"link-btn\"><a href=\"https://brapigermplasm.docs.apiary.io\">Apiary</a></div>\n<div class=\"stop-float\"></div>\n</div>\n\n<style>\n.link-btn{\nfloat: left; \nmargin: 2px 10px 0 0; \npadding: 0 5px; \nborder-radius: 5px; \nbackground-color: #ddd;\n}\n.stop-float{\n  clear: both;\n}\n.version-number{\n  float: left; \n  margin: 5px 10px 0 5px;\n}\n.brapi-section-title{\n  margin: 0 10px 0 0;\n  font-size: 20px;\n}\n.current-brapi-section{\n  font-weight: bolder;\n  border-radius: 5px; \n  background-color: #ddd;\n}\n.brapi-section{\n  padding: 5px 5px; \n}\n.brapi-section-description{\n  margin: 5px 0 0 5px;\n}\n</style>"
  version: "2.0"
servers:
- url: https://test-server.brapi.org/brapi/v2
security:
- AuthorizationToken: []
tags:
- name: Observations
  description: Retrieve and edit information about Observations
  externalDocs:
    description: Docs
    url: https://wiki.brapi.org/
- name: Observation Units
  description: Retrieve and edit information about Observation Units. An Observation Unit can be anything in a field you might observe as part of a Study
  externalDocs:
    description: Docs
    url: https://wiki.brapi.org/
- name: Observation Variables
  description: Retrieve and edit information about Observation Variables. An Observation Variable is composed by the unique combination of one Trait, one Method and one Scale.
  externalDocs:
    description: Docs
    url: https://wiki.brapi.org/
- name: Methods
  description: Retrieve and edit information about Methods.
  externalDocs:
    description: Docs
    url: https://wiki.brapi.org/
- name: Traits
  description: Retrieve and edit information about Traits.
  externalDocs:
    description: Docs
    url: https://wiki.brapi.org/
- name: Scales
  description: Retrieve and edit information about Scales.
  externalDocs:
    description: Docs
    url: https://wiki.brapi.org/
- name: Ontologies
  description: Retrieve and edit information about Ontologies used by a server.
  externalDocs:
    description: Docs
    url: https://wiki.brapi.org/
- name: Images
  description: Retrieve and edit Images and Image meta-data
  externalDocs:
    description: Docs
    url: https://wiki.brapi.org/
- name: Events
  description: Retrieve and edit information about Events. Events can be planned like watering or fertilizing, or unplanned like weather or pests.
  externalDocs:
    description: Docs
    url: https://wiki.brapi.org/
paths:
  /events:
    get:
      tags:
      - Events
      summary: Get the Events
      description: Get list of events
      parameters:
      - name: studyDbId
        in: query
        description: Filter based on study unique identifier in which the events occurred
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: observationUnitDbId
        in: query
        description: Filter based on an ObservationUnit unique identifier in which the events occurred
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: eventDbId
        in: query
        description: Filter based on an Event DbId
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: eventType
        in: query
        description: Filter based on an Event Type
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: dateRangeStart
        in: query
        description: Filter based on an Date Range
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: dateRangeEnd
        in: query
        description: Filter based on an Date Range
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: page
        in: query
        description: |-
          Used to request a specific page of data to be returned.

          The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: "0"
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 1000
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/eventsResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /images:
    get:
      tags:
      - Images
      summary: Get the image meta data summaries
      description: |-
        Get filtered set of image meta data

        Implementation Notes

        - ''imageURL'' should be a complete URL describing the location of the image. There is no BrAPI call for retrieving the image content, so it could be on a different path, or a different host.

        - ''descriptiveOntologyTerm'' can be thought of as Tags for the image. These could be simple descriptive words, or ontology references, or full ontology URI''s.
      parameters:
      - name: imageDbId
        in: query
        description: The unique identifier for a image
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: imageName
        in: query
        description: The human readable name of an image
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: observationUnitDbId
        in: query
        description: The unique identifier of the observation unit an image is portraying
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: observationDbId
        in: query
        description: The unique identifier of the observation an image is associated with
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: descriptiveOntologyTerm
        in: query
        description: A descriptive term associated with an image
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: externalReferenceID
        in: query
        description: An external reference ID. Could be a simple string or a URI. (use with `externalReferenceSource` parameter)
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: externalReferenceSource
        in: query
        description: An identifier for the source system or database of an external reference (use with `externalReferenceID` parameter)
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: page
        in: query
        description: |-
          Used to request a specific page of data to be returned.

          The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: "0"
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 1000
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
    post:
      tags:
      - Images
      summary: Create new image meta data objects
      description: |-
        Create new image meta data objects

        Implementation Notes

        - ''imageURL'' should be a complete URL describing the location of the image. There is no BrAPI call for retrieving the image content, so it could be on a different path, or a different host.

        - ''descriptiveOntologyTerm'' can be thought of as Tags for the image. These could be simple descriptive words, or ontology references, or full ontology URI''s.

        - The '/images' calls support a GeoJSON object structure for describing their location. The BrAPI spec for GeoJSON only supports two of the possible geometries: Points and Polygons.

        - With most images, the Point geometry should be used, and it should indicate the longitude and latitude of the camera.

        - For top down images (ie from drones, cranes, etc), the Point geometry may be used to indicate the longitude and latitude of the centroid of the image content, and the Polygon geometry may be used to indicate the border of the image content. '
      parameters:
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ImageNewRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /images/{imageDbId}:
    get:
      tags:
      - Images
      summary: Get the an image meta data summary
      description: |-
        Get one image meta data object

        Implementation Notes

        - ''imageURL'' should be a complete URL describing the location of the image. There is no BrAPI call for retrieving the image content, so it could be on a different path, or a different host.

        - ''descriptiveOntologyTerm'' can be thought of as Tags for the image. These could be simple descriptive words, or ontology references, or full ontology URI''s.
      parameters:
      - name: imageDbId
        in: path
        description: The unique identifier for a image
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageSingleResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found
    put:
      tags:
      - Images
      summary: Update an image meta data
      description: "Update an image meta data object\n\nImplementation Notes\n\n- This call should be paired with 'PUT /images/{imageDbId}/imagecontent' for full capability\n\n- A server may choose to modify the image meta data object based on the actually image which has been uploaded. \n\n- Image data may be stored in a database or file system. Servers should generate and provide the \"imageURL\" as an absolute path for retrieving the image, wherever it happens to live. \n\n- 'descriptiveOntologyTerm' can be thought of as Tags for the image. These could be simple descriptive words, or ontology references, or full ontology URI's. \n\n- The '/images' calls support a GeoJSON object structure for describing their location. The BrAPI spec for GeoJSON only supports two of the possible geometries: Points and Polygons. \n\n- With most images, the Point geometry should be used, and it should indicate the longitude and latitude of the camera. \n\n- For top down images (ie from drones, cranes, etc), the Point geometry may be used to indicate the longitude and latitude of the centroid of the image content, and the Polygon geometry may be used to indicate the border of the image content."
      parameters:
      - name: imageDbId
        in: path
        description: The unique identifier for a image
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImageNewRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageSingleResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found
  /images/{imageDbId}/imagecontent:
    put:
      tags:
      - Images
      summary: Update an image with the image file content
      description: "Update an image with the image file content\n\nImplementation Notes\n\n- This call should be paired with 'PUT /images/{imageDbId}' for full capability\n\n- A server may choose to modify the image meta data object based on the actually image which has been uploaded. \n\n- Image data may be stored in a database or file system. Servers should generate and provide the \"imageURL\" for retrieving the image, wherever it happens to live."
      parameters:
      - name: imageDbId
        in: path
        description: The unique identifier for a image
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        content:
          image/*:
            schema:
              type: string
              format: binary
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageSingleResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found
  /methods:
    get:
      tags:
      - Methods
      summary: Get the Methods
      description: |-
        Returns a list of Methods available on a server.

        An Observation Variable has 3 critical parts; A Trait being observed, a Method for making the observation, and a Scale on which the observation can be measured and compared with other observations.'
      parameters:
      - name: methodDbId
        in: query
        description: The unique identifier for a method
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: observationVariableDbId
        in: query
        description: The unique identifier for an observation variable
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: externalReferenceID
        in: query
        description: An external reference ID. Could be a simple string or a URI. (use with `externalReferenceSource` parameter)
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: externalReferenceSource
        in: query
        description: An identifier for the source system or database of an external reference (use with `externalReferenceID` parameter)
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: page
        in: query
        description: |-
          Used to request a specific page of data to be returned.

          The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: "0"
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 1000
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MethodListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
    post:
      tags:
      - Methods
      summary: Add new Methods
      description: Create new method objects in the database
      parameters:
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/MethodNewRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MethodListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /methods/{methodDbId}:
    get:
      tags:
      - Methods
      summary: Get the details for a specific Method
      description: |-
        Retrieve details about a specific method

        An Observation Variable has 3 critical parts; A Trait being observed, a Method for making the observation, and a Scale on which the observation can be measured and compared with other observations.
      parameters:
      - name: methodDbId
        in: path
        description: Id of the method to retrieve details of.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MethodSingleResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found
    put:
      tags:
      - Methods
      summary: Update an existing Method
      description: Update the details of an existing method
      parameters:
      - name: methodDbId
        in: path
        description: Id of the method to retrieve details of.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MethodNewRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MethodSingleResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found
  /observationlevels:
    get:
      tags:
      - Observation Units
      summary: Get the Observation Levels
      description: "Call to retrieve the list of supported observation levels. \n\nObservation levels indicate the granularity level at which the measurements are taken. `levelName` defines the level, `levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`s lower numbers are at the top of the hierarchy (ie field > 0) and higher numbers are at the bottom of the hierarchy (ie plant > 6). \n\nThe values are used to supply the `observationLevel` parameter in the observation unit details call."
      parameters:
      - name: studyDbId
        in: query
        description: Filter by study DbId
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: trialDbId
        in: query
        description: Filter by trial DbId
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: programDbId
        in: query
        description: Filter by program DbId
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: page
        in: query
        description: |-
          Used to request a specific page of data to be returned.

          The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: "0"
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 1000
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObservationLevelListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /observations:
    get:
      tags:
      - Observations
      summary: Get a filtered set of Observations
      description: |-
        Retrieve all observations where there are measurements for the given observation variables.

        observationTimestamp should be ISO8601 format with timezone -> YYYY-MM-DDThh:mm:ss+hhmm
      parameters:
      - name: observationDbId
        in: query
        description: The unique ID of an Observation
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: observationUnitDbId
        in: query
        description: The unique ID of an Observation Unit
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: germplasmDbId
        in: query
        description: The unique ID of a germplasm (accession) to filter on
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: observationVariableDbId
        in: query
        description: The unique ID of an observation variable
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: studyDbId
        in: query
        description: The unique ID of a studies to filter on
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: locationDbId
        in: query
        description: The unique ID of a location where these observations were collected
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: trialDbId
        in: query
        description: The unique ID of a trial to filter on
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: programDbId
        in: query
        description: The unique ID of a program to filter on
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: seasonDbId
        in: query
        description: The year or Phenotyping campaign of a multi-annual study (trees, grape, ...)
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: observationUnitLevelName
        in: query
        description: The Observation Unit Level. Returns only the observation unit of the specified Level. References ObservationUnit->observationUnitPosition->observationLevel->levelName
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: observationUnitLevelOrder
        in: query
        description: The Observation Unit Level Order Number. Returns only the observation unit of the specified Level. References ObservationUnit->observationUnitPosition->observationLevel->levelOrder
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: observationUnitLevelCode
        in: query
        description: The Observation Unit Level Code. This parameter should be used together with `observationUnitLevelName` or `observationUnitLevelOrder`. References ObservationUnit->observationUnitPosition->observationLevel->levelCode
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: observationTimeStampRangeStart
        in: query
        description: Timestamp range start
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: observationTimeStampRangeEnd
        in: query
        description: Timestamp range end
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: externalReferenceID
        in: query
        description: An external reference ID. Could be a simple string or a URI. (use with `externalReferenceSource` parameter)
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: externalReferenceSource
        in: query
        description: An identifier for the source system or database of an external reference (use with `externalReferenceID` parameter)
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: page
        in: query
        description: |-
          Used to request a specific page of data to be returned.

          The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: "0"
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 1000
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObservationListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
    put:
      tags:
      - Observations
      summary: Update multiple Observation entities
      description: |-
        Update multiple Observation entities simultaneously with a single call

        Include as many `observationDbIds` in the request as needed.

        Note - In strictly typed languages, this structure can be represented as a Map or Dictionary of objects and parsed directly from JSON.
      parameters:
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                $ref: '#/components/schemas/ObservationNewRequest'
              example:
                <observationDbId_1>:
                  additionalInfo: {}
                  collector: 917d3ae0
                  externalReferences:
                  - referenceID: 75a50e76
                    referenceSource: Remote Data Collection Upload Tool
                  germplasmDbId: 2408ab11
                  germplasmName: A0000003
                  observationTimeStamp: 2020-08-12T18:10:40.413Z
                  observationUnitDbId: 598111d4
                  observationUnitName: Plot 1
                  observationVariableDbId: c403d107
                  observationVariableName: Plant Height in meters
                  season:
                    season: Spring
                    seasonDbId: Spring_2018
                    year: 2018
                  studyDbId: ef2829db
                  uploadedBy: a2f7f60b
                  value: "2.3"
                <observationDbId_2>:
                  additionalInfo: {}
                  collector: 03ba8c2c
                  externalReferences:
                  - referenceID: 75a50e76
                    referenceSource: Remote Data Collection Upload Tool
                  germplasmDbId: 69310ca4
                  germplasmName: A0000438
                  observationTimeStamp: 2020-08-12T18:10:40.413Z
                  observationUnitDbId: 1177a714
                  observationUnitName: Plot 13
                  observationVariableDbId: e4f8ba8c
                  observationVariableName: Carotenoid
                  season:
                    season: Spring
                    seasonDbId: Spring_2018
                    year: 2018
                  studyDbId: 6f9e267d
                  uploadedBy: 182c72ad
                  value: "2.5"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObservationListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found
    post:
      tags:
      - Observations
      summary: Add new Observation entities
      description: Add new Observation entities
      parameters:
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ObservationNewRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObservationListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found
  /observations/table:
    get:
      tags:
      - Observations
      summary: Get a list of Observations in a table format
      description: "<p>This service is designed to retrieve a table of time dependant observation values as a matrix of Observation Units and Observation Variables.\nThis is also sometimes called a Time Series. This service takes the \"Sparse Table\" approach for representing this time dependant data.</p>\n<p>The table may be represented by JSON, CSV, or TSV. The \"Accept\" HTTP header is used for the client to request different return formats. \nBy default, if the \"Accept\" header is not included in the request, the server should return JSON as described below.</p>\n<p>The table is REQUIRED to have the following columns</p>\n<ul>\n  <li>observationUnitDbId - Each row is related to one Observation Unit</li>\n  <li>observationTimeStamp - Each row is has a time stamp for when the observation was taken</li>\n  <li>At least one column with an observationVariableDbId</li>\n</ul>\n<p>The table may have any or all of the following OPTIONAL columns. Included columns are decided by the server developer</p>\n<ul>\n  <li>observationUnitName</li>\n  <li>studyDbId</li>\n  <li>studyName</li>\n  <li>germplasmDbId</li>\n  <li>germplasmName</li>\n  <li>positionCoordinateX</li>\n  <li>positionCoordinateY</li>\n  <li>year</li>\n</ul>\n<p>The table also may have any number of Observation Unit Hierarchy Level columns. For example:</p>\n<ul>\n  <li>field</li>\n  <li>plot</li>\n  <li>sub-plot</li>\n  <li>plant</li>\n  <li>pot</li>\n  <li>block</li>\n  <li>entry</li>\n  <li>rep</li>\n</ul>\n<p>The JSON representation provides a pair of extra arrays for defining the headers of the table. \nThe first array \"headerRow\" will always contain \"observationUnitDbId\" and any or all of the OPTIONAL column header names. \nThe second array \"observationVariables\" contains the names and DbIds for the Observation Variables represented in the table. \nBy appending the two arrays, you can construct the complete header row of the table. </p>\n<p>For CSV and TSV representations of the table, an extra header row is needed to describe both the Observation Variable DbId and the Observation Variable Name for each data column. \nSee the example responses below</p> "
      parameters:
      - name: observationUnitDbId
        in: query
        description: The unique ID of an Observation Unit
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: germplasmDbId
        in: query
        description: The unique ID of a germplasm (accession) to filter on
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: observationVariableDbId
        in: query
        description: The unique ID of an observation variable
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: studyDbId
        in: query
        description: The unique ID of a studies to filter on
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: locationDbId
        in: query
        description: The unique ID of a location where these observations were collected
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: trialDbId
        in: query
        description: The unique ID of a trial to filter on
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: programDbId
        in: query
        description: The unique ID of a program to filter on
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: seasonDbId
        in: query
        description: The year or Phenotyping campaign of a multi-annual study (trees, grape, ...)
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: observationLevel
        in: query
        description: The type of the observationUnit. Returns only the observation unit of the specified type; the parent levels ID can be accessed through observationUnitStructure.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: searchResultsDbId
        in: query
        description: Permanent unique identifier which references the search results
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: observationTimeStampRangeStart
        in: query
        description: Timestamp range start
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: observationTimeStampRangeEnd
        in: query
        description: Timestamp range end
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: Accept
        in: header
        description: The requested content type which should be returned by the server
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/WSMIMEDataTypes'
        example: application/json
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObservationTableResponse'
            text/csv:
              schema:
                type: string
              example: "\"observationUnitDbId\",\"observationUnitName\",\"studyDbId\",\"studyName\",\"germplasmDbId\",\"germplasmName\",\"positionCoordinateX\",\"positionCoordinateY\",\"year\",\"field\",\"plot\",\"sub-plot\",\"plant\",\"pot\",\"block\",\"entry\",\"rep\",\"f959a77d\",\"8341dee0\",\"84c9fd86\",\"93d80c95\"\n\n\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"Plant height\",\"Carotenoid\",\"Root color\",\"Virus severity\"\n      \n\"2019-09-10T18:13:27.223Z\",\"f3a8a3db\",\"Plant Alpha\",  \"0fe3e48b\",\"2017 Plant Study\",\"06307ec0\",\"A0043001\",\"76.50106681\",\"42.44409301\",\"2017\",\"Field_1\",\"Plot_11\",\"SubPlot_111\",\"Plant_1111\",\"Pot_1111\",\"Block_11\",\"Entry_11\",\"Rep_11\",\"25.3\",\"\", \"\",\"\"\n\n\"2019-09-10T18:14:27.223Z\",\"f3a8a3db\",\"Plant Alpha\",  \"0fe3e48b\",\"2017 Plant Study\",\"06307ec0\",\"A0043001\",\"76.50106681\",\"42.44409301\",\"2017\",\"Field_1\",\"Plot_11\",\"SubPlot_111\",\"Plant_1111\",\"Pot_1111\",\"Block_11\",\"Entry_11\",\"Rep_11\",\"\",    \"3\",\"\",\"\"\n\n\"2019-09-10T18:15:54.868Z\",\"05d1b011\",\"Plant Beta\",   \"0fe3e48b\",\"2017 Plant Study\",\"59d435cd\",\"A0043002\",\"76.50106683\",\"42.44409301\",\"2017\",\"Field_1\",\"Plot_11\",\"SubPlot_112\",\"Plant_1122\",\"Pot_1122\",\"Block_11\",\"Entry_11\",\"Rep_12\",\"27.9\",\"\", \"\",\"\"\n\n\"2019-09-10T18:16:54.868Z\",\"05d1b011\",\"Plant Beta\",   \"0fe3e48b\",\"2017 Plant Study\",\"59d435cd\",\"A0043002\",\"76.50106683\",\"42.44409301\",\"2017\",\"Field_1\",\"Plot_11\",\"SubPlot_112\",\"Plant_1122\",\"Pot_1122\",\"Block_11\",\"Entry_11\",\"Rep_12\",\"\",    \"1\",\"\",\"\"\n\n\"2019-09-10T18:17:34.433Z\",\"67e2d87c\",\"Plant Gamma\",  \"0fe3e48b\",\"2017 Plant Study\",\"06307ec0\",\"A0043001\",\"76.50106681\",\"42.44409356\",\"2017\",\"Field_1\",\"Plot_12\",\"SubPlot_123\",\"Plant_1233\",\"Pot_1233\",\"Block_12\",\"Entry_12\",\"Rep_11\",\"\",    \"3\",\"\",\"\"\n\n\"2019-09-10T18:18:34.433Z\",\"67e2d87c\",\"Plant Gamma\",  \"0fe3e48b\",\"2017 Plant Study\",\"06307ec0\",\"A0043001\",\"76.50106681\",\"42.44409356\",\"2017\",\"Field_1\",\"Plot_12\",\"SubPlot_123\",\"Plant_1233\",\"Pot_1233\",\"Block_12\",\"Entry_12\",\"Rep_11\",\"25.5\",\"\", \"\",\"\"\n\n\"2019-09-10T18:19:15.629Z\",\"d98d0d4c\",\"Plant Epsilon\",\"0fe3e48b\",\"2017 Plant Study\",\"59d435cd\",\"A0043002\",\"76.50106683\",\"42.44409356\",\"2017\",\"Field_1\",\"Plot_12\",\"SubPlot_124\",\"Plant_1244\",\"Pot_1244\",\"Block_12\",\"Entry_12\",\"Rep_12\",\"28.9\",\"\", \"\",\"\"\n\n\"2019-09-10T18:20:15.629Z\",\"d98d0d4c\",\"Plant Epsilon\",\"0fe3e48b\",\"2017 Plant Study\",\"59d435cd\",\"A0043002\",\"76.50106683\",\"42.44409356\",\"2017\",\"Field_1\",\"Plot_12\",\"SubPlot_124\",\"Plant_1244\",\"Pot_1244\",\"Block_12\",\"Entry_12\",\"Rep_12\",\"\",    \"0\",\"\",\"\""
            text/tsv:
              schema:
                type: string
              example: "\"observationUnitDbId\"\\t\"observationUnitName\"\\t\"studyDbId\"\\t\"studyName\"\\t\"germplasmDbId\"\\t\"germplasmName\"\\t\"positionCoordinateX\"\\t\"positionCoordinateY\"\\t\"year\"\\t\"field\"\\t\"plot\"\\t\"sub-plot\"\\t\"plant\"\\t\"pot\"\\t\"block\"\\t\"entry\"\\t\"rep\"\\t\"f959a77d\"\\t\"8341dee0\"\\t\"84c9fd86\"\\t\"93d80c95\"\n\n\"\"\\t\"\"\\t\"\"\\t\"\"\\t\"\"\\t\"\"\\t\"\"\\t\"\"\\t\"\"\\t\"\"\\t\"\"\\t\"\"\\t\"\"\\t\"\"\\t\"\"\\t\"\"\\t\"\"\\t\"Plant height\"\\t\"Carotenoid\"\\t\"Root color\"\\t\"Virus severity\"\n      \n\"2019-09-10T18:13:27.223Z\"\\t\"f3a8a3db\"\\t\"Plant Alpha\"\\t  \"0fe3e48b\"\\t\"2017 Plant Study\"\\t\"06307ec0\"\\t\"A0043001\"\\t\"76.50106681\"\\t\"42.44409301\"\\t\"2017\"\\t\"Field_1\"\\t\"Plot_11\"\\t\"SubPlot_111\"\\t\"Plant_1111\"\\t\"Pot_1111\"\\t\"Block_11\"\\t\"Entry_11\"\\t\"Rep_11\"\\t\"25.3\"\\t\"\"\\t \"\"\\t\"\"\n\n\"2019-09-10T18:14:27.223Z\"\\t\"f3a8a3db\"\\t\"Plant Alpha\"\\t  \"0fe3e48b\"\\t\"2017 Plant Study\"\\t\"06307ec0\"\\t\"A0043001\"\\t\"76.50106681\"\\t\"42.44409301\"\\t\"2017\"\\t\"Field_1\"\\t\"Plot_11\"\\t\"SubPlot_111\"\\t\"Plant_1111\"\\t\"Pot_1111\"\\t\"Block_11\"\\t\"Entry_11\"\\t\"Rep_11\"\\t\"\"\\t    \"3\"\\t\"\"\\t\"\"\n\n\"2019-09-10T18:15:54.868Z\"\\t\"05d1b011\"\\t\"Plant Beta\"\\t   \"0fe3e48b\"\\t\"2017 Plant Study\"\\t\"59d435cd\"\\t\"A0043002\"\\t\"76.50106683\"\\t\"42.44409301\"\\t\"2017\"\\t\"Field_1\"\\t\"Plot_11\"\\t\"SubPlot_112\"\\t\"Plant_1122\"\\t\"Pot_1122\"\\t\"Block_11\"\\t\"Entry_11\"\\t\"Rep_12\"\\t\"27.9\"\\t\"\"\\t \"\"\\t\"\"\n\n\"2019-09-10T18:16:54.868Z\"\\t\"05d1b011\"\\t\"Plant Beta\"\\t   \"0fe3e48b\"\\t\"2017 Plant Study\"\\t\"59d435cd\"\\t\"A0043002\"\\t\"76.50106683\"\\t\"42.44409301\"\\t\"2017\"\\t\"Field_1\"\\t\"Plot_11\"\\t\"SubPlot_112\"\\t\"Plant_1122\"\\t\"Pot_1122\"\\t\"Block_11\"\\t\"Entry_11\"\\t\"Rep_12\"\\t\"\"\\t    \"1\"\\t\"\"\\t\"\"\n\n\"2019-09-10T18:17:34.433Z\"\\t\"67e2d87c\"\\t\"Plant Gamma\"\\t  \"0fe3e48b\"\\t\"2017 Plant Study\"\\t\"06307ec0\"\\t\"A0043001\"\\t\"76.50106681\"\\t\"42.44409356\"\\t\"2017\"\\t\"Field_1\"\\t\"Plot_12\"\\t\"SubPlot_123\"\\t\"Plant_1233\"\\t\"Pot_1233\"\\t\"Block_12\"\\t\"Entry_12\"\\t\"Rep_11\"\\t\"\"\\t    \"3\"\\t\"\"\\t\"\"\n\n\"2019-09-10T18:18:34.433Z\"\\t\"67e2d87c\"\\t\"Plant Gamma\"\\t  \"0fe3e48b\"\\t\"2017 Plant Study\"\\t\"06307ec0\"\\t\"A0043001\"\\t\"76.50106681\"\\t\"42.44409356\"\\t\"2017\"\\t\"Field_1\"\\t\"Plot_12\"\\t\"SubPlot_123\"\\t\"Plant_1233\"\\t\"Pot_1233\"\\t\"Block_12\"\\t\"Entry_12\"\\t\"Rep_11\"\\t\"25.5\"\\t\"\"\\t \"\"\\t\"\"\n\n\"2019-09-10T18:19:15.629Z\"\\t\"d98d0d4c\"\\t\"Plant Epsilon\"\\t\"0fe3e48b\"\\t\"2017 Plant Study\"\\t\"59d435cd\"\\t\"A0043002\"\\t\"76.50106683\"\\t\"42.44409356\"\\t\"2017\"\\t\"Field_1\"\\t\"Plot_12\"\\t\"SubPlot_124\"\\t\"Plant_1244\"\\t\"Pot_1244\"\\t\"Block_12\"\\t\"Entry_12\"\\t\"Rep_12\"\\t\"28.9\"\\t\"\"\\t \"\"\\t\"\"\n\n\"2019-09-10T18:20:15.629Z\"\\t\"d98d0d4c\"\\t\"Plant Epsilon\"\\t\"0fe3e48b\"\\t\"2017 Plant Study\"\\t\"59d435cd\"\\t\"A0043002\"\\t\"76.50106683\"\\t\"42.44409356\"\\t\"2017\"\\t\"Field_1\"\\t\"Plot_12\"\\t\"SubPlot_124\"\\t\"Plant_1244\"\\t\"Pot_1244\"\\t\"Block_12\"\\t\"Entry_12\"\\t\"Rep_12\"\\t\"\"\\t    \"0\"\\t\"\"\\t\"\""
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /observations/{observationDbId}:
    get:
      tags:
      - Observations
      summary: Get the details of a specific Observations
      description: |-
        Get the details of a specific Observations

        observationTimestamp should be ISO8601 format with timezone -> YYYY-MM-DDThh:mm:ss+hhmm
      parameters:
      - name: observationDbId
        in: path
        description: The unique ID of an observation
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObservationSingleResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found
    put:
      tags:
      - Observations
      summary: Update an existing Observation
      description: Update an existing Observation
      parameters:
      - name: observationDbId
        in: path
        description: The unique ID of an observation
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ObservationNewRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObservationSingleResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found
  /observationunits:
    get:
      tags:
      - Observation Units
      summary: Get a filtered set of Observation Units
      description: Get a filtered set of Observation Units
      parameters:
      - name: observationUnitDbId
        in: query
        description: The unique ID of an Observation Unit
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: germplasmDbId
        in: query
        description: The unique ID of a germplasm (accession) to filter on
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: studyDbId
        in: query
        description: The unique ID of a studies to filter on
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: locationDbId
        in: query
        description: The unique ID of a location where these observations were collected
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: trialDbId
        in: query
        description: The unique ID of a trial to filter on
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: programDbId
        in: query
        description: The unique ID of a program to filter on
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: seasonDbId
        in: query
        description: The year or Phenotyping campaign of a multi-annual study (trees, grape, ...)
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: observationUnitLevelName
        in: query
        description: The Observation Unit Level. Returns only the observation unit of the specified Level. References ObservationUnit->observationUnitPosition->observationLevel->levelName
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: observationUnitLevelOrder
        in: query
        description: The Observation Unit Level Order Number. Returns only the observation unit of the specified Level. References ObservationUnit->observationUnitPosition->observationLevel->levelOrder
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: observationUnitLevelCode
        in: query
        description: The Observation Unit Level Code. This parameter should be used together with `observationUnitLevelName` or `observationUnitLevelOrder`. References ObservationUnit->observationUnitPosition->observationLevel->levelCode
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: includeObservations
        in: query
        description: "Use this parameter to include a list of observations embedded in each ObservationUnit object. \n\nCAUTION - Use this parameter at your own risk. It may return large, unpaginated lists of observation data. Only set this value to True if you are sure you need to."
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: externalReferenceID
        in: query
        description: An external reference ID. Could be a simple string or a URI. (use with `externalReferenceSource` parameter)
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: externalReferenceSource
        in: query
        description: An identifier for the source system or database of an external reference (use with `externalReferenceID` parameter)
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: page
        in: query
        description: |-
          Used to request a specific page of data to be returned.

          The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: "0"
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 1000
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObservationUnitListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
    put:
      tags:
      - Observation Units
      summary: Update a set of Observation Units
      description: |-
        Update a set of Observation Units

        Note - In strictly typed languages, this structure can be represented as a Map or Dictionary of objects and parsed directly to JSON.
      parameters:
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                $ref: '#/components/schemas/ObservationUnitNewRequest'
              example:
                <observationUnitDbId_1>:
                  additionalInfo: {}
                  externalReferences:
                  - referenceID: doi:10.155454/12341234
                    referenceSource: DOI
                  germplasmDbId: e9d9ed57
                  germplasmName: A0000001
                  locationDbId: 0e208b20
                  locationName: Field Station Alpha
                  observationUnitName: Plot 31
                  observationUnitPUI: http://pui.per/plot/1a9afc14
                  observationUnitPosition:
                    entryType: TEST
                    geoCoordinates:
                      geometry:
                        coordinates:
                        - -76.506042
                        - 42.417373
                        - 123
                        type: Point
                      type: Feature
                    observationLevel:
                      levelCode: Plot_456
                      levelName: plot
                      levelOrder: 2
                    observationLevelRelationships:
                    - levelCode: Field_1
                      levelName: field
                      levelOrder: 0
                    - levelCode: Block_6
                      levelName: block
                      levelOrder: 1
                    - levelCode: Plot_456
                      levelName: plot
                      levelOrder: 2
                    positionCoordinateX: "78"
                    positionCoordinateXType: GRID_COL
                    positionCoordinateY: 8.0
                    positionCoordinateYType: GRID_ROW
                  programDbId: 2d763a7a
                  programName: The Perfect Breeding Program
                  seedLotDbId: 261ecb09
                  studyDbId: 9865addc
                  studyName: Purple_Tomato_1
                  treatments:
                  - factor: fertilizer
                    modality: low fertilizer
                  trialDbId: 776a609c
                  trialName: Purple Tomato
                <observationUnitDbId_2>:
                  additionalInfo: {}
                  externalReferences:
                  - referenceID: doi:10.155454/12341234
                    referenceSource: DOI
                  germplasmDbId: e9d9ed57
                  germplasmName: A0000001
                  locationDbId: 0e208b20
                  locationName: Field Station Alpha
                  observationUnitName: Plot 17
                  observationUnitPUI: http://pui.per/plot/1a9afc14
                  observationUnitPosition:
                    entryType: TEST
                    geoCoordinates:
                      geometry:
                        coordinates:
                        - -76.506042
                        - 42.417373
                        - 123
                        type: Point
                      type: Feature
                    observationLevel:
                      levelCode: Plot_123
                      levelName: plot
                      levelOrder: 2
                    observationLevelRelationships:
                    - levelCode: Field_1
                      levelName: field
                      levelOrder: 0
                    - levelCode: Block_12
                      levelName: block
                      levelOrder: 1
                    - levelCode: Plot_123
                      levelName: plot
                      levelOrder: 2
                    positionCoordinateX: "74"
                    positionCoordinateXType: GRID_COL
                    positionCoordinateY: "03"
                    positionCoordinateYType: GRID_ROW
                  programDbId: 2d763a7a
                  programName: The Perfect Breeding Program
                  seedLotDbId: 261ecb09
                  studyDbId: 9865addc
                  studyName: Purple_Tomato_1
                  treatments:
                  - factor: fertilizer
                    modality: low fertilizer
                  trialDbId: 776a609c
                  trialName: Purple Tomato
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObservationUnitListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
    post:
      tags:
      - Observation Units
      summary: Add new Observation Units
      description: Add new Observation Units
      parameters:
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ObservationUnitNewRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObservationUnitListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /observationunits/table:
    get:
      tags:
      - Observation Units
      summary: Get a list of Observations in a table format
      description: "<p>This service is designed to retrieve a table for observation values as a matrix of Observation Units and Observation Variables.</p>\n<p>The table may be represented by JSON, CSV, or TSV. The \"Accept\" HTTP header is used for the client to request different return formats. \nBy default, if the \"Accept\" header is not included in the request, the server should return JSON as described below.</p>\n<p>The table is REQUIRED to have the following columns</p>\n<ul>\n  <li>observationUnitDbId - Each row is related to one Observation Unit</li>\n  <li>At least one column with an observationVariableDbId</li>\n</ul>\n<p>The table may have any or all of the following OPTIONAL columns. Included columns are decided by the server developer</p>\n<ul>\n  <li>observationUnitName</li>\n  <li>studyDbId</li>\n  <li>studyName</li>\n  <li>germplasmDbId</li>\n  <li>germplasmName</li>\n  <li>positionCoordinateX</li>\n  <li>positionCoordinateY</li>\n  <li>year</li>\n</ul>\n<p>The table also may have any number of Observation Unit Hierarchy Level columns. For example:</p>\n<ul>\n  <li>field</li>\n  <li>plot</li>\n  <li>sub-plot</li>\n  <li>plant</li>\n  <li>pot</li>\n  <li>block</li>\n  <li>entry</li>\n  <li>rep</li>\n</ul>\n<p>The JSON representation provides a pair of extra arrays for defining the headers of the table. \nThe first array \"headerRow\" will always contain \"observationUnitDbId\" and any or all of the OPTIONAL column header names. \nThe second array \"observationVariables\" contains the names and DbIds for the Observation Variables represented in the table. \nBy appending the two arrays, you can construct the complete header row of the table. </p>\n<p>For CSV and TSV representations of the table, an extra header row is needed to describe both the Observation Variable DbId and the Observation Variable Name for each data column. \nSee the example responses below</p> "
      parameters:
      - name: observationUnitDbId
        in: query
        description: The unique ID of an Observation Unit
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: germplasmDbId
        in: query
        description: The unique ID of a germplasm (accession) to filter on
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: observationVariableDbId
        in: query
        description: The unique ID of an observation variable
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: studyDbId
        in: query
        description: The unique ID of a studies to filter on
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: locationDbId
        in: query
        description: The unique ID of a location where these observations were collected
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: trialDbId
        in: query
        description: The unique ID of a trial to filter on
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: programDbId
        in: query
        description: The unique ID of a program to filter on
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: seasonDbId
        in: query
        description: The year or Phenotyping campaign of a multi-annual study (trees, grape, ...)
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: observationLevel
        in: query
        description: The type of the observationUnit. Returns only the observation unit of the specified type; the parent levels ID can be accessed through observationUnitStructure.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: Accept
        in: header
        description: The requested content type which should be returned by the server
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/WSMIMEDataTypes'
        example: application/json
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObservationUnitTableResponse'
            text/csv:
              schema:
                type: string
              example: |-
                "observationUnitDbId","observationUnitName","studyDbId","studyName","germplasmDbId","germplasmName","positionCoordinateX","positionCoordinateY","year","field","plot","sub-plot","plant","pot","block","entry","rep","f959a77d","8341dee0","84c9fd86"

                "","","","","","","","","","","","","","","","","","Plant Height","Virus severity","Carotenoid"

                "f3a8a3db","Plant Alpha",  "0fe3e48b","2017 Plant Study","06307ec0","A0043001","76.50106681","42.44409301","2017","Field_1","Plot_11","SubPlot_111","Plant_1111","Pot_1111","Block_11","Entry_11","Rep_11","25.3","3","50.75"

                "05d1b011","Plant Beta",   "0fe3e48b","2017 Plant Study","59d435cd","A0043002","76.50106683","42.44409301","2017","Field_1","Plot_11","SubPlot_112","Plant_1122","Pot_1122","Block_11","Entry_11","Rep_12","27.9","1","45.345"

                "67e2d87c","Plant Gamma",  "0fe3e48b","2017 Plant Study","06307ec0","A0043001","76.50106681","42.44409356","2017","Field_1","Plot_12","SubPlot_123","Plant_1233","Pot_1233","Block_12","Entry_12","Rep_11","25.5","3","50.76"

                "d98d0d4c","Plant Epsilon","0fe3e48b","2017 Plant Study","59d435cd","A0043002","76.50106683","42.44409356","2017","Field_1","Plot_12","SubPlot_124","Plant_1244","Pot_1244","Block_12","Entry_12","Rep_12","28.9","0","46.5"
            text/tsv:
              schema:
                type: string
              example: |-
                "observationUnitDbId"\t"observationUnitName"\t"studyDbId"\t"studyName"\t"germplasmDbId"\t"germplasmName"\t"positionCoordinateX"\t"positionCoordinateY"\t"year"\t"field"\t"plot"\t"sub-plot"\t"plant"\t"pot"\t"block"\t"entry"\t"rep"\t"f959a77d"\t"8341dee0"\t"84c9fd86"

                ""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t"Plant Height"\t"Virus severity"\t"Carotenoid"

                "f3a8a3db"\t"Plant Alpha"\t  "0fe3e48b"\t"2017 Plant Study"\t"06307ec0"\t"A0043001"\t"76.50106681"\t"42.44409301"\t"2017"\t"Field_1"\t"Plot_11"\t"SubPlot_111"\t"Plant_1111"\t"Pot_1111"\t"Block_11"\t"Entry_11"\t"Rep_11"\t"25.3"\t"3"\t"50.75"

                "05d1b011"\t"Plant Beta"\t   "0fe3e48b"\t"2017 Plant Study"\t"59d435cd"\t"A0043002"\t"76.50106683"\t"42.44409301"\t"2017"\t"Field_1"\t"Plot_11"\t"SubPlot_112"\t"Plant_1122"\t"Pot_1122"\t"Block_11"\t"Entry_11"\t"Rep_12"\t"27.9"\t"1"\t"45.345"

                "67e2d87c"\t"Plant Gamma"\t  "0fe3e48b"\t"2017 Plant Study"\t"06307ec0"\t"A0043001"\t"76.50106681"\t"42.44409356"\t"2017"\t"Field_1"\t"Plot_12"\t"SubPlot_123"\t"Plant_1233"\t"Pot_1233"\t"Block_12"\t"Entry_12"\t"Rep_11"\t"25.5"\t"3"\t"50.76"

                "d98d0d4c"\t"Plant Epsilon"\t"0fe3e48b"\t"2017 Plant Study"\t"59d435cd"\t"A0043002"\t"76.50106683"\t"42.44409356"\t"2017"\t"Field_1"\t"Plot_12"\t"SubPlot_124"\t"Plant_1244"\t"Pot_1244"\t"Block_12"\t"Entry_12"\t"Rep_12"\t"28.9"\t"0"\t"46.5"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /observationunits/{observationUnitDbId}:
    get:
      tags:
      - Observation Units
      summary: Get the details of a specific Observation Unit
      description: Get the details of a specific Observation Unit
      parameters:
      - name: observationUnitDbId
        in: path
        description: The unique ID of the specific Observation Unit
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObservationUnitSingleResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
    put:
      tags:
      - Observation Units
      summary: Update an existing Observation Units
      description: Update an existing Observation Units
      parameters:
      - name: observationUnitDbId
        in: path
        description: The unique ID of the specific Observation Unit
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ObservationUnitNewRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObservationUnitSingleResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /ontologies:
    get:
      tags:
      - Ontologies
      summary: Get the Ontologies
      description: Call to retrieve a list of observation variable ontologies available in the system.
      parameters:
      - name: ontologyDbId
        in: query
        description: The unique identifier for an ontology definition
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: page
        in: query
        description: |-
          Used to request a specific page of data to be returned.

          The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: "0"
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 1000
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OntologyListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /scales:
    get:
      tags:
      - Scales
      summary: Get the Scales
      description: |-
        Returns a list of Scales available on a server.

        An Observation Variable has 3 critical parts; A Trait being observed, a Method for making the observation, and a Scale on which the observation can be measured and compared with other observations.
      parameters:
      - name: scaleDbId
        in: query
        description: The unique identifier for a scale
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: observationVariableDbId
        in: query
        description: The unique identifier for an observation variable
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: externalReferenceID
        in: query
        description: An external reference ID. Could be a simple string or a URI. (use with `externalReferenceSource` parameter)
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: externalReferenceSource
        in: query
        description: An identifier for the source system or database of an external reference (use with `externalReferenceID` parameter)
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: page
        in: query
        description: |-
          Used to request a specific page of data to be returned.

          The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: "0"
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 1000
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScaleListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
    post:
      tags:
      - Scales
      summary: Add new Scales
      description: Create new scale objects in the database
      parameters:
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ScaleNewRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScaleListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /scales/{scaleDbId}:
    get:
      tags:
      - Scales
      summary: Get the details of a specific Scale
      description: |-
        Retrieve details about a specific scale

        An Observation Variable has 3 critical parts: A Trait being observed, a Method for making the observation, and a Scale on which the observation can be measured and compared with other observations.
      parameters:
      - name: scaleDbId
        in: path
        description: Id of the scale to retrieve details of.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScaleSingleResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found
    put:
      tags:
      - Scales
      summary: Update an existing Scale
      description: Update the details of an existing scale
      parameters:
      - name: scaleDbId
        in: path
        description: Id of the scale to retrieve details of.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScaleNewRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScaleSingleResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found
  /search/images:
    post:
      tags:
      - Images
      summary: Submit a search request for Images
      description: |-
        Get filtered set of image meta data

        Implementation Notes

        - ''imageURL'' should be a complete URL describing the location of the image. There is no BrAPI call for retrieving the image content, so it could be on a different path, or a different host.

        - 'descriptiveOntologyTerm' can be thought of as Tags for the image. These could be simple descriptive words, or ontology references, or full ontology URI's.

        See Search Services for additional implementation details.
      parameters:
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImageSearchRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageListResponse'
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/202AcceptedSearchResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /search/images/{searchResultsDbId}:
    get:
      tags:
      - Images
      summary: Get the results of an Images search request
      description: |-
        Get filtered set of image meta data

        Implementation Notes

        - ''imageURL'' should be a complete URL describing the location of the image. There is no BrAPI call for retrieving the image content, so it could be on a different path, or a different host.

        - ''descriptiveOntologyTerm'' can be thought of as Tags for the image. These could be simple descriptive words, or ontology references, or full ontology URI''s.
      parameters:
      - name: searchResultsDbId
        in: path
        description: Unique identifier which references the search results
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: page
        in: query
        description: |-
          Used to request a specific page of data to be returned.

          The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: "0"
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 1000
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageListResponse'
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/202AcceptedSearchResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found
  /search/observations:
    post:
      tags:
      - Observations
      summary: Submit a search request for a set of Observations
      description: Submit a search request for a set of Observations. Returns an Id which reference the results of this search
      parameters:
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ObservationSearchRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObservationListResponse'
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/202AcceptedSearchResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /search/observations/{searchResultsDbId}:
    get:
      tags:
      - Observations
      summary: Returns a list of Observations based on search criteria.
      description: |-
        Returns a list of Observations based on search criteria.

        observationTimeStamp - Iso Standard 8601.

        observationValue data type inferred from the ontology
      parameters:
      - name: Accept
        in: header
        description: The requested content type which should be returned by the server
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/WSMIMEDataTypes'
        example: application/json
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      - name: searchResultsDbId
        in: path
        description: Unique identifier which references the search results
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: page
        in: query
        description: |-
          Used to request a specific page of data to be returned.

          The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: "0"
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 1000
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObservationListResponse'
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/202AcceptedSearchResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /search/observationunits:
    post:
      tags:
      - Observation Units
      summary: Submit a search request for Observation Units
      description: "Returns a list of observationUnit with the observed Phenotypes.\n\nSee Search Services for additional implementation details.\n\nUse case - this section allows to get a dataset from multiple studies. It allows to integrate data from several databases.\n\nExample Use cases \n\n- Study a panel of germplasm across multiple studies\n\n- Get all data for a specific study \n\n- Get simple atomic phenotyping values \n\n- Study Locations for adaptation to climate change\n\n- Find phenotypes that are from after a certain timestamp\n\nobservationTimeStampRangeStart and observationTimeStampRangeEnd use Iso Standard 8601.\n\nobservationValue data type inferred from the ontology"
      parameters:
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ObservationUnitSearchRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObservationUnitListResponse'
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/202AcceptedSearchResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /search/observationunits/{searchResultsDbId}:
    get:
      tags:
      - Observation Units
      summary: Observation Unit Search
      description: |-
        Returns a list of observationUnit with the observed Phenotypes.

        See Search Services for additional implementation details.
      parameters:
      - name: searchResultsDbId
        in: path
        description: Unique identifier which references the search results
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: page
        in: query
        description: |-
          Used to request a specific page of data to be returned.

          The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: "0"
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 1000
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObservationUnitListResponse'
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/202AcceptedSearchResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found
  /search/variables:
    post:
      tags:
      - Observation Variables
      summary: Submit a search request for Observation Variables
      description: |-
        Search observation variables.

        See Search Services for additional implementation details.
      parameters:
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ObservationVariableSearchRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObservationVariableListResponse'
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/202AcceptedSearchResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /search/variables/{searchResultsDbId}:
    get:
      tags:
      - Observation Variables
      summary: Get the results of a Observation Variable search request
      description: |-
        Search observation variables.

        See Search Services for additional implementation details.
      parameters:
      - name: searchResultsDbId
        in: path
        description: Unique identifier which references the search results
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: page
        in: query
        description: |-
          Used to request a specific page of data to be returned.

          The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: "0"
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 1000
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObservationVariableListResponse'
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/202AcceptedSearchResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found
  /traits:
    get:
      tags:
      - Traits
      summary: Get the Traits
      description: |-
        Call to retrieve a list of traits available in the system and their associated variables.

        An Observation Variable has 3 critical parts; A Trait being observed, a Method for making the observation, and a Scale on which the observation can be measured and compared with other observations.'
      parameters:
      - name: traitDbId
        in: query
        description: The unique identifier for a trait
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: observationVariableDbId
        in: query
        description: The unique identifier for an observation variable
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: externalReferenceID
        in: query
        description: An external reference ID. Could be a simple string or a URI. (use with `externalReferenceSource` parameter)
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: externalReferenceSource
        in: query
        description: An identifier for the source system or database of an external reference (use with `externalReferenceID` parameter)
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: page
        in: query
        description: |-
          Used to request a specific page of data to be returned.

          The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: "0"
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 1000
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TraitListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
    post:
      tags:
      - Traits
      summary: Add new Traits
      description: Create new trait objects in the database
      parameters:
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/TraitNewRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TraitListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /traits/{traitDbId}:
    get:
      tags:
      - Traits
      summary: Get the details of a specific Trait
      description: |-
        Retrieve the details of a single trait

        An Observation Variable has 3 critical parts: A Trait being observed, a Method for making the observation, and a Scale on which the observation can be measured and compared with other observations.
      parameters:
      - name: traitDbId
        in: path
        description: Id of the trait to retrieve details of.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TraitSingleResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found
    put:
      tags:
      - Traits
      summary: Update an existing Trait
      description: Update an existing trait
      parameters:
      - name: traitDbId
        in: path
        description: Id of the trait to retrieve details of.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TraitNewRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TraitSingleResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found
  /variables:
    get:
      tags:
      - Observation Variables
      summary: Get the Observation Variables
      description: Call to retrieve a list of observationVariables available in the system.
      parameters:
      - name: observationVariableDbId
        in: query
        description: Variable's unique ID
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: traitClass
        in: query
        description: Variable's trait class (phenological, physiological, morphological, etc.)
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: studyDbId
        in: query
        description: The unique ID of a studies to filter on
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: externalReferenceID
        in: query
        description: An external reference ID. Could be a simple string or a URI. (use with `externalReferenceSource` parameter)
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: externalReferenceSource
        in: query
        description: An identifier for the source system or database of an external reference (use with `externalReferenceID` parameter)
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: page
        in: query
        description: |-
          Used to request a specific page of data to be returned.

          The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: "0"
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 1000
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObservationVariableListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
    post:
      tags:
      - Observation Variables
      summary: Add new Observation Variables
      description: Add new Observation Variables to the system.
      parameters:
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ObservationVariableNewRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObservationVariableListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /variables/{observationVariableDbId}:
    get:
      tags:
      - Observation Variables
      summary: Get the details for a specific Observation Variable
      description: Retrieve variable details
      parameters:
      - name: observationVariableDbId
        in: path
        description: string id of the variable
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObservationVariableSingleResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found
    put:
      tags:
      - Observation Variables
      summary: Update an existing Observation Variable
      description: Update an existing Observation Variable
      parameters:
      - name: observationVariableDbId
        in: path
        description: string id of the variable
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ObservationVariableNewRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObservationVariableSingleResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found
components:
  schemas:
    Context:
      title: context
      type: array
      description: "The JSON-LD Context is used to provide JSON-LD definitions to each field in a JSON object. By providing an array of context file urls, a BrAPI response object becomes JSON-LD compatible.  \n\nFor more information, see https://w3c.github.io/json-ld-syntax/#the-context"
      example:
      - https://brapi.org/jsonld/context/metadata.jsonld
      items:
        type: string
        format: uri
    Event:
      required:
      - eventDbId
      - eventType
      type: object
      properties:
        additionalInfo:
          type: object
          additionalProperties:
            type: string
          description: Additional arbitrary info
        date:
          type: array
          description: |-
            A list of dates when the event occurred

            MIAPPE V1.1 (DM-68) Event date - Date and time of the event.
          example:
          - 2018-10-08T18:15:11Z
          - 2018-11-09T18:16:12Z
          items:
            type: string
            format: date-time
        eventDbId:
          type: string
          description: Internal database identifier
          example: 8566d4cb
        eventDescription:
          type: string
          description: "A detailed, human-readable description of this event\n\nMIAPPE V1.1 (DM-67) Event description - Description of the event, including details such as amount applied and possibly duration of the event. "
          example: A set of plots was watered
        eventParameters:
          type: array
          description: A list of objects describing additional event parameters. Each of the following accepts a human-readable value or URI
          example:
          - key: http://www.example.fr/vocabulary/2018#hasContact,
            value: http://www.example.fr/id/agent/marie,
            valueRdfType: http://xmlns.com/foaf/0.1/Agent,
          - key: fertilizer
            value: nitrogen
          items:
            $ref: '#/components/schemas/Event_eventParameters'
        eventType:
          type: string
          description: |-
            General category for this event (e.g. Sowing, Watering, Rain). Each eventType should correspond to exactly one eventTypeDbId, if provided.

            MIAPPE V1.1 (DM-65) Event type - Short name of the event.
          example: Watering
        eventTypeDbId:
          type: string
          description: |-
            An identifier for this event type, in the form of an ontology class reference

            MIAPPE V1.1 (DM-66) Event accession number - Accession number of the event type in a suitable controlled vocabulary (Crop Ontology).
          example: 4e7d691e
        observationUnitDbIds:
          type: array
          description: A list of the affected observation units. If this parameter is not given, it is understood that the event affected all units in the study
          example:
          - 8439eaff
          - d7682e7a
          - 305ae51c
          items:
            type: string
        studyDbId:
          type: string
          description: The study in which the event occurred
          example: 2cc2001f
    ExternalReferences:
      title: ExternalReferences
      type: array
      description: An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.
      example:
      - referenceID: doi:10.155454/12341234
        referenceSource: DOI
      - referenceID: http://purl.obolibrary.org/obo/ro.owl
        referenceSource: OBO Library
      - referenceID: 75a50e76
        referenceSource: Remote Data Collection Upload Tool
      items:
        $ref: '#/components/schemas/ExternalReferences_inner'
    Image:
      allOf:
      - $ref: '#/components/schemas/ImageNewRequest'
      - type: object
        properties:
          imageDbId:
            type: string
            description: The unique identifier of an image
            example: a55efb9c
    ImageNewRequest:
      type: object
      properties:
        additionalInfo:
          type: object
          additionalProperties:
            type: string
        copyright:
          type: string
          description: The copyright information of this image. Example 'Copyright 2018 Bob Robertson'
          example: Copyright 2018 Bob Robertson
        description:
          type: string
          description: The human readable description of an image.
          example: This is a picture of a tomato
        descriptiveOntologyTerms:
          type: array
          description: A list of terms to formally describe the image. Each item could be a simple Tag, an Ontology reference Id, or a full ontology URL.
          example:
          - doi:10.1002/0470841559
          - Red
          - ncbi:0300294
          items:
            type: string
        externalReferences:
          $ref: '#/components/schemas/ExternalReferences'
        imageFileName:
          type: string
          description: The name of the image file. Might be the same as 'imageName', but could be different.
          example: image_0000231.jpg
        imageFileSize:
          type: integer
          description: The size of the image in Bytes.
          example: 50000
        imageHeight:
          type: integer
          description: The height of the image in Pixels.
          example: 550
        imageLocation:
          $ref: '#/components/schemas/geoJSON'
        imageName:
          type: string
          description: The human readable name of an image. Might be the same as 'imageFileName', but could be different.
          example: Tomato Image 1
        imageTimeStamp:
          type: string
          description: The date and time the image was taken
          format: date-time
        imageURL:
          type: string
          description: The complete, absolute URI path to the image file. Images might be stored on a different host or path than the BrAPI web server.
          example: https://wiki.brapi.org/images/tomato
        imageWidth:
          type: integer
          description: The width of the image in Pixels.
          example: 700
        mimeType:
          pattern: image/.*
          type: string
          description: The file type of the image. Examples 'image/jpeg', 'image/png', 'image/svg', etc
          example: image/jpeg
        observationDbIds:
          type: array
          description: A list of observation Ids this image is associated with, if applicable.
          example:
          - d05dd235
          - 8875177d
          - c08e81b6
          items:
            type: string
        observationUnitDbId:
          type: string
          description: The related observation unit identifier, if relevant.
          example: b7e690b6
    ImageSearchRequest:
      allOf:
      - $ref: '#/components/schemas/SearchRequestParametersPaging'
      - $ref: '#/components/schemas/SearchRequestParametersExternalReferences'
      - type: object
        properties:
          descriptiveOntologyTerms:
            type: array
            description: A list of terms to formally describe the image to search for. Each item could be a simple Tag, an Ontology reference Id, or a full ontology URL.
            example:
            - doi:10.1002/0470841559
            - Red
            - ncbi:0300294
            items:
              type: string
          imageDbIds:
            type: array
            description: A list of image Ids to search for
            example:
            - 564b64a6
            - 0d122d1d
            items:
              type: string
          imageFileNames:
            type: array
            description: Image file names to search for.
            example:
            - image_01032019.jpg
            - picture_field_1234.jpg
            items:
              type: string
          imageFileSizeMax:
            type: integer
            description: A maximum image file size to search for.
            example: 20000000
          imageFileSizeMin:
            type: integer
            description: A minimum image file size to search for.
            example: 1000
          imageHeightMax:
            type: integer
            description: A maximum image height to search for.
            example: 1080
          imageHeightMin:
            type: integer
            description: A minimum image height to search for.
            example: 720
          imageLocation:
            $ref: '#/components/schemas/geoJSONSearchArea'
          imageNames:
            type: array
            description: Human readable names to search for.
            example:
            - Image 43
            - Tractor in field
            items:
              type: string
          imageTimeStampRangeEnd:
            type: string
            description: The latest timestamp to search for.
            format: date-time
          imageTimeStampRangeStart:
            type: string
            description: The earliest timestamp to search for.
            format: date-time
          imageWidthMax:
            type: integer
            description: A maximum image width to search for.
            example: 1920
          imageWidthMin:
            type: integer
            description: A minimum image width to search for.
            example: 1280
          mimeTypes:
            type: array
            description: A set of image file types to search for.
            example:
            - image/jpg
            - image/jpeg
            - image/gif
            items:
              pattern: image/.*
              type: string
          observationDbIds:
            type: array
            description: A list of observation Ids this image is associated with to search for
            example:
            - "47326456"
            - fc9823ac
            items:
              type: string
          observationUnitDbIds:
            type: array
            description: A set of observation unit identifiers to search for.
            example:
            - f5e4b273
            - 328c9424
            items:
              type: string
    Method:
      allOf:
      - $ref: '#/components/schemas/MethodBaseClass'
      - type: object
        properties:
          methodDbId:
            type: string
            description: Method unique identifier
            example: 0adb2764
    MethodBaseClass:
      type: object
      properties:
        additionalInfo:
          type: object
          additionalProperties:
            type: string
          description: Additional arbitrary info
        bibliographicalReference:
          type: string
          description: |-
            Bibliographical reference describing the method.

            MIAPPE V1.1 (DM-91) Reference associated to the method - URI/DOI of reference describing the method.
          example: Smith, 1893, Really Cool Paper, Popular Journal
        description:
          type: string
          description: |-
            Method description

            MIAPPE V1.1 (DM-90) Method description - Textual description of the method, which may extend a method defined in an external reference with specific parameters, e.g. growth stage, inoculation precise organ (leaf number)
          example: A measuring tape was used
        externalReferences:
          $ref: '#/components/schemas/ExternalReferences'
        formula:
          type: string
          description: For computational methods i.e., when the method consists in assessing the trait by computing measurements, write the generic formula used for the calculation
          example: a^2 + b^2 = c^2
        methodClass:
          type: string
          description: 'Method class (examples: "Measurement", "Counting", "Estimation", "Computation", etc.)'
          example: Measurement
        methodName:
          type: string
          description: |-
            Human readable name for the method

            MIAPPE V1.1 (DM-88) Method  Name of the method of observation
          example: Measuring Tape
        ontologyReference:
          $ref: '#/components/schemas/OntologyReference'
    MethodNewRequest:
      $ref: '#/components/schemas/MethodBaseClass'
    Observation:
      allOf:
      - $ref: '#/components/schemas/ObservationNewRequest'
      - type: object
        properties:
          observationDbId:
            type: string
            description: The ID which uniquely identifies an observation
            example: ef24b615
    ObservationNewRequest:
      type: object
      properties:
        additionalInfo:
          type: object
          additionalProperties:
            type: string
          description: Additional arbitrary info
        collector:
          type: string
          description: The name or identifier of the entity which collected the observation
          example: 917d3ae0
        externalReferences:
          $ref: '#/components/schemas/ExternalReferences'
        germplasmDbId:
          type: string
          description: The ID which uniquely identifies a germplasm
          example: 2408ab11
        germplasmName:
          type: string
          description: Name of the germplasm. It can be the preferred name and does not have to be unique.
          example: A0000003
        observationTimeStamp:
          type: string
          description: The date and time when this observation was made
          format: date-time
        observationUnitDbId:
          type: string
          description: The ID which uniquely identifies an observation unit
          example: 598111d4
        observationUnitName:
          type: string
          description: A human readable name for an observation unit
          example: Plot 1
        observationVariableDbId:
          type: string
          description: The ID which uniquely identifies an observation variable
          example: c403d107
        observationVariableName:
          type: string
          description: A human readable name for an observation variable
          example: Plant Height in meters
        season:
          $ref: '#/components/schemas/Season'
        studyDbId:
          type: string
          description: The ID which uniquely identifies a study within the given database server
          example: ef2829db
        uploadedBy:
          type: string
          description: The name or id of the user who uploaded the observation to the database system
          example: a2f7f60b
        value:
          type: string
          description: The value of the data collected as an observation
          example: "2.3"
    ObservationSearchRequest:
      allOf:
      - $ref: '#/components/schemas/SearchRequestParametersPaging'
      - $ref: '#/components/schemas/SearchRequestParametersPrograms'
      - $ref: '#/components/schemas/SearchRequestParametersTrials'
      - $ref: '#/components/schemas/SearchRequestParametersStudies'
      - $ref: '#/components/schemas/SearchRequestParametersGermplasm'
      - $ref: '#/components/schemas/SearchRequestParametersLocations'
      - $ref: '#/components/schemas/SearchRequestParametersObservationVariables'
      - $ref: '#/components/schemas/SearchRequestParametersExternalReferences'
      - type: object
        properties:
          observationDbIds:
            type: array
            description: The unique id of an Observation
            example:
            - 6a4a59d8
            - 3ff067e0
            items:
              type: string
          observationLevelRelationships:
            type: array
            description: Searches for values in ObservationUnit->observationUnitPosition->observationLevelRelationships
            example:
            - levelCode: Field_1
              levelName: field
            items:
              $ref: '#/components/schemas/ObservationUnitLevelRelationship'
          observationLevels:
            type: array
            description: Searches for values in ObservationUnit->observationUnitPosition->observationLevel
            example:
            - levelCode: Plot_123
              levelName: plot
            - levelCode: Plot_456
              levelName: plot
            - levelCode: Plot_789
              levelName: plot
            items:
              $ref: '#/components/schemas/ObservationUnitLevelRelationship'
          observationTimeStampRangeEnd:
            type: string
            description: Timestamp range end
            format: date-time
          observationTimeStampRangeStart:
            type: string
            description: Timestamp range start
            format: date-time
          observationUnitDbIds:
            type: array
            description: The unique id of an Observation Unit
            example:
            - 76f559b5
            - 066bc5d3
            items:
              type: string
          seasonDbIds:
            type: array
            description: The year or Phenotyping campaign of a multi-annual study (trees, grape, ...)
            example:
            - Spring 2018
            - Season A
            items:
              type: string
    ObservationTable:
      type: object
      properties:
        data:
          type: array
          description: Matrix of observation data recorded for different observation variables across different observation units
          example:
          - - 2019-09-10T18:13:27.223Z
            - f3a8a3db
            - Plant Alpha
            - 0fe3e48b
            - 2017 Plant Study
            - 06307ec0
            - A0043001
            - "76.50106681"
            - "42.44409301"
            - "2017"
            - Field_1
            - Plot_11
            - SubPlot_111
            - Plant_1111
            - Pot_1111
            - Block_11
            - Entry_11
            - Rep_11
            - "25.3"
            - ""
            - ""
            - ""
          - - 2019-09-10T18:14:27.223Z
            - f3a8a3db
            - Plant Alpha
            - 0fe3e48b
            - 2017 Plant Study
            - 06307ec0
            - A0043001
            - "76.50106681"
            - "42.44409301"
            - "2017"
            - Field_1
            - Plot_11
            - SubPlot_111
            - Plant_1111
            - Pot_1111
            - Block_11
            - Entry_11
            - Rep_11
            - ""
            - "3"
            - ""
            - ""
          - - 2019-09-10T18:15:54.868Z
            - 05d1b011
            - Plant Beta
            - 0fe3e48b
            - 2017 Plant Study
            - 59d435cd
            - A0043002
            - "76.50106683"
            - "42.44409301"
            - "2017"
            - Field_1
            - Plot_11
            - SubPlot_112
            - Plant_1122
            - Pot_1122
            - Block_11
            - Entry_11
            - Rep_12
            - "27.9"
            - ""
            - ""
            - ""
          - - 2019-09-10T18:16:54.868Z
            - 05d1b011
            - Plant Beta
            - 0fe3e48b
            - 2017 Plant Study
            - 59d435cd
            - A0043002
            - "76.50106683"
            - "42.44409301"
            - "2017"
            - Field_1
            - Plot_11
            - SubPlot_112
            - Plant_1122
            - Pot_1122
            - Block_11
            - Entry_11
            - Rep_12
            - ""
            - "1"
            - ""
            - ""
          - - 2019-09-10T18:17:34.433Z
            - 67e2d87c
            - Plant Gamma
            - 0fe3e48b
            - 2017 Plant Study
            - 06307ec0
            - A0043001
            - "76.50106681"
            - "42.44409356"
            - "2017"
            - Field_1
            - Plot_12
            - SubPlot_123
            - Plant_1233
            - Pot_1233
            - Block_12
            - Entry_12
            - Rep_11
            - ""
            - "3"
            - ""
            - ""
          - - 2019-09-10T18:18:34.433Z
            - 67e2d87c
            - Plant Gamma
            - 0fe3e48b
            - 2017 Plant Study
            - 06307ec0
            - A0043001
            - "76.50106681"
            - "42.44409356"
            - "2017"
            - Field_1
            - Plot_12
            - SubPlot_123
            - Plant_1233
            - Pot_1233
            - Block_12
            - Entry_12
            - Rep_11
            - "25.5"
            - ""
            - ""
            - ""
          - - 2019-09-10T18:19:15.629Z
            - d98d0d4c
            - Plant Epsilon
            - 0fe3e48b
            - 2017 Plant Study
            - 59d435cd
            - A0043002
            - "76.50106683"
            - "42.44409356"
            - "2017"
            - Field_1
            - Plot_12
            - SubPlot_124
            - Plant_1244
            - Pot_1244
            - Block_12
            - Entry_12
            - Rep_12
            - "28.9"
            - ""
            - ""
            - ""
          - - 2019-09-10T18:20:15.629Z
            - d98d0d4c
            - Plant Epsilon
            - 0fe3e48b
            - 2017 Plant Study
            - 59d435cd
            - A0043002
            - "76.50106683"
            - "42.44409356"
            - "2017"
            - Field_1
            - Plot_12
            - SubPlot_124
            - Plant_1244
            - Pot_1244
            - Block_12
            - Entry_12
            - Rep_12
            - ""
            - "0"
            - ""
            - ""
          items:
            type: array
            items:
              type: string
        headerRow:
          type: array
          description: "<p>The table is REQUIRED to have the following columns</p>\n<ul>\n  <li>observationUnitDbId - Each row is related to one Observation Unit</li>\n  <li>observationTimeStamp - Each row is has a time stamp for when the observation was taken</li>\n  <li>At least one column with an observationVariableDbId</li>\n</ul>\n<p>The table may have any or all of the following OPTIONAL columns. Included columns are decided by the server developer</p>\n<ul>\n  <li>observationUnitName</li>\n  <li>studyDbId</li>\n  <li>studyName</li>\n  <li>germplasmDbId</li>\n  <li>germplasmName</li>\n  <li>positionCoordinateX</li>\n  <li>positionCoordinateY</li>\n  <li>year</li>\n</ul>\n<p>The table also may have any number of Observation Unit Hierarchy Level columns. For example:</p>\n<ul>\n  <li>field</li>\n  <li>plot</li>\n  <li>sub-plot</li>\n  <li>plant</li>\n  <li>pot</li>\n  <li>block</li>\n  <li>entry</li>\n  <li>rep</li>\n</ul>\n<p>The JSON representation provides a pair of extra arrays for defining the headers of the table. \nThe first array \"headerRow\" will always contain \"observationUnitDbId\" and any or all of the OPTIONAL column header names. \nThe second array \"observationVariables\" contains the names and DbIds for the Observation Variables represented in the table. \nBy appending the two arrays, you can construct the complete header row of the table. </p>"
          example:
          - observationTimeStamp
          - observationUnitDbId
          - observationUnitName
          - studyDbId
          - studyName
          - germplasmDbId
          - germplasmName
          - positionCoordinateX
          - positionCoordinateY
          - year
          - field
          - plot
          - sub-plot
          - plant
          - pot
          - block
          - entry
          - rep
          items:
            type: string
            description: valid header fields
            enum:
            - observationTimeStamp
            - observationUnitDbId
            - observationUnitName
            - studyDbId
            - studyName
            - germplasmDbId
            - germplasmName
            - positionCoordinateX
            - positionCoordinateY
            - year
            - field
            - plot
            - sub-plot
            - plant
            - pot
            - block
            - entry
            - rep
        observationVariables:
          type: array
          description: The list of observation variables which have values recorded for them in the data matrix. Append to the 'headerRow' for complete header row of the table.
          example:
          - observationVariableDbId: 367aa1a9
            observationVariableName: Plant height
          - observationVariableDbId: 2acb934c
            observationVariableName: Carotenoid
          - observationVariableDbId: 85a21ce1
            observationVariableName: Root color
          - observationVariableDbId: 46f590e5
            observationVariableName: Virus severity
          items:
            $ref: '#/components/schemas/ObservationTable_observationVariables'
    ObservationTreatment:
      type: object
      properties:
        factor:
          type: string
          description: |-
            The type of treatment/factor. ex. 'fertilizer', 'inoculation', 'irrigation', etc

            MIAPPE V1.1 (DM-61) Experimental Factor type - Name/Acronym of the experimental factor.
          example: fertilizer
        modality:
          type: string
          description: "The treatment/factor description. ex. 'low fertilizer', 'yellow rust inoculation', 'high water', etc\n\nMIAPPE V1.1 (DM-62) Experimental Factor description - Free text description of the experimental factor. This includes all relevant treatments planned and protocol planned for all the plants targeted by a given experimental factor. "
          example: low fertilizer
    ObservationUnit:
      allOf:
      - $ref: '#/components/schemas/ObservationUnitNewRequest'
      - type: object
        properties:
          observationUnitDbId:
            type: string
            description: "The ID which uniquely identifies an observation unit\n\nMIAPPE V1.1 (DM-70) Observation unit ID - Identifier used to identify the observation unit in data files containing the values observed or measured on that unit. Must be locally unique. "
            example: 8c67503c
          observations:
            type: array
            description: "All observations attached to this observation unit. \n\nDefault for this field is null or omitted. Do NOT include data in this field unless the 'includeObservations' flag is explicitly set to True."
            items:
              $ref: '#/components/schemas/Observation'
    ObservationUnitHierarchyLevel:
      title: ObservationUnitHierarchyLevel
      type: object
      properties:
        levelName:
          type: string
          description: A name for this level
          example: plot
          enum:
          - study
          - field
          - entry
          - rep
          - block
          - sub-block
          - plot
          - sub-plot
          - plant
          - pot
          - sample
        levelOrder:
          type: integer
          description: '`levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`''s lower numbers are at the top of the hierarchy (ie field -> 1) and higher numbers are at the bottom of the hierarchy (ie plant -> 9).'
          example: 2
      description: 'Observation levels indicate the granularity level at which the measurements are taken. `levelName` defines the level, `levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`s lower numbers are at the top of the hierarchy (ie field > 0) and higher numbers are at the bottom of the hierarchy (ie plant > 6). '
    ObservationUnitLevelRelationship:
      allOf:
      - $ref: '#/components/schemas/ObservationUnitHierarchyLevel'
      - title: ObservationUnitLevelRelationship
        type: object
        properties:
          levelCode:
            type: string
            description: An ID code for this level tag. Identify this observation unit by each level of the hierarchy where it exists
            example: Plot_123
        description: "Observation levels indicate the granularity level at which the measurements are taken. \n\n`levelName` defines the level \n\n`levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`s lower numbers are at the top of the hierarchy (ie field > 0) and higher numbers are at the bottom of the hierarchy (ie plant > 6). \n\n`levelCode` is an ID code for this level tag. Identify this observation unit by each level of the hierarchy where it exists"
    ObservationUnitNewRequest:
      type: object
      properties:
        additionalInfo:
          type: object
          additionalProperties:
            type: string
          description: Additional arbitrary info
        externalReferences:
          $ref: '#/components/schemas/ExternalReferences'
        germplasmDbId:
          type: string
          description: The ID which uniquely identifies a germplasm
          example: e9d9ed57
        germplasmName:
          type: string
          description: Name of the germplasm. It can be the preferred name and does not have to be unique.
          example: A0000001
        locationDbId:
          type: string
          description: The ID which uniquely identifies a location, associated with this study
          example: 0e208b20
        locationName:
          type: string
          description: The human readable name of a location associated with this study
          example: Field Station Alpha
        observationUnitName:
          type: string
          description: A human readable name for an observation unit
          example: Plot 1
        observationUnitPUI:
          type: string
          description: |-
            A Permanent Unique Identifier for an observation unit

            MIAPPE V1.1 (DM-72) External ID - Identifier for the observation unit in a persistent repository, comprises the name of the repository and the identifier of the observation unit therein. The EBI Biosamples repository can be used. URI are recommended when possible.
          example: http://pui.per/plot/1a9afc14
        observationUnitPosition:
          $ref: '#/components/schemas/ObservationUnitPosition'
        programDbId:
          type: string
          description: The ID which uniquely identifies a program
          example: 2d763a7a
        programName:
          type: string
          description: The human readable name of a program
          example: The Perfect Breeding Program
        seedLotDbId:
          type: string
          description: The unique identifier for the originating Seed Lot
          example: 261ecb09
        studyDbId:
          type: string
          description: The ID which uniquely identifies a study within the given database server
          example: 9865addc
        studyName:
          type: string
          description: The human readable name for a study
          example: Purple_Tomato_1
        treatments:
          type: array
          description: |-
            List of treatments applied to an observation unit.

            MIAPPE V1.1 (DM-74) Observation Unit factor value - List of values for each factor applied to the observation unit.
          items:
            $ref: '#/components/schemas/ObservationTreatment'
        trialDbId:
          type: string
          description: The ID which uniquely identifies a trial
          example: 776a609c
        trialName:
          type: string
          description: The human readable name of a trial
          example: Purple Tomato
    ObservationUnitPosition:
      type: object
      properties:
        entryType:
          type: string
          description: The type of entry for this observation unit. ex. "CHECK", "TEST", "FILLER"
          example: TEST
          enum:
          - CHECK
          - TEST
          - FILLER
        geoCoordinates:
          $ref: '#/components/schemas/geoJSON'
        observationLevel:
          allOf:
          - $ref: '#/components/schemas/ObservationUnitLevelRelationship'
          - type: object
            properties: {}
            description: "The exact level and level code of an observation unit. \n\nMIAPPE V1.1 DM-71 Observation unit type \"Type of observation unit in textual form, usually one of the following: study, block, sub-block, plot, sub-plot, pot, plant. Use of other observation unit types is possible but not recommended. \nThe observation unit type can not be used to indicate sub-plant levels. However, observations can still be made on the sub-plant level, as long as the details are indicated in the associated observed variable (see observed variables).\nAlternatively, it is possible to use samples for more detailed tracing of sub-plant units, attaching the observations to them instead.\""
        observationLevelRelationships:
          type: array
          description: "Observation levels indicate the granularity level at which the measurements are taken. \n\n`levelName` defines the level \n\n`levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`s lower numbers are at the top of the hierarchy (ie field > 0) and higher numbers are at the bottom of the hierarchy (ie plant > 6). \n\n`levelCode` is an ID code for this level tag. Identify this observation unit by each level of the hierarchy where it exists"
          example:
          - levelCode: Field_1
            levelName: field
            levelOrder: 0
          - levelCode: Block_12
            levelName: block
            levelOrder: 1
          - levelCode: Plot_123
            levelName: plot
            levelOrder: 2
          items:
            $ref: '#/components/schemas/ObservationUnitLevelRelationship'
        positionCoordinateX:
          type: string
          description: The X position coordinate for an observation unit. Different systems may use different coordinate systems.
          example: "74"
        positionCoordinateXType:
          type: string
          description: "The type of positional coordinate used. Must be one of the following values\n\nLONGITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details\n\nLATITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details\n\nPLANTED_ROW - The physical planted row number \n\nPLANTED_INDIVIDUAL - The physical counted number, could be independant or within a planted row\n\nGRID_ROW - The row index number of a square grid overlay\n\nGRID_COL - The column index number of a square grid overlay\n\nMEASURED_ROW - The distance in meters from a defined 0-th row\n\nMEASURED_COL - The distance in meters from a defined 0-th column"
          example: GRID_COL
          enum:
          - LONGITUDE
          - LATITUDE
          - PLANTED_ROW
          - PLANTED_INDIVIDUAL
          - GRID_ROW
          - GRID_COL
          - MEASURED_ROW
          - MEASURED_COL
        positionCoordinateY:
          type: string
          description: The Y position coordinate for an observation unit. Different systems may use different coordinate systems.
          example: "03"
        positionCoordinateYType:
          type: string
          description: "The type of positional coordinate used. Must be one of the following values\n\nLONGITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details\n\nLATITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details\n\nPLANTED_ROW - The physical planted row number \n\nPLANTED_INDIVIDUAL - The physical counted number, could be independant or within a planted row\n\nGRID_ROW - The row index number of a square grid overlay\n\nGRID_COL - The column index number of a square grid overlay\n\nMEASURED_ROW - The distance in meters from a defined 0-th row\n\nMEASURED_COL - The distance in meters from a defined 0-th column"
          example: GRID_ROW
          enum:
          - LONGITUDE
          - LATITUDE
          - PLANTED_ROW
          - PLANTED_INDIVIDUAL
          - GRID_ROW
          - GRID_COL
          - MEASURED_ROW
          - MEASURED_COL
      description: |-
        All positional and layout information related to this Observation Unit

        MIAPPE V1.1 (DM-73) Spatial distribution - Type and value of a spatial coordinate (georeference or relative) or level of observation (plot 45, subblock 7, block 2) provided as a key-value pair of the form type:value. Levels of observation must be consistent with those listed in the Study section.
    ObservationUnitSearchRequest:
      allOf:
      - $ref: '#/components/schemas/SearchRequestParametersPaging'
      - $ref: '#/components/schemas/SearchRequestParametersPrograms'
      - $ref: '#/components/schemas/SearchRequestParametersTrials'
      - $ref: '#/components/schemas/SearchRequestParametersStudies'
      - $ref: '#/components/schemas/SearchRequestParametersLocations'
      - $ref: '#/components/schemas/SearchRequestParametersGermplasm'
      - $ref: '#/components/schemas/SearchRequestParametersObservationVariables'
      - $ref: '#/components/schemas/SearchRequestParametersExternalReferences'
      - type: object
        properties:
          includeObservations:
            type: boolean
            description: "Use this parameter to include a list of observations embedded in each ObservationUnit object. \n\nCAUTION - Use this parameter at your own risk. It may return large, unpaginated lists of observation data. Only set this value to True if you are sure you need to."
            example: false
          observationLevelRelationships:
            type: array
            description: Searches for values in ObservationUnit->observationUnitPosition->observationLevelRelationships
            example:
            - levelCode: Field_1
              levelName: field
            items:
              $ref: '#/components/schemas/ObservationUnitLevelRelationship'
          observationLevels:
            type: array
            description: Searches for values in ObservationUnit->observationUnitPosition->observationLevel
            example:
            - levelCode: Plot_123
              levelName: plot
            - levelCode: Plot_456
              levelName: plot
            - levelCode: Plot_789
              levelName: plot
            items:
              $ref: '#/components/schemas/ObservationUnitLevelRelationship'
          observationUnitDbIds:
            type: array
            description: The unique id of an observation unit
            example:
            - 66bab7e3
            - 0e5e7f99
            items:
              type: string
    ObservationUnitTable:
      type: object
      properties:
        data:
          type: array
          description: Matrix of observation data recorded for different observation variables across different observation units
          example:
          - - f3a8a3db
            - Plant Alpha
            - 0fe3e48b
            - 2017 Plant Study
            - 06307ec0
            - A0043001
            - "76.50106681"
            - "42.44409301"
            - "2017"
            - Field_1
            - Plot_11
            - SubPlot_111
            - Plant_1111
            - Pot_1111
            - Block_11
            - Entry_11
            - Rep_11
            - "25.3"
            - "3"
            - "50.75"
          - - 05d1b011
            - Plant Beta
            - 0fe3e48b
            - 2017 Plant Study
            - 59d435cd
            - A0043002
            - "76.50106683"
            - "42.44409301"
            - "2017"
            - Field_1
            - Plot_11
            - SubPlot_112
            - Plant_1122
            - Pot_1122
            - Block_11
            - Entry_11
            - Rep_12
            - "27.9"
            - "1"
            - "45.345"
          - - 67e2d87c
            - Plant Gamma
            - 0fe3e48b
            - 2017 Plant Study
            - 06307ec0
            - A0043001
            - "76.50106681"
            - "42.44409356"
            - "2017"
            - Field_1
            - Plot_12
            - SubPlot_123
            - Plant_1233
            - Pot_1233
            - Block_12
            - Entry_12
            - Rep_11
            - "25.5"
            - "3"
            - "50.76"
          - - d98d0d4c
            - Plant Epsilon
            - 0fe3e48b
            - 2017 Plant Study
            - 59d435cd
            - A0043002
            - "76.50106683"
            - "42.44409356"
            - "2017"
            - Field_1
            - Plot_12
            - SubPlot_124
            - Plant_1244
            - Pot_1244
            - Block_12
            - Entry_12
            - Rep_12
            - "28.9"
            - "0"
            - "46.5"
          items:
            type: array
            items:
              type: string
        headerRow:
          type: array
          description: "<p>The table is REQUIRED to have the following columns</p>\n<ul>\n  <li>observationUnitDbId - Each row is related to one Observation Unit</li>\n  <li>At least one column with an observationVariableDbId</li>\n</ul>\n<p>The table may have any or all of the following OPTIONAL columns. Included columns are decided by the server developer</p>\n<ul>\n  <li>observationUnitName</li>\n  <li>studyDbId</li>\n  <li>studyName</li>\n  <li>germplasmDbId</li>\n  <li>germplasmName</li>\n  <li>positionCoordinateX</li>\n  <li>positionCoordinateY</li>\n  <li>year</li>\n</ul>\n<p>The table also may have any number of Observation Unit Hierarchy Level columns. For example:</p>\n<ul>\n  <li>field</li>\n  <li>plot</li>\n  <li>sub-plot</li>\n  <li>plant</li>\n  <li>pot</li>\n  <li>block</li>\n  <li>entry</li>\n  <li>rep</li>\n</ul>\n<p>The JSON representation provides a pair of extra arrays for defining the headers of the table. \nThe first array \"headerRow\" will always contain \"observationUnitDbId\" and any or all of the OPTIONAL column header names. \nThe second array \"observationVariables\" contains the names and DbIds for the Observation Variables represented in the table. \nBy appending the two arrays, you can construct the complete header row of the table. </p>"
          example:
          - observationUnitDbId
          - observationUnitName
          - studyDbId
          - studyName
          - germplasmDbId
          - germplasmName
          - positionCoordinateX
          - positionCoordinateY
          - year
          - field
          - plot
          - sub-plot
          - plant
          - pot
          - block
          - entry
          - rep
          items:
            type: string
            description: valid header fields
            enum:
            - observationUnitDbId
            - observationUnitName
            - studyDbId
            - studyName
            - germplasmDbId
            - germplasmName
            - positionCoordinateX
            - positionCoordinateY
            - year
            - field
            - plot
            - sub-plot
            - plant
            - pot
            - block
            - entry
            - rep
        observationVariables:
          type: array
          description: The list of observation variables which have values recorded for them in the data matrix. Append to the 'headerRow' for complete header row of the table.
          example:
          - observationVariableDbId: 367aa1a9
            observationVariableName: Plant height
          - observationVariableDbId: 2acb934c
            observationVariableName: Carotenoid
          - observationVariableDbId: 85a21ce1
            observationVariableName: Root color
          - observationVariableDbId: 46f590e5
            observationVariableName: Virus severity
          items:
            $ref: '#/components/schemas/ObservationTable_observationVariables'
    ObservationVariable:
      allOf:
      - $ref: '#/components/schemas/VariableBaseClass'
      - required:
        - observationVariableDbId
        - observationVariableName
        type: object
        properties:
          observationVariableDbId:
            type: string
            description: |-
              Variable unique identifier

              MIAPPE V1.1 (DM-83) Variable ID - Code used to identify the variable in the data file. We recommend using a variable definition from the Crop Ontology where possible. Otherwise, the Crop Ontology naming convention is recommended: <trait abbreviation>_<method abbreviation>_<scale abbreviation>). A variable ID must be unique within a given investigation.
            example: b9b7edd1
          observationVariableName:
            type: string
            description: |-
              Variable name (usually a short name)

              MIAPPE V1.1 (DM-84) Variable name - Name of the variable.
            example: Variable Name
    ObservationVariableNewRequest:
      allOf:
      - $ref: '#/components/schemas/VariableBaseClass'
      - required:
        - observationVariableName
        type: object
        properties:
          observationVariableName:
            type: string
            description: Variable name (usually a short name)
            example: Variable Name
    ObservationVariableSearchRequest:
      allOf:
      - $ref: '#/components/schemas/SearchRequestParametersPaging'
      - $ref: '#/components/schemas/SearchRequestParametersExternalReferences'
      - type: object
        properties:
          dataTypes:
            type: array
            description: List of scale data types to filter search results
            example:
            - Numerical
            - Ordinal
            - Text
            items:
              $ref: '#/components/schemas/TraitDataType'
          methodDbIds:
            type: array
            description: List of methods to filter search results
            example:
            - 07e34f83
            - d3d5517a
            items:
              type: string
          observationVariableDbIds:
            type: array
            description: List of observation variable IDs to search for
            example:
            - 2ef15c9f
            - 318e7f7d
            items:
              type: string
          observationVariableNames:
            type: array
            description: List of human readable observation variable names to search for
            example:
            - Plant Height 1
            - Root Color
            items:
              type: string
          ontologyDbIds:
            type: array
            description: List of ontology IDs to search for
            example:
            - f44f7b23
            - a26b576e
            items:
              type: string
          scaleDbIds:
            type: array
            description: List of scales to filter search results
            example:
            - a13ecffa
            - 7e1afe4f
            items:
              type: string
          studyDbId:
            type: array
            description: The unique ID of a studies to filter on
            example:
            - 5bcac0ae
            - 7f48e22d
            items:
              type: string
          traitClasses:
            type: array
            description: List of trait classes to filter search results
            example:
            - morphological
            - phenological
            - agronomical
            items:
              type: string
          traitDbIds:
            type: array
            description: List of trait unique ID to filter search results
            example:
            - ef81147b
            - 78d82fad
            items:
              type: string
    Ontology:
      required:
      - ontologyDbId
      - ontologyName
      type: object
      properties:
        additionalInfo:
          type: object
          additionalProperties:
            type: string
          description: Additional arbitrary info
        authors:
          type: string
          description: Ontology's list of authors (no specific format)
          example: Bob Robertson, Rob Robertson
        copyright:
          type: string
          description: Ontology copyright
          example: Copyright 1987, Bob Robertson
        description:
          type: string
          description: Human readable description of Ontology
          example: This is an example ontology that does not exist
        documentationURL:
          type: string
          description: A URL to the human readable documentation of this object
          format: uri
          example: https://wiki.brapi.org/ontology
        licence:
          type: string
          description: Ontology licence
          example: MIT Open source licence
        ontologyDbId:
          type: string
          description: Ontology database unique identifier
          example: 18e186cd
        ontologyName:
          type: string
          description: Ontology name
          example: The Official Ontology
        version:
          type: string
          description: Ontology version (no specific format)
          example: V1.3.2
    OntologyReference:
      required:
      - ontologyDbId
      - ontologyName
      type: object
      properties:
        documentationLinks:
          type: array
          description: links to various ontology documentation
          items:
            $ref: '#/components/schemas/OntologyReference_documentationLinks'
        ontologyDbId:
          type: string
          description: Ontology database unique identifier
          example: 6b071868
        ontologyName:
          type: string
          description: Ontology name
          example: The Crop Ontology
        version:
          type: string
          description: Ontology version (no specific format)
          example: 7.2.3
      description: |-
        MIAPPE V1.1

        (DM-85) Variable accession number - Accession number of the variable in the Crop Ontology

        (DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).

        (DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).

        (DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology).
    Scale:
      allOf:
      - $ref: '#/components/schemas/ScaleBaseClass'
      - required:
        - scaleDbId
        type: object
        properties:
          scaleDbId:
            type: string
            description: Unique identifier of the scale. If left blank, the upload system will automatically generate a scale ID.
            example: af730171
        description: Scale metadata
    ScaleBaseClass:
      required:
      - scaleName
      type: object
      properties:
        additionalInfo:
          type: object
          additionalProperties:
            type: string
          description: Additional arbitrary info
        dataType:
          $ref: '#/components/schemas/TraitDataType'
        decimalPlaces:
          type: integer
          description: For numerical, number of decimal places to be reported
          example: 2
        externalReferences:
          $ref: '#/components/schemas/ExternalReferences'
        ontologyReference:
          $ref: '#/components/schemas/OntologyReference'
        scaleName:
          type: string
          description: |-
            Name of the scale

            MIAPPE V1.1 (DM-92) Scale Name of the scale associated with the variable
          example: Meters
        validValues:
          $ref: '#/components/schemas/ScaleBaseClass_validValues'
      description: Scale metadata
    ScaleNewRequest:
      $ref: '#/components/schemas/ScaleBaseClass'
    SearchRequestParametersCommonCropNames:
      type: object
      properties:
        commonCropNames:
          type: array
          description: Common name for the crop which this program is for
          example:
          - Tomatillo
          - Paw Paw
          items:
            type: string
    SearchRequestParametersExternalReferences:
      type: object
      properties:
        externalReferenceIDs:
          type: array
          description: List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)
          example:
          - http://purl.obolibrary.org/obo/ro.owl
          - 14a19841
          items:
            type: string
        externalReferenceSources:
          type: array
          description: List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)
          example:
          - OBO Library
          - Field App Name
          items:
            type: string
    SearchRequestParametersGermplasm:
      type: object
      properties:
        germplasmDbIds:
          type: array
          description: List of IDs which uniquely identify germplasm to search for
          example:
          - e9c6edd7
          - 1b1df4a6
          items:
            type: string
        germplasmNames:
          type: array
          description: List of human readable names to identify germplasm to search for
          example:
          - A0000003
          - A0000477
          items:
            type: string
    SearchRequestParametersLocations:
      type: object
      properties:
        locationDbIds:
          type: array
          description: The location ids to search for
          example:
          - b28911cf
          - 5071d1e4
          items:
            type: string
        locationNames:
          type: array
          description: A human readable names to search for
          example:
          - Location Alpha
          - The Large Hadron Collider
          items:
            type: string
    SearchRequestParametersObservationVariables:
      type: object
      properties:
        observationVariableDbIds:
          type: array
          description: The DbIds of Variables to search for
          example:
          - a646187d
          - 6d23513b
          items:
            type: string
        observationVariableNames:
          type: array
          description: The names of Variables to search for
          example:
          - Plant Height in meters
          - Wheat rust score 1-5
          items:
            type: string
    SearchRequestParametersPaging:
      type: object
      properties:
        page:
          type: integer
          description: Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
          example: 0
        pageSize:
          type: integer
          description: The size of the pages to be returned. Default is `1000`.
          example: 1000
    SearchRequestParametersPrograms:
      type: object
      properties:
        programDbIds:
          type: array
          description: A program identifier to search for
          example:
          - 8f5de35b
          - 0e2d4a13
          items:
            type: string
        programNames:
          type: array
          description: A name of a program to search for
          example:
          - Better Breeding Program
          - Best Breeding Program
          items:
            type: string
    SearchRequestParametersStudies:
      type: object
      properties:
        studyDbIds:
          type: array
          description: List of study identifiers to search for
          example:
          - cf6c4bd4
          - 691e69d6
          items:
            type: string
        studyNames:
          type: array
          description: List of study names to filter search results
          example:
          - The First Bob Study 2017
          - Wheat Yield Trial 246
          items:
            type: string
    SearchRequestParametersTokenPaging:
      type: object
      properties:
        pageSize:
          type: integer
          description: The size of the pages to be returned. Default is `1000`.
          example: 1000
        pageToken:
          type: string
          description: "Used to request a specific page of data to be returned.\n\nTokenized pages are for large data sets which can not be efficiently broken into indexed pages. Use the nextPageToken and prevPageToken from a prior response to construct a query and move to the next or previous page respectively. "
          example: 33c27874
    SearchRequestParametersTrials:
      type: object
      properties:
        trialDbIds:
          type: array
          description: The ID which uniquely identifies a trial to search for
          example:
          - d2593dc2
          - 9431a731
          items:
            type: string
        trialNames:
          type: array
          description: The human readable name of a trial to search for
          example:
          - All Yield Trials 2016
          - Disease Resistance Study Comparison Group
          items:
            type: string
    Season:
      required:
      - seasonDbId
      type: object
      properties:
        season:
          type: string
          description: Name of the season. ex. 'Spring', 'Q2', 'Season A', etc.
          example: Spring
        seasonDbId:
          type: string
          description: The ID which uniquely identifies a season. For backward compatibility it can be a string like '2012', '1957-2004'
          example: Spring_2018
        year:
          type: integer
          description: The 4 digit year of the season.
          example: 2018
    Trait:
      allOf:
      - $ref: '#/components/schemas/TraitBaseClass'
      - type: object
        properties:
          traitDbId:
            type: string
            description: The ID which uniquely identifies a trait
            example: 9b2e34f5
    TraitBaseClass:
      type: object
      properties:
        additionalInfo:
          type: object
          additionalProperties:
            type: string
          description: Additional arbitrary info
        alternativeAbbreviations:
          type: array
          description: Other frequent abbreviations of the trait, if any. These abbreviations do not have to follow a convention
          example:
          - H
          - PH
          - H1
          items:
            type: string
        attribute:
          type: string
          description: A trait can be decomposed as "Trait" = "Entity" + "Attribute", the attribute is the observed feature (or characteristic) of the entity e.g., for "grain colour", attribute = "colour"
          example: height
        entity:
          type: string
          description: A trait can be decomposed as "Trait" = "Entity" + "Attribute", the entity is the part of the plant that the trait refers to e.g., for "grain colour", entity = "grain"
          example: Stalk
        externalReferences:
          $ref: '#/components/schemas/ExternalReferences'
        mainAbbreviation:
          type: string
          description: 'Main abbreviation for trait name. (examples: "Carotenoid content" => "CC")'
          example: PH
        ontologyReference:
          $ref: '#/components/schemas/OntologyReference'
        status:
          type: string
          description: 'Trait status (examples: "recommended", "obsolete", "legacy", etc.)'
          example: recommended
        synonyms:
          type: array
          description: Other trait names
          example:
          - Height
          - Plant Height
          - Stalk Height
          - Canopy Height
          items:
            type: string
        traitClass:
          type: string
          description: 'Trait class. (examples: "morphological", "phenological", "agronomical", "physiological", "abiotic stress", "biotic stress", "biochemical", "quality traits", "fertility", etc.)'
          example: phenological
        traitDescription:
          type: string
          description: The description of a trait
          example: The height of the plant
        traitName:
          type: string
          description: |-
            The human readable name of a trait

            MIAPPE V1.1 (DM-86) Trait - Name of the (plant or environmental) trait under observation
          example: Height
    TraitDataType:
      type: string
      description: |-
        <p>Class of the scale, entries can be</p>
        <p>"Code" -  This scale class is exceptionally used to express complex traits. Code is a nominal scale that combines the expressions of the different traits composing the complex trait. For example a severity trait might be expressed by a 2 digit and 2 character code. The first 2 digits are the percentage of the plant covered by a fungus and the 2 characters refer to the delay in development, e.g. "75VD" means "75 %" of the plant is infected and the plant is very delayed.</p>
        <p>"Date" - The date class is for events expressed in a time format, See ISO 8601</p>
        <p>"Duration" - The Duration class is for time elapsed between two events expressed in a time format, e.g. days, hours, months</p>
        <p>"Nominal" - Categorical scale that can take one of a limited and fixed number of categories. There is no intrinsic ordering to the categories</p>
        <p>"Numerical" - Numerical scales express the trait with real numbers. The numerical scale defines the unit e.g. centimeter, ton per hectare, branches</p>
        <p>"Ordinal" - Ordinal scales are scales composed of ordered categories</p>
        <p>"Text" - A free text is used to express the trait.</p>
      example: Numerical
      enum:
      - Code
      - Date
      - Duration
      - Nominal
      - Numerical
      - Ordinal
      - Text
    TraitNewRequest:
      $ref: '#/components/schemas/TraitBaseClass'
    VariableBaseClass:
      required:
      - method
      - scale
      - trait
      type: object
      properties:
        additionalInfo:
          type: object
          additionalProperties:
            type: string
          description: Additional arbitrary info
        commonCropName:
          type: string
          description: 'Crop name (examples: "Maize", "Wheat")'
          example: Maize
        contextOfUse:
          type: array
          description: 'Indication of how trait is routinely used. (examples: ["Trial evaluation", "Nursery evaluation"])'
          example:
          - Trial evaluation
          - Nursery evaluation
          items:
            type: string
        defaultValue:
          type: string
          description: 'Variable default value. (examples: "red", "2.3", etc.)'
          example: "2.0"
        documentationURL:
          type: string
          description: A URL to the human readable documentation of this object
          format: uri
          example: https://wiki.brapi.org/documentation.html
        externalReferences:
          $ref: '#/components/schemas/ExternalReferences'
        growthStage:
          type: string
          description: 'Growth stage at which measurement is made (examples: "flowering")'
          example: flowering
        institution:
          type: string
          description: Name of institution submitting the variable
          example: The BrAPI Institute
        language:
          type: string
          description: 2 letter ISO 639-1 code for the language of submission of the variable.
          example: en
        method:
          allOf:
          - $ref: '#/components/schemas/MethodBaseClass'
          - type: object
            properties:
              methodDbId:
                type: string
                description: Method unique identifier
                example: 0adb2764
        ontologyReference:
          $ref: '#/components/schemas/OntologyReference'
        scale:
          allOf:
          - $ref: '#/components/schemas/ScaleBaseClass'
          - required:
            - scaleDbId
            type: object
            properties:
              scaleDbId:
                type: string
                description: Unique identifier of the scale. If left blank, the upload system will automatically generate a scale ID.
                example: af730171
            description: Scale metadata
        scientist:
          type: string
          description: Name of scientist submitting the variable.
          example: Dr. Bob Robertson
        status:
          type: string
          description: 'Variable status. (examples: "recommended", "obsolete", "legacy", etc.)'
          example: recommended
        submissionTimestamp:
          type: string
          description: Timestamp when the Variable was added (ISO 8601)
          format: date-time
        synonyms:
          type: array
          description: Other variable names
          example:
          - Maize Height
          - Stalk Height
          - Corn Height
          items:
            type: string
        trait:
          allOf:
          - $ref: '#/components/schemas/TraitBaseClass'
          - type: object
            properties:
              traitDbId:
                type: string
                description: The ID which uniquely identifies a trait
                example: 9b2e34f5
    WSMIMEDataTypes:
      type: string
      enum:
      - application/json
      - text/csv
      - text/tsv
      - application/flapjack
    basePagination:
      required:
      - pageSize
      type: object
      properties:
        pageSize:
          type: integer
          description: The number of data elements returned, aka the size of the current page. If the requested page does not have enough elements to fill a page at the requested page size, this field should indicate the actual number of elements returned.
          example: 1000
          default: 1000
        totalCount:
          type: integer
          description: The total number of elements that are available on the server and match the requested query parameters.
          example: 10
        totalPages:
          type: integer
          description: "The total number of pages of elements available on the server. This should be calculated with the following formula. \n\ntotalPages = CEILING( totalCount / requested_page_size)"
          example: 1
    dataFile:
      required:
      - fileURL
      type: object
      properties:
        fileDescription:
          type: string
          description: A human readable description of the file contents
          example: This is an Excel data file
        fileMD5Hash:
          type: string
          description: The MD5 Hash of the file contents to be used as a check sum
          example: c2365e900c81a89cf74d83dab60df146
        fileName:
          type: string
          description: The name of the file
          example: datafile.xlsx
        fileSize:
          type: integer
          description: The size of the file in bytes
          example: 4398
        fileType:
          type: string
          description: The type or format of the file. Preferably MIME Type.
          example: application/vnd.ms-excel
        fileURL:
          type: string
          description: The absolute URL where the file is located
          format: uri
          example: https://wiki.brapi.org/examples/datafile.xlsx
      description: A dataFile contains a URL and the relevant file metadata to represent a file
    geoJSON:
      title: GeoJSON
      type: object
      properties:
        geometry:
          title: GeoJSON Geometry
          type: object
          description: A geometry as defined by GeoJSON (RFC 7946). In this context, only Point or Polygon geometry are allowed.
          example:
            coordinates:
            - -76.506042
            - 42.417373
            - 123
            type: Point
          discriminator:
            propertyName: type
            mapping:
              Point: '#/components/schemas/pointGeometry'
              Polygon: '#/components/schemas/polygonGeometry'
          oneOf:
          - $ref: '#/components/schemas/pointGeometry'
          - $ref: '#/components/schemas/polygonGeometry'
        type:
          type: string
          description: The literal string "Feature"
          example: Feature
          default: Feature
      description: |-
        One geometry as defined by GeoJSON (RFC 7946). All coordinates are decimal values on the WGS84 geographic coordinate reference system.

        Copied from RFC 7946 Section 3.1.1

        A position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or
        easting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.
    geoJSONSearchArea:
      allOf:
      - $ref: '#/components/schemas/geoJSON'
      - title: GeoJSONSearchArea
        type: object
        properties: {}
        description: "A GeoJSON Polygon which describes an area to search for other GeoJSON objects. All contained Points and intersecting Polygons should be returned as search results. \n\nAll coordinates are decimal values on the WGS84 geographic coordinate reference system."
        example:
          geometry:
            coordinates:
            - - - -77.456654
                - 42.241133
              - - -75.414133
                - 41.508282
              - - -76.506042
                - 42.417373
              - - -77.456654
                - 42.241133
            type: Polygon
          type: Feature
    indexPagination:
      allOf:
      - $ref: '#/components/schemas/basePagination'
      - required:
        - currentPage
        type: object
        properties:
          currentPage:
            type: integer
            description: The index number for the returned page of data. This should always match the requested page number or the default page (0).
            example: 0
            default: 0
        description: "The pagination object is applicable only when the payload contains a \"data\" key. It describes the pagination of the data contained in the \"data\" array, as a way to identify which subset of data is being returned. \n\nPages are zero indexed, so the first page will be page 0 (zero)."
    linearRing:
      minItems: 4
      type: array
      description: An array of at least four positions where the first equals the last
      example:
      - - -77.456654
        - 42.241133
        - 494
      - - -75.414133
        - 41.508282
        - 571
      - - -76.506042
        - 42.417373
        - 123
      - - -77.456654
        - 42.241133
        - 346
      items:
        $ref: '#/components/schemas/position'
    metadata:
      allOf:
      - $ref: '#/components/schemas/metadataBase'
      - type: object
        properties:
          pagination:
            $ref: '#/components/schemas/indexPagination'
    metadataBase:
      type: object
      properties:
        datafiles:
          type: array
          description: "The datafiles contains a list of file URLs and metadata. \nThese files contain additional information related to the returned object and can be retrieved by a subsequent call. \nThis could be a supplementary data file, an informational file, the uploaded file where the data originated from, a generated file representing the whole dataset in a particular format, or any other related file. "
          items:
            $ref: '#/components/schemas/dataFile'
        status:
          type: array
          description: "The status field contains a list of informational status messages from the server. \nIf no status is reported, an empty list should be returned. See Error Reporting for more information."
          items:
            $ref: '#/components/schemas/status'
    metadataTokenPagination:
      allOf:
      - $ref: '#/components/schemas/metadataBase'
      - type: object
        properties:
          pagination:
            $ref: '#/components/schemas/tokenPagination'
    pointGeometry:
      type: object
      properties:
        coordinates:
          $ref: '#/components/schemas/position'
        type:
          type: string
          description: The literal string "Point"
          example: Point
          default: Point
      description: |-
        Copied from RFC 7946 Section 3.1.1

        A position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or
        easting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.
    polygon:
      type: array
      description: An array of linear rings
      example:
      - - - -77.456654
          - 42.241133
          - 494
        - - -75.414133
          - 41.508282
          - 571
        - - -76.506042
          - 42.417373
          - 123
        - - -77.456654
          - 42.241133
          - 346
      items:
        $ref: '#/components/schemas/linearRing'
    polygonGeometry:
      type: object
      properties:
        coordinates:
          $ref: '#/components/schemas/polygon'
        type:
          type: string
          description: The literal string "Polygon"
          example: Polygon
          default: Polygon
      description: "An array of Linear Rings. Each Linear Ring is an array of Points. \n\nA Point is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element."
    position:
      minItems: 2
      type: array
      description: A single position
      example:
      - -76.506042
      - 42.417373
      - 123
      items:
        type: number
    status:
      required:
      - message
      - messageType
      type: object
      properties:
        message:
          type: string
          description: A short message concerning the status of this request/response
          example: Request accepted, response successful
        messageType:
          type: string
          description: The logging level for the attached message
          example: INFO
          enum:
          - DEBUG
          - ERROR
          - WARNING
          - INFO
      description: An array of status messages to convey technical logging information from the server to the client.
    tokenPagination:
      allOf:
      - $ref: '#/components/schemas/basePagination'
      - required:
        - nextPageToken
        type: object
        properties:
          currentPageToken:
            type: string
            description: The string token used to query the current page of data.
            example: 48bc6ac1
          nextPageToken:
            type: string
            description: The string token used to query the next page of data.
            example: cb668f63
          prevPageToken:
            type: string
            description: The string token used to query the previous page of data.
            example: 9659857e
        description: "The pagination object is applicable only when the payload contains a \"data\" key. It describes the pagination of the data contained in the \"data\" array, as a way to identify which subset of data is being returned. \n\nTokenized pages are for large data sets which can not be efficiently broken into indexed pages. Use the nextPageToken and prevPageToken to construct an additional query and move to the next or previous page respectively.  "
    eventsResponse:
      title: eventsResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/eventsResponse_result'
    ImageListResponse:
      title: ImageListResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/ImageListResponse_result'
    ImageSingleResponse:
      title: ImageSingleResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/Image'
    MethodListResponse:
      title: MethodListResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/MethodListResponse_result'
    MethodSingleResponse:
      title: MethodSingleResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/Method'
    ObservationLevelListResponse:
      title: ObservationLevelListResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/ObservationLevelListResponse_result'
    ObservationListResponse:
      title: ObservationListResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/ObservationListResponse_result'
    ObservationTableResponse:
      title: ObservationTableResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/ObservationTable'
    ObservationSingleResponse:
      title: ObservationSingleResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/Observation'
    ObservationUnitListResponse:
      title: ObservationUnitListResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/ObservationUnitListResponse_result'
    ObservationUnitTableResponse:
      title: ObservationUnitTableResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/ObservationUnitTable'
    ObservationUnitSingleResponse:
      title: ObservationUnitSingleResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/ObservationUnit'
    OntologyListResponse:
      title: OntologyListResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/OntologyListResponse_result'
    ScaleListResponse:
      title: ScaleListResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/ScaleListResponse_result'
    ScaleSingleResponse:
      title: ScaleSingleResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/Scale'
    "202AcceptedSearchResponse":
      title: 202AcceptedSearchResponse
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/202AcceptedSearchResponse_result'
    ObservationVariableListResponse:
      title: ObservationVariableListResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/ObservationVariableListResponse_result'
    TraitListResponse:
      title: TraitListResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/TraitListResponse_result'
    TraitSingleResponse:
      title: TraitSingleResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/Trait'
    ObservationVariableSingleResponse:
      title: ObservationVariableSingleResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/ObservationVariable'
    Event_eventParameters:
      type: object
      properties:
        key:
          type: string
          description: Specifies the relationship between the event and the given property. E.g. fertilizer, operator
          example: operator
        rdfValue:
          type: string
          description: The type of the value given above, e.g. http://xmlns.com/foaf/0.1/Agent
          example: http://xmlns.com/foaf/0.1/Agent
        value:
          type: string
          description: The value of the property for this event. E.g. nitrogen, John Doe
          example: Bob Robertson
    ExternalReferences_inner:
      type: object
      properties:
        referenceID:
          type: string
          description: The external reference ID. Could be a simple string or a URI.
        referenceSource:
          type: string
          description: An identifier for the source system or database of this reference
    ObservationTable_observationVariables:
      type: object
      properties:
        observationVariableDbId:
          type: string
          description: Variable unique identifier
          example: 367aa1a9
        observationVariableName:
          type: string
          description: Variable name (usually a short name)
          example: Plant height
    OntologyReference_documentationLinks:
      type: object
      properties:
        URL:
          type: string
          format: uri
          example: http://purl.obolibrary.org/obo/ro.owl
        type:
          type: string
          example: OBO
          enum:
          - OBO
          - RDF
          - WEBPAGE
    ScaleBaseClass_validValues_categories:
      type: object
      properties:
        label:
          type: string
          description: A text label for a category
        value:
          type: string
          description: The actual value for a category
    ScaleBaseClass_validValues:
      type: object
      properties:
        categories:
          type: array
          description: List of possible values with optional labels
          example:
          - label: low
            value: "0"
          - label: medium
            value: "5"
          - label: high
            value: "10"
          items:
            $ref: '#/components/schemas/ScaleBaseClass_validValues_categories'
        max:
          type: integer
          description: Maximum value (used for field data capture control).
          example: 9999
        min:
          type: integer
          description: Minimum value (used for data capture control) for numerical and date scales
          example: 2
    eventsResponse_result:
      required:
      - data
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Event'
    ImageListResponse_result:
      required:
      - data
      type: object
      properties:
        data:
          type: array
          description: Array of image meta data
          items:
            $ref: '#/components/schemas/Image'
    MethodListResponse_result:
      required:
      - data
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Method'
    ObservationLevelListResponse_result:
      required:
      - data
      type: object
      properties:
        data:
          type: array
          example:
          - levelName: field
            levelOrder: 0
          - levelName: block
            levelOrder: 1
          - levelName: plot
            levelOrder: 2
          - levelName: sub-plot
            levelOrder: 3
          - levelName: plant
            levelOrder: 4
          items:
            $ref: '#/components/schemas/ObservationUnitHierarchyLevel'
    ObservationListResponse_result:
      required:
      - data
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Observation'
    ObservationUnitListResponse_result:
      required:
      - data
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ObservationUnit'
    OntologyListResponse_result:
      required:
      - data
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Ontology'
    ScaleListResponse_result:
      required:
      - data
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Scale'
    "202AcceptedSearchResponse_result":
      type: object
      properties:
        searchResultsDbId:
          type: string
          example: 551ae08c
    ObservationVariableListResponse_result:
      required:
      - data
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ObservationVariable'
    TraitListResponse_result:
      required:
      - data
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Trait'
  responses:
    "202AcceptedSearchResponse":
      description: Accepted
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/202AcceptedSearchResponse'
    "400BadRequest":
      description: Bad Request
      content:
        application/json:
          schema:
            type: string
          example: |-
            ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

            ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

            ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
    "401Unauthorized":
      description: Unauthorized
      content:
        application/json:
          schema:
            type: string
          example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
    "403Forbidden":
      description: Forbidden
      content:
        application/json:
          schema:
            type: string
          example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
    "404NotFound":
      description: Not Found
      content:
        application/json:
          schema:
            type: string
          example: ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found
    ImageListResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ImageListResponse'
    ImageSingleResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ImageSingleResponse'
    MethodListResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MethodListResponse'
    MethodSingleResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MethodSingleResponse'
    ObservationListResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ObservationListResponse'
    ObservationSingleResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ObservationSingleResponse'
    ObservationTableResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ObservationTableResponse'
        text/csv:
          schema:
            type: string
          example: "\"observationUnitDbId\",\"observationUnitName\",\"studyDbId\",\"studyName\",\"germplasmDbId\",\"germplasmName\",\"positionCoordinateX\",\"positionCoordinateY\",\"year\",\"field\",\"plot\",\"sub-plot\",\"plant\",\"pot\",\"block\",\"entry\",\"rep\",\"f959a77d\",\"8341dee0\",\"84c9fd86\",\"93d80c95\"\n\n\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"Plant height\",\"Carotenoid\",\"Root color\",\"Virus severity\"\n      \n\"2019-09-10T18:13:27.223Z\",\"f3a8a3db\",\"Plant Alpha\",  \"0fe3e48b\",\"2017 Plant Study\",\"06307ec0\",\"A0043001\",\"76.50106681\",\"42.44409301\",\"2017\",\"Field_1\",\"Plot_11\",\"SubPlot_111\",\"Plant_1111\",\"Pot_1111\",\"Block_11\",\"Entry_11\",\"Rep_11\",\"25.3\",\"\", \"\",\"\"\n\n\"2019-09-10T18:14:27.223Z\",\"f3a8a3db\",\"Plant Alpha\",  \"0fe3e48b\",\"2017 Plant Study\",\"06307ec0\",\"A0043001\",\"76.50106681\",\"42.44409301\",\"2017\",\"Field_1\",\"Plot_11\",\"SubPlot_111\",\"Plant_1111\",\"Pot_1111\",\"Block_11\",\"Entry_11\",\"Rep_11\",\"\",    \"3\",\"\",\"\"\n\n\"2019-09-10T18:15:54.868Z\",\"05d1b011\",\"Plant Beta\",   \"0fe3e48b\",\"2017 Plant Study\",\"59d435cd\",\"A0043002\",\"76.50106683\",\"42.44409301\",\"2017\",\"Field_1\",\"Plot_11\",\"SubPlot_112\",\"Plant_1122\",\"Pot_1122\",\"Block_11\",\"Entry_11\",\"Rep_12\",\"27.9\",\"\", \"\",\"\"\n\n\"2019-09-10T18:16:54.868Z\",\"05d1b011\",\"Plant Beta\",   \"0fe3e48b\",\"2017 Plant Study\",\"59d435cd\",\"A0043002\",\"76.50106683\",\"42.44409301\",\"2017\",\"Field_1\",\"Plot_11\",\"SubPlot_112\",\"Plant_1122\",\"Pot_1122\",\"Block_11\",\"Entry_11\",\"Rep_12\",\"\",    \"1\",\"\",\"\"\n\n\"2019-09-10T18:17:34.433Z\",\"67e2d87c\",\"Plant Gamma\",  \"0fe3e48b\",\"2017 Plant Study\",\"06307ec0\",\"A0043001\",\"76.50106681\",\"42.44409356\",\"2017\",\"Field_1\",\"Plot_12\",\"SubPlot_123\",\"Plant_1233\",\"Pot_1233\",\"Block_12\",\"Entry_12\",\"Rep_11\",\"\",    \"3\",\"\",\"\"\n\n\"2019-09-10T18:18:34.433Z\",\"67e2d87c\",\"Plant Gamma\",  \"0fe3e48b\",\"2017 Plant Study\",\"06307ec0\",\"A0043001\",\"76.50106681\",\"42.44409356\",\"2017\",\"Field_1\",\"Plot_12\",\"SubPlot_123\",\"Plant_1233\",\"Pot_1233\",\"Block_12\",\"Entry_12\",\"Rep_11\",\"25.5\",\"\", \"\",\"\"\n\n\"2019-09-10T18:19:15.629Z\",\"d98d0d4c\",\"Plant Epsilon\",\"0fe3e48b\",\"2017 Plant Study\",\"59d435cd\",\"A0043002\",\"76.50106683\",\"42.44409356\",\"2017\",\"Field_1\",\"Plot_12\",\"SubPlot_124\",\"Plant_1244\",\"Pot_1244\",\"Block_12\",\"Entry_12\",\"Rep_12\",\"28.9\",\"\", \"\",\"\"\n\n\"2019-09-10T18:20:15.629Z\",\"d98d0d4c\",\"Plant Epsilon\",\"0fe3e48b\",\"2017 Plant Study\",\"59d435cd\",\"A0043002\",\"76.50106683\",\"42.44409356\",\"2017\",\"Field_1\",\"Plot_12\",\"SubPlot_124\",\"Plant_1244\",\"Pot_1244\",\"Block_12\",\"Entry_12\",\"Rep_12\",\"\",    \"0\",\"\",\"\""
        text/tsv:
          schema:
            type: string
          example: "\"observationUnitDbId\"\\t\"observationUnitName\"\\t\"studyDbId\"\\t\"studyName\"\\t\"germplasmDbId\"\\t\"germplasmName\"\\t\"positionCoordinateX\"\\t\"positionCoordinateY\"\\t\"year\"\\t\"field\"\\t\"plot\"\\t\"sub-plot\"\\t\"plant\"\\t\"pot\"\\t\"block\"\\t\"entry\"\\t\"rep\"\\t\"f959a77d\"\\t\"8341dee0\"\\t\"84c9fd86\"\\t\"93d80c95\"\n\n\"\"\\t\"\"\\t\"\"\\t\"\"\\t\"\"\\t\"\"\\t\"\"\\t\"\"\\t\"\"\\t\"\"\\t\"\"\\t\"\"\\t\"\"\\t\"\"\\t\"\"\\t\"\"\\t\"\"\\t\"Plant height\"\\t\"Carotenoid\"\\t\"Root color\"\\t\"Virus severity\"\n      \n\"2019-09-10T18:13:27.223Z\"\\t\"f3a8a3db\"\\t\"Plant Alpha\"\\t  \"0fe3e48b\"\\t\"2017 Plant Study\"\\t\"06307ec0\"\\t\"A0043001\"\\t\"76.50106681\"\\t\"42.44409301\"\\t\"2017\"\\t\"Field_1\"\\t\"Plot_11\"\\t\"SubPlot_111\"\\t\"Plant_1111\"\\t\"Pot_1111\"\\t\"Block_11\"\\t\"Entry_11\"\\t\"Rep_11\"\\t\"25.3\"\\t\"\"\\t \"\"\\t\"\"\n\n\"2019-09-10T18:14:27.223Z\"\\t\"f3a8a3db\"\\t\"Plant Alpha\"\\t  \"0fe3e48b\"\\t\"2017 Plant Study\"\\t\"06307ec0\"\\t\"A0043001\"\\t\"76.50106681\"\\t\"42.44409301\"\\t\"2017\"\\t\"Field_1\"\\t\"Plot_11\"\\t\"SubPlot_111\"\\t\"Plant_1111\"\\t\"Pot_1111\"\\t\"Block_11\"\\t\"Entry_11\"\\t\"Rep_11\"\\t\"\"\\t    \"3\"\\t\"\"\\t\"\"\n\n\"2019-09-10T18:15:54.868Z\"\\t\"05d1b011\"\\t\"Plant Beta\"\\t   \"0fe3e48b\"\\t\"2017 Plant Study\"\\t\"59d435cd\"\\t\"A0043002\"\\t\"76.50106683\"\\t\"42.44409301\"\\t\"2017\"\\t\"Field_1\"\\t\"Plot_11\"\\t\"SubPlot_112\"\\t\"Plant_1122\"\\t\"Pot_1122\"\\t\"Block_11\"\\t\"Entry_11\"\\t\"Rep_12\"\\t\"27.9\"\\t\"\"\\t \"\"\\t\"\"\n\n\"2019-09-10T18:16:54.868Z\"\\t\"05d1b011\"\\t\"Plant Beta\"\\t   \"0fe3e48b\"\\t\"2017 Plant Study\"\\t\"59d435cd\"\\t\"A0043002\"\\t\"76.50106683\"\\t\"42.44409301\"\\t\"2017\"\\t\"Field_1\"\\t\"Plot_11\"\\t\"SubPlot_112\"\\t\"Plant_1122\"\\t\"Pot_1122\"\\t\"Block_11\"\\t\"Entry_11\"\\t\"Rep_12\"\\t\"\"\\t    \"1\"\\t\"\"\\t\"\"\n\n\"2019-09-10T18:17:34.433Z\"\\t\"67e2d87c\"\\t\"Plant Gamma\"\\t  \"0fe3e48b\"\\t\"2017 Plant Study\"\\t\"06307ec0\"\\t\"A0043001\"\\t\"76.50106681\"\\t\"42.44409356\"\\t\"2017\"\\t\"Field_1\"\\t\"Plot_12\"\\t\"SubPlot_123\"\\t\"Plant_1233\"\\t\"Pot_1233\"\\t\"Block_12\"\\t\"Entry_12\"\\t\"Rep_11\"\\t\"\"\\t    \"3\"\\t\"\"\\t\"\"\n\n\"2019-09-10T18:18:34.433Z\"\\t\"67e2d87c\"\\t\"Plant Gamma\"\\t  \"0fe3e48b\"\\t\"2017 Plant Study\"\\t\"06307ec0\"\\t\"A0043001\"\\t\"76.50106681\"\\t\"42.44409356\"\\t\"2017\"\\t\"Field_1\"\\t\"Plot_12\"\\t\"SubPlot_123\"\\t\"Plant_1233\"\\t\"Pot_1233\"\\t\"Block_12\"\\t\"Entry_12\"\\t\"Rep_11\"\\t\"25.5\"\\t\"\"\\t \"\"\\t\"\"\n\n\"2019-09-10T18:19:15.629Z\"\\t\"d98d0d4c\"\\t\"Plant Epsilon\"\\t\"0fe3e48b\"\\t\"2017 Plant Study\"\\t\"59d435cd\"\\t\"A0043002\"\\t\"76.50106683\"\\t\"42.44409356\"\\t\"2017\"\\t\"Field_1\"\\t\"Plot_12\"\\t\"SubPlot_124\"\\t\"Plant_1244\"\\t\"Pot_1244\"\\t\"Block_12\"\\t\"Entry_12\"\\t\"Rep_12\"\\t\"28.9\"\\t\"\"\\t \"\"\\t\"\"\n\n\"2019-09-10T18:20:15.629Z\"\\t\"d98d0d4c\"\\t\"Plant Epsilon\"\\t\"0fe3e48b\"\\t\"2017 Plant Study\"\\t\"59d435cd\"\\t\"A0043002\"\\t\"76.50106683\"\\t\"42.44409356\"\\t\"2017\"\\t\"Field_1\"\\t\"Plot_12\"\\t\"SubPlot_124\"\\t\"Plant_1244\"\\t\"Pot_1244\"\\t\"Block_12\"\\t\"Entry_12\"\\t\"Rep_12\"\\t\"\"\\t    \"0\"\\t\"\"\\t\"\""
    ObservationUnitListResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ObservationUnitListResponse'
    ObservationUnitSingleResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ObservationUnitSingleResponse'
    ObservationUnitTableResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ObservationUnitTableResponse'
        text/csv:
          schema:
            type: string
          example: |-
            "observationUnitDbId","observationUnitName","studyDbId","studyName","germplasmDbId","germplasmName","positionCoordinateX","positionCoordinateY","year","field","plot","sub-plot","plant","pot","block","entry","rep","f959a77d","8341dee0","84c9fd86"

            "","","","","","","","","","","","","","","","","","Plant Height","Virus severity","Carotenoid"

            "f3a8a3db","Plant Alpha",  "0fe3e48b","2017 Plant Study","06307ec0","A0043001","76.50106681","42.44409301","2017","Field_1","Plot_11","SubPlot_111","Plant_1111","Pot_1111","Block_11","Entry_11","Rep_11","25.3","3","50.75"

            "05d1b011","Plant Beta",   "0fe3e48b","2017 Plant Study","59d435cd","A0043002","76.50106683","42.44409301","2017","Field_1","Plot_11","SubPlot_112","Plant_1122","Pot_1122","Block_11","Entry_11","Rep_12","27.9","1","45.345"

            "67e2d87c","Plant Gamma",  "0fe3e48b","2017 Plant Study","06307ec0","A0043001","76.50106681","42.44409356","2017","Field_1","Plot_12","SubPlot_123","Plant_1233","Pot_1233","Block_12","Entry_12","Rep_11","25.5","3","50.76"

            "d98d0d4c","Plant Epsilon","0fe3e48b","2017 Plant Study","59d435cd","A0043002","76.50106683","42.44409356","2017","Field_1","Plot_12","SubPlot_124","Plant_1244","Pot_1244","Block_12","Entry_12","Rep_12","28.9","0","46.5"
        text/tsv:
          schema:
            type: string
          example: |-
            "observationUnitDbId"\t"observationUnitName"\t"studyDbId"\t"studyName"\t"germplasmDbId"\t"germplasmName"\t"positionCoordinateX"\t"positionCoordinateY"\t"year"\t"field"\t"plot"\t"sub-plot"\t"plant"\t"pot"\t"block"\t"entry"\t"rep"\t"f959a77d"\t"8341dee0"\t"84c9fd86"

            ""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t"Plant Height"\t"Virus severity"\t"Carotenoid"

            "f3a8a3db"\t"Plant Alpha"\t  "0fe3e48b"\t"2017 Plant Study"\t"06307ec0"\t"A0043001"\t"76.50106681"\t"42.44409301"\t"2017"\t"Field_1"\t"Plot_11"\t"SubPlot_111"\t"Plant_1111"\t"Pot_1111"\t"Block_11"\t"Entry_11"\t"Rep_11"\t"25.3"\t"3"\t"50.75"

            "05d1b011"\t"Plant Beta"\t   "0fe3e48b"\t"2017 Plant Study"\t"59d435cd"\t"A0043002"\t"76.50106683"\t"42.44409301"\t"2017"\t"Field_1"\t"Plot_11"\t"SubPlot_112"\t"Plant_1122"\t"Pot_1122"\t"Block_11"\t"Entry_11"\t"Rep_12"\t"27.9"\t"1"\t"45.345"

            "67e2d87c"\t"Plant Gamma"\t  "0fe3e48b"\t"2017 Plant Study"\t"06307ec0"\t"A0043001"\t"76.50106681"\t"42.44409356"\t"2017"\t"Field_1"\t"Plot_12"\t"SubPlot_123"\t"Plant_1233"\t"Pot_1233"\t"Block_12"\t"Entry_12"\t"Rep_11"\t"25.5"\t"3"\t"50.76"

            "d98d0d4c"\t"Plant Epsilon"\t"0fe3e48b"\t"2017 Plant Study"\t"59d435cd"\t"A0043002"\t"76.50106683"\t"42.44409356"\t"2017"\t"Field_1"\t"Plot_12"\t"SubPlot_124"\t"Plant_1244"\t"Pot_1244"\t"Block_12"\t"Entry_12"\t"Rep_12"\t"28.9"\t"0"\t"46.5"
    ObservationVariableListResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ObservationVariableListResponse'
    ObservationVariableSingleResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ObservationVariableSingleResponse'
    ScaleListResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ScaleListResponse'
    ScaleSingleResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ScaleSingleResponse'
    TraitListResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TraitListResponse'
    TraitSingleResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TraitSingleResponse'
  parameters:
    acceptHeader:
      name: Accept
      in: header
      description: The requested content type which should be returned by the server
      required: true
      style: simple
      explode: false
      schema:
        $ref: '#/components/schemas/WSMIMEDataTypes'
      example: application/json
    authorizationHeader:
      name: Authorization
      in: header
      description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
      required: false
      style: simple
      explode: false
      schema:
        pattern: ^Bearer .*$
        type: string
      example: Bearer XXXX
    externalReferenceID:
      name: externalReferenceID
      in: query
      description: An external reference ID. Could be a simple string or a URI. (use with `externalReferenceSource` parameter)
      required: false
      style: form
      explode: true
      schema:
        type: string
    externalReferenceSource:
      name: externalReferenceSource
      in: query
      description: An identifier for the source system or database of an external reference (use with `externalReferenceID` parameter)
      required: false
      style: form
      explode: true
      schema:
        type: string
    page:
      name: page
      in: query
      description: |-
        Used to request a specific page of data to be returned.

        The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
      required: false
      style: form
      explode: true
      schema:
        type: integer
      example: "0"
    pageSize:
      name: pageSize
      in: query
      description: The size of the pages to be returned. Default is `1000`.
      required: false
      style: form
      explode: true
      schema:
        type: integer
      example: 1000
    pageToken:
      name: pageToken
      in: query
      description: "Used to request a specific page of data to be returned.\n\nTokenized pages are for large data sets which can not be efficiently broken into indexed pages. Use the nextPageToken and prevPageToken from a prior response to construct a query and move to the next or previous page respectively. "
      required: false
      style: form
      explode: true
      schema:
        type: string
      example: 33c27874
    searchResultsDbId:
      name: searchResultsDbId
      in: path
      description: Unique identifier which references the search results
      required: true
      style: simple
      explode: false
      schema:
        type: string
  securitySchemes:
    AuthorizationToken:
      type: http
      description: OAuth Bearer Token - A valid Bearer token to prove authorization
      scheme: bearer
      bearerFormat: nonce token or JWT
