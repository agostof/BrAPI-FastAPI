components:
  parameters:
    acceptHeader:
      description: The requested content type which should be returned by the server
      example: application/json
      in: header
      name: Accept
      required: true
      schema:
        $ref: '#/components/schemas/WSMIMEDataTypes'
    authorizationHeader:
      description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
      example: Bearer XXXX
      in: header
      name: Authorization
      schema:
        pattern: ^Bearer .*$
        type: string
    externalReferenceID:
      description: An external reference ID. Could be a simple string or a URI. (use with `externalReferenceSource` parameter)
      in: query
      name: externalReferenceID
      required: false
      schema:
        type: string
    externalReferenceSource:
      description: An identifier for the source system or database of an external reference (use with `externalReferenceID` parameter)
      in: query
      name: externalReferenceSource
      required: false
      schema:
        type: string
    page:
      description: 'Used to request a specific page of data to be returned.


        The page indexing starts at 0 (the first page is ''page''= 0). Default is `0`.'
      example: '0'
      in: query
      name: page
      required: false
      schema:
        type: integer
    pageSize:
      description: The size of the pages to be returned. Default is `1000`.
      example: 1000
      in: query
      name: pageSize
      required: false
      schema:
        type: integer
    pageToken:
      description: 'Used to request a specific page of data to be returned.


        Tokenized pages are for large data sets which can not be efficiently broken into indexed pages. Use the nextPageToken and prevPageToken from a prior response to construct a query and move to the next or previous page respectively. '
      example: 33c27874
      in: query
      name: pageToken
      required: false
      schema:
        type: string
    searchResultsDbId:
      description: Unique identifier which references the search results
      in: path
      name: searchResultsDbId
      required: true
      schema:
        type: string
  responses:
    202AcceptedSearchResponse:
      content:
        application/json:
          schema:
            properties:
              '@context':
                $ref: '#/components/schemas/Context'
              metadata:
                $ref: '#/components/schemas/metadata'
              result:
                properties:
                  searchResultsDbId:
                    example: 551ae08c
                    type: string
                type: object
            title: 202AcceptedSearchResponse
            type: object
      description: Accepted
      headers: {}
    400BadRequest:
      content:
        application/json:
          example: 'ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object


            ERROR - 2018-10-08T18:15:11Z - Invalid query parameter


            ERROR - 2018-10-08T18:15:11Z - Required parameter is missing'
          schema:
            type: string
      description: Bad Request
      headers: {}
    401Unauthorized:
      content:
        application/json:
          example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
          schema:
            type: string
      description: Unauthorized
      headers: {}
    403Forbidden:
      content:
        application/json:
          example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
          schema:
            type: string
      description: Forbidden
      headers: {}
    404NotFound:
      content:
        application/json:
          example: ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found
          schema:
            type: string
      description: Not Found
      headers: {}
    ImageListResponse:
      content:
        application/json:
          schema:
            properties:
              '@context':
                $ref: '#/components/schemas/Context'
              metadata:
                $ref: '#/components/schemas/metadata'
              result:
                properties:
                  data:
                    description: Array of image meta data
                    items:
                      $ref: '#/components/schemas/Image'
                    type: array
                required:
                - data
                type: object
            required:
            - metadata
            - result
            title: ImageListResponse
            type: object
      description: OK
      headers: {}
    ImageSingleResponse:
      content:
        application/json:
          schema:
            properties:
              '@context':
                $ref: '#/components/schemas/Context'
              metadata:
                $ref: '#/components/schemas/metadata'
              result:
                $ref: '#/components/schemas/Image'
            required:
            - metadata
            - result
            title: ImageSingleResponse
            type: object
      description: OK
      headers: {}
    MethodListResponse:
      content:
        application/json:
          schema:
            properties:
              '@context':
                $ref: '#/components/schemas/Context'
              metadata:
                $ref: '#/components/schemas/metadata'
              result:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Method'
                    type: array
                required:
                - data
                type: object
            required:
            - metadata
            - result
            title: MethodListResponse
            type: object
      description: OK
      headers: {}
    MethodSingleResponse:
      content:
        application/json:
          schema:
            properties:
              '@context':
                $ref: '#/components/schemas/Context'
              metadata:
                $ref: '#/components/schemas/metadata'
              result:
                $ref: '#/components/schemas/Method'
            required:
            - metadata
            - result
            title: MethodSingleResponse
            type: object
      description: OK
      headers: {}
    ObservationListResponse:
      content:
        application/json:
          schema:
            properties:
              '@context':
                $ref: '#/components/schemas/Context'
              metadata:
                $ref: '#/components/schemas/metadata'
              result:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Observation'
                    type: array
                required:
                - data
                type: object
            required:
            - metadata
            - result
            title: ObservationListResponse
            type: object
      description: OK
      headers: {}
    ObservationSingleResponse:
      content:
        application/json:
          schema:
            properties:
              '@context':
                $ref: '#/components/schemas/Context'
              metadata:
                $ref: '#/components/schemas/metadata'
              result:
                $ref: '#/components/schemas/Observation'
            required:
            - metadata
            - result
            title: ObservationSingleResponse
            type: object
      description: OK
      headers: {}
    ObservationTableResponse:
      content:
        application/json:
          schema:
            properties:
              '@context':
                $ref: '#/components/schemas/Context'
              metadata:
                $ref: '#/components/schemas/metadata'
              result:
                $ref: '#/components/schemas/ObservationTable'
            required:
            - metadata
            - result
            title: ObservationTableResponse
            type: object
        text/csv:
          example: "\"observationUnitDbId\",\"observationUnitName\",\"studyDbId\",\"studyName\",\"germplasmDbId\",\"germplasmName\",\"positionCoordinateX\",\"positionCoordinateY\",\"year\",\"field\",\"plot\",\"sub-plot\",\"plant\",\"pot\",\"block\",\"entry\",\"rep\",\"f959a77d\",\"8341dee0\",\"84c9fd86\",\"93d80c95\"\n\n\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"Plant height\",\"Carotenoid\",\"Root color\",\"Virus severity\"\n      \n\"2019-09-10T18:13:27.223Z\",\"f3a8a3db\",\"Plant Alpha\",  \"0fe3e48b\",\"2017 Plant Study\",\"06307ec0\",\"A0043001\",\"76.50106681\",\"42.44409301\",\"2017\",\"Field_1\",\"Plot_11\",\"SubPlot_111\",\"Plant_1111\",\"Pot_1111\",\"Block_11\",\"Entry_11\",\"Rep_11\",\"25.3\",\"\", \"\",\"\"\n\n\"2019-09-10T18:14:27.223Z\",\"f3a8a3db\",\"Plant Alpha\",  \"0fe3e48b\",\"2017 Plant Study\",\"06307ec0\",\"A0043001\",\"76.50106681\",\"42.44409301\",\"2017\",\"Field_1\",\"Plot_11\",\"SubPlot_111\",\"Plant_1111\",\"Pot_1111\",\"Block_11\",\"Entry_11\",\"Rep_11\",\"\",    \"3\",\"\",\"\"\n\n\"2019-09-10T18:15:54.868Z\",\"05d1b011\",\"Plant Beta\",   \"0fe3e48b\",\"2017 Plant Study\",\"59d435cd\",\"A0043002\",\"76.50106683\",\"42.44409301\",\"2017\",\"Field_1\",\"Plot_11\",\"SubPlot_112\",\"Plant_1122\",\"Pot_1122\",\"Block_11\",\"Entry_11\",\"Rep_12\",\"27.9\",\"\", \"\",\"\"\n\n\"2019-09-10T18:16:54.868Z\",\"05d1b011\",\"Plant Beta\",   \"0fe3e48b\",\"2017 Plant Study\",\"59d435cd\",\"A0043002\",\"76.50106683\",\"42.44409301\",\"2017\",\"Field_1\",\"Plot_11\",\"SubPlot_112\",\"Plant_1122\",\"Pot_1122\",\"Block_11\",\"Entry_11\",\"Rep_12\",\"\",    \"1\",\"\",\"\"\n\n\"2019-09-10T18:17:34.433Z\",\"67e2d87c\",\"Plant Gamma\",  \"0fe3e48b\",\"2017 Plant Study\",\"06307ec0\",\"A0043001\",\"76.50106681\",\"42.44409356\",\"2017\",\"Field_1\",\"Plot_12\",\"SubPlot_123\",\"Plant_1233\",\"Pot_1233\",\"Block_12\",\"Entry_12\",\"Rep_11\",\"\",    \"3\",\"\",\"\"\n\n\"2019-09-10T18:18:34.433Z\",\"67e2d87c\",\"Plant Gamma\",  \"0fe3e48b\",\"2017 Plant Study\",\"06307ec0\",\"A0043001\",\"76.50106681\",\"42.44409356\",\"2017\",\"Field_1\",\"Plot_12\",\"SubPlot_123\",\"Plant_1233\",\"Pot_1233\",\"Block_12\",\"Entry_12\",\"Rep_11\",\"25.5\",\"\", \"\",\"\"\n\n\"2019-09-10T18:19:15.629Z\",\"d98d0d4c\",\"Plant Epsilon\",\"0fe3e48b\",\"2017 Plant Study\",\"59d435cd\",\"A0043002\",\"76.50106683\",\"42.44409356\",\"2017\",\"Field_1\",\"Plot_12\",\"SubPlot_124\",\"Plant_1244\",\"Pot_1244\",\"Block_12\",\"Entry_12\",\"Rep_12\",\"28.9\",\"\", \"\",\"\"\n\n\"2019-09-10T18:20:15.629Z\",\"d98d0d4c\",\"Plant Epsilon\",\"0fe3e48b\",\"2017 Plant Study\",\"59d435cd\",\"A0043002\",\"76.50106683\",\"42.44409356\",\"2017\",\"Field_1\",\"Plot_12\",\"SubPlot_124\",\"Plant_1244\",\"Pot_1244\",\"Block_12\",\"Entry_12\",\"Rep_12\",\"\",    \"0\",\"\",\"\""
          schema:
            type: string
        text/tsv:
          example: "\"observationUnitDbId\"\\t\"observationUnitName\"\\t\"studyDbId\"\\t\"studyName\"\\t\"germplasmDbId\"\\t\"germplasmName\"\\t\"positionCoordinateX\"\\t\"positionCoordinateY\"\\t\"year\"\\t\"field\"\\t\"plot\"\\t\"sub-plot\"\\t\"plant\"\\t\"pot\"\\t\"block\"\\t\"entry\"\\t\"rep\"\\t\"f959a77d\"\\t\"8341dee0\"\\t\"84c9fd86\"\\t\"93d80c95\"\n\n\"\"\\t\"\"\\t\"\"\\t\"\"\\t\"\"\\t\"\"\\t\"\"\\t\"\"\\t\"\"\\t\"\"\\t\"\"\\t\"\"\\t\"\"\\t\"\"\\t\"\"\\t\"\"\\t\"\"\\t\"Plant height\"\\t\"Carotenoid\"\\t\"Root color\"\\t\"Virus severity\"\n      \n\"2019-09-10T18:13:27.223Z\"\\t\"f3a8a3db\"\\t\"Plant Alpha\"\\t  \"0fe3e48b\"\\t\"2017 Plant Study\"\\t\"06307ec0\"\\t\"A0043001\"\\t\"76.50106681\"\\t\"42.44409301\"\\t\"2017\"\\t\"Field_1\"\\t\"Plot_11\"\\t\"SubPlot_111\"\\t\"Plant_1111\"\\t\"Pot_1111\"\\t\"Block_11\"\\t\"Entry_11\"\\t\"Rep_11\"\\t\"25.3\"\\t\"\"\\t \"\"\\t\"\"\n\n\"2019-09-10T18:14:27.223Z\"\\t\"f3a8a3db\"\\t\"Plant Alpha\"\\t  \"0fe3e48b\"\\t\"2017 Plant Study\"\\t\"06307ec0\"\\t\"A0043001\"\\t\"76.50106681\"\\t\"42.44409301\"\\t\"2017\"\\t\"Field_1\"\\t\"Plot_11\"\\t\"SubPlot_111\"\\t\"Plant_1111\"\\t\"Pot_1111\"\\t\"Block_11\"\\t\"Entry_11\"\\t\"Rep_11\"\\t\"\"\\t    \"3\"\\t\"\"\\t\"\"\n\n\"2019-09-10T18:15:54.868Z\"\\t\"05d1b011\"\\t\"Plant Beta\"\\t   \"0fe3e48b\"\\t\"2017 Plant Study\"\\t\"59d435cd\"\\t\"A0043002\"\\t\"76.50106683\"\\t\"42.44409301\"\\t\"2017\"\\t\"Field_1\"\\t\"Plot_11\"\\t\"SubPlot_112\"\\t\"Plant_1122\"\\t\"Pot_1122\"\\t\"Block_11\"\\t\"Entry_11\"\\t\"Rep_12\"\\t\"27.9\"\\t\"\"\\t \"\"\\t\"\"\n\n\"2019-09-10T18:16:54.868Z\"\\t\"05d1b011\"\\t\"Plant Beta\"\\t   \"0fe3e48b\"\\t\"2017 Plant Study\"\\t\"59d435cd\"\\t\"A0043002\"\\t\"76.50106683\"\\t\"42.44409301\"\\t\"2017\"\\t\"Field_1\"\\t\"Plot_11\"\\t\"SubPlot_112\"\\t\"Plant_1122\"\\t\"Pot_1122\"\\t\"Block_11\"\\t\"Entry_11\"\\t\"Rep_12\"\\t\"\"\\t    \"1\"\\t\"\"\\t\"\"\n\n\"2019-09-10T18:17:34.433Z\"\\t\"67e2d87c\"\\t\"Plant Gamma\"\\t  \"0fe3e48b\"\\t\"2017 Plant Study\"\\t\"06307ec0\"\\t\"A0043001\"\\t\"76.50106681\"\\t\"42.44409356\"\\t\"2017\"\\t\"Field_1\"\\t\"Plot_12\"\\t\"SubPlot_123\"\\t\"Plant_1233\"\\t\"Pot_1233\"\\t\"Block_12\"\\t\"Entry_12\"\\t\"Rep_11\"\\t\"\"\\t    \"3\"\\t\"\"\\t\"\"\n\n\"2019-09-10T18:18:34.433Z\"\\t\"67e2d87c\"\\t\"Plant Gamma\"\\t  \"0fe3e48b\"\\t\"2017 Plant Study\"\\t\"06307ec0\"\\t\"A0043001\"\\t\"76.50106681\"\\t\"42.44409356\"\\t\"2017\"\\t\"Field_1\"\\t\"Plot_12\"\\t\"SubPlot_123\"\\t\"Plant_1233\"\\t\"Pot_1233\"\\t\"Block_12\"\\t\"Entry_12\"\\t\"Rep_11\"\\t\"25.5\"\\t\"\"\\t \"\"\\t\"\"\n\n\"2019-09-10T18:19:15.629Z\"\\t\"d98d0d4c\"\\t\"Plant Epsilon\"\\t\"0fe3e48b\"\\t\"2017 Plant Study\"\\t\"59d435cd\"\\t\"A0043002\"\\t\"76.50106683\"\\t\"42.44409356\"\\t\"2017\"\\t\"Field_1\"\\t\"Plot_12\"\\t\"SubPlot_124\"\\t\"Plant_1244\"\\t\"Pot_1244\"\\t\"Block_12\"\\t\"Entry_12\"\\t\"Rep_12\"\\t\"28.9\"\\t\"\"\\t \"\"\\t\"\"\n\n\"2019-09-10T18:20:15.629Z\"\\t\"d98d0d4c\"\\t\"Plant Epsilon\"\\t\"0fe3e48b\"\\t\"2017 Plant Study\"\\t\"59d435cd\"\\t\"A0043002\"\\t\"76.50106683\"\\t\"42.44409356\"\\t\"2017\"\\t\"Field_1\"\\t\"Plot_12\"\\t\"SubPlot_124\"\\t\"Plant_1244\"\\t\"Pot_1244\"\\t\"Block_12\"\\t\"Entry_12\"\\t\"Rep_12\"\\t\"\"\\t    \"0\"\\t\"\"\\t\"\""
          schema:
            type: string
      description: OK
      headers: {}
    ObservationUnitListResponse:
      content:
        application/json:
          schema:
            properties:
              '@context':
                $ref: '#/components/schemas/Context'
              metadata:
                $ref: '#/components/schemas/metadata'
              result:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/ObservationUnit'
                    type: array
                required:
                - data
                type: object
            required:
            - metadata
            - result
            title: ObservationUnitListResponse
            type: object
      description: OK
      headers: {}
    ObservationUnitSingleResponse:
      content:
        application/json:
          schema:
            properties:
              '@context':
                $ref: '#/components/schemas/Context'
              metadata:
                $ref: '#/components/schemas/metadata'
              result:
                $ref: '#/components/schemas/ObservationUnit'
            required:
            - metadata
            - result
            title: ObservationUnitSingleResponse
            type: object
      description: OK
      headers: {}
    ObservationUnitTableResponse:
      content:
        application/json:
          schema:
            properties:
              '@context':
                $ref: '#/components/schemas/Context'
              metadata:
                $ref: '#/components/schemas/metadata'
              result:
                $ref: '#/components/schemas/ObservationUnitTable'
            required:
            - metadata
            - result
            title: ObservationUnitTableResponse
            type: object
        text/csv:
          example: '"observationUnitDbId","observationUnitName","studyDbId","studyName","germplasmDbId","germplasmName","positionCoordinateX","positionCoordinateY","year","field","plot","sub-plot","plant","pot","block","entry","rep","f959a77d","8341dee0","84c9fd86"


            "","","","","","","","","","","","","","","","","","Plant Height","Virus severity","Carotenoid"


            "f3a8a3db","Plant Alpha",  "0fe3e48b","2017 Plant Study","06307ec0","A0043001","76.50106681","42.44409301","2017","Field_1","Plot_11","SubPlot_111","Plant_1111","Pot_1111","Block_11","Entry_11","Rep_11","25.3","3","50.75"


            "05d1b011","Plant Beta",   "0fe3e48b","2017 Plant Study","59d435cd","A0043002","76.50106683","42.44409301","2017","Field_1","Plot_11","SubPlot_112","Plant_1122","Pot_1122","Block_11","Entry_11","Rep_12","27.9","1","45.345"


            "67e2d87c","Plant Gamma",  "0fe3e48b","2017 Plant Study","06307ec0","A0043001","76.50106681","42.44409356","2017","Field_1","Plot_12","SubPlot_123","Plant_1233","Pot_1233","Block_12","Entry_12","Rep_11","25.5","3","50.76"


            "d98d0d4c","Plant Epsilon","0fe3e48b","2017 Plant Study","59d435cd","A0043002","76.50106683","42.44409356","2017","Field_1","Plot_12","SubPlot_124","Plant_1244","Pot_1244","Block_12","Entry_12","Rep_12","28.9","0","46.5"'
          schema:
            type: string
        text/tsv:
          example: '"observationUnitDbId"\t"observationUnitName"\t"studyDbId"\t"studyName"\t"germplasmDbId"\t"germplasmName"\t"positionCoordinateX"\t"positionCoordinateY"\t"year"\t"field"\t"plot"\t"sub-plot"\t"plant"\t"pot"\t"block"\t"entry"\t"rep"\t"f959a77d"\t"8341dee0"\t"84c9fd86"


            ""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t"Plant Height"\t"Virus severity"\t"Carotenoid"


            "f3a8a3db"\t"Plant Alpha"\t  "0fe3e48b"\t"2017 Plant Study"\t"06307ec0"\t"A0043001"\t"76.50106681"\t"42.44409301"\t"2017"\t"Field_1"\t"Plot_11"\t"SubPlot_111"\t"Plant_1111"\t"Pot_1111"\t"Block_11"\t"Entry_11"\t"Rep_11"\t"25.3"\t"3"\t"50.75"


            "05d1b011"\t"Plant Beta"\t   "0fe3e48b"\t"2017 Plant Study"\t"59d435cd"\t"A0043002"\t"76.50106683"\t"42.44409301"\t"2017"\t"Field_1"\t"Plot_11"\t"SubPlot_112"\t"Plant_1122"\t"Pot_1122"\t"Block_11"\t"Entry_11"\t"Rep_12"\t"27.9"\t"1"\t"45.345"


            "67e2d87c"\t"Plant Gamma"\t  "0fe3e48b"\t"2017 Plant Study"\t"06307ec0"\t"A0043001"\t"76.50106681"\t"42.44409356"\t"2017"\t"Field_1"\t"Plot_12"\t"SubPlot_123"\t"Plant_1233"\t"Pot_1233"\t"Block_12"\t"Entry_12"\t"Rep_11"\t"25.5"\t"3"\t"50.76"


            "d98d0d4c"\t"Plant Epsilon"\t"0fe3e48b"\t"2017 Plant Study"\t"59d435cd"\t"A0043002"\t"76.50106683"\t"42.44409356"\t"2017"\t"Field_1"\t"Plot_12"\t"SubPlot_124"\t"Plant_1244"\t"Pot_1244"\t"Block_12"\t"Entry_12"\t"Rep_12"\t"28.9"\t"0"\t"46.5"'
          schema:
            type: string
      description: OK
      headers: {}
    ObservationVariableListResponse:
      content:
        application/json:
          schema:
            properties:
              '@context':
                $ref: '#/components/schemas/Context'
              metadata:
                $ref: '#/components/schemas/metadata'
              result:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/ObservationVariable'
                    type: array
                required:
                - data
                type: object
            required:
            - metadata
            - result
            title: ObservationVariableListResponse
            type: object
      description: OK
      headers: {}
    ObservationVariableSingleResponse:
      content:
        application/json:
          schema:
            properties:
              '@context':
                $ref: '#/components/schemas/Context'
              metadata:
                $ref: '#/components/schemas/metadata'
              result:
                $ref: '#/components/schemas/ObservationVariable'
            required:
            - metadata
            - result
            title: ObservationVariableSingleResponse
            type: object
      description: OK
      headers: {}
    ScaleListResponse:
      content:
        application/json:
          schema:
            properties:
              '@context':
                $ref: '#/components/schemas/Context'
              metadata:
                $ref: '#/components/schemas/metadata'
              result:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Scale'
                    type: array
                required:
                - data
                type: object
            required:
            - metadata
            - result
            title: ScaleListResponse
            type: object
      description: OK
      headers: {}
    ScaleSingleResponse:
      content:
        application/json:
          schema:
            properties:
              '@context':
                $ref: '#/components/schemas/Context'
              metadata:
                $ref: '#/components/schemas/metadata'
              result:
                $ref: '#/components/schemas/Scale'
            required:
            - metadata
            - result
            title: ScaleSingleResponse
            type: object
      description: OK
      headers: {}
    TraitListResponse:
      content:
        application/json:
          schema:
            properties:
              '@context':
                $ref: '#/components/schemas/Context'
              metadata:
                $ref: '#/components/schemas/metadata'
              result:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Trait'
                    type: array
                required:
                - data
                type: object
            required:
            - metadata
            - result
            title: TraitListResponse
            type: object
      description: OK
      headers: {}
    TraitSingleResponse:
      content:
        application/json:
          schema:
            properties:
              '@context':
                $ref: '#/components/schemas/Context'
              metadata:
                $ref: '#/components/schemas/metadata'
              result:
                $ref: '#/components/schemas/Trait'
            required:
            - metadata
            - result
            title: TraitSingleResponse
            type: object
      description: OK
      headers: {}
  schemas:
    Context:
      description: "The JSON-LD Context is used to provide JSON-LD definitions to each field in a JSON object. By providing an array of context file urls, a BrAPI response object becomes JSON-LD compatible.  \n\nFor more information, see https://w3c.github.io/json-ld-syntax/#the-context"
      example:
      - https://brapi.org/jsonld/context/metadata.jsonld
      items:
        format: uri
        type: string
      title: context
      type: array
    Event:
      properties:
        additionalInfo:
          additionalProperties:
            type: string
          description: Additional arbitrary info
          type: object
        date:
          description: 'A list of dates when the event occured


            MIAPPE V1.1 (DM-68) Event date - Date and time of the event.'
          example:
          - '2018-10-08T18:15:11Z'
          - '2018-11-09T18:16:12Z'
          items:
            format: date-time
            type: string
          type: array
        eventDbId:
          description: Internal database identifier
          example: 8566d4cb
          type: string
        eventDescription:
          description: 'A detailed, human-readable description of this event


            MIAPPE V1.1 (DM-67) Event description - Description of the event, including details such as amount applied and possibly duration of the event. '
          example: A set of plots was watered
          type: string
        eventParameters:
          description: A list of objects describing additional event parameters. Each of the following accepts a human-readable value or URI
          example:
          - key: http://www.example.fr/vocabulary/2018#hasContact,
            value: http://www.example.fr/id/agent/marie,
            valueRdfType: http://xmlns.com/foaf/0.1/Agent,
          - key: fertilizer
            value: nitrogen
            valueRdfType: null
          items:
            properties:
              key:
                description: Specifies the relationship between the event and the given property. E.g. fertilizer, operator
                example: operator
                type: string
              rdfValue:
                description: The type of the value given above, e.g. http://xmlns.com/foaf/0.1/Agent
                example: http://xmlns.com/foaf/0.1/Agent
                type: string
              value:
                description: The value of the property for this event. E.g. nitrogen, John Doe
                example: Bob Robertson
                type: string
            type: object
          type: array
        eventType:
          description: 'General category for this event (e.g. Sowing, Watering, Rain). Each eventType should correspond to exactly one eventTypeDbId, if provided.


            MIAPPE V1.1 (DM-65) Event type - Short name of the event.'
          example: Watering
          type: string
        eventTypeDbId:
          description: 'An identifier for this event type, in the form of an ontology class reference


            MIAPPE V1.1 (DM-66) Event accession number - Accession number of the event type in a suitable controlled vocabulary (Crop Ontology).'
          example: 4e7d691e
          type: string
        observationUnitDbIds:
          description: A list of the affected observation units. If this parameter is not given, it is understood that the event affected all units in the study
          example:
          - 8439eaff
          - d7682e7a
          - 305ae51c
          items:
            type: string
          type: array
        studyDbId:
          description: The study in which the event occurred
          example: 2cc2001f
          type: string
      required:
      - eventDbId
      - eventType
      type: object
    ExternalReferences:
      description: An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.
      example:
      - referenceID: doi:10.155454/12341234
        referenceSource: DOI
      - referenceID: http://purl.obolibrary.org/obo/ro.owl
        referenceSource: OBO Library
      - referenceID: 75a50e76
        referenceSource: Remote Data Collection Upload Tool
      items:
        properties:
          referenceID:
            description: The external reference ID. Could be a simple string or a URI.
            type: string
          referenceSource:
            description: An identifier for the source system or database of this reference
            type: string
        type: object
      title: ExternalReferences
      type: array
    Image:
      allOf:
      - $ref: '#/components/schemas/ImageNewRequest'
      - properties:
          imageDbId:
            description: The unique identifier of an image
            example: a55efb9c
            type: string
        type: object
    ImageNewRequest:
      properties:
        additionalInfo:
          additionalProperties:
            type: string
          type: object
        copyright:
          description: The copyright information of this image. Example 'Copyright 2018 Bob Robertson'
          example: Copyright 2018 Bob Robertson
          type: string
        description:
          description: The human readable description of an image.
          example: This is a picture of a tomato
          type: string
        descriptiveOntologyTerms:
          description: A list of terms to formally describe the image. Each item could be a simple Tag, an Ontology reference Id, or a full ontology URL.
          example:
          - doi:10.1002/0470841559
          - Red
          - ncbi:0300294
          items:
            type: string
          type: array
        externalReferences:
          $ref: '#/components/schemas/ExternalReferences'
        imageFileName:
          description: The name of the image file. Might be the same as 'imageName', but could be different.
          example: image_0000231.jpg
          type: string
        imageFileSize:
          description: The size of the image in Bytes.
          example: 50000
          type: integer
        imageHeight:
          description: The height of the image in Pixels.
          example: 550
          type: integer
        imageLocation:
          $ref: '#/components/schemas/geoJSON'
        imageName:
          description: The human readable name of an image. Might be the same as 'imageFileName', but could be different.
          example: Tomato Image 1
          type: string
        imageTimeStamp:
          description: The date and time the image was taken
          format: date-time
          type: string
        imageURL:
          description: The complete, absolute URI path to the image file. Images might be stored on a different host or path than the BrAPI web server.
          example: https://wiki.brapi.org/images/tomato
          type: string
        imageWidth:
          description: The width of the image in Pixels.
          example: 700
          type: integer
        mimeType:
          description: The file type of the image. Examples 'image/jpeg', 'image/png', 'image/svg', etc
          example: image/jpeg
          pattern: image/.*
          type: string
        observationDbIds:
          description: A list of observation Ids this image is associated with, if applicable.
          example:
          - d05dd235
          - 8875177d
          - c08e81b6
          items:
            type: string
          type: array
        observationUnitDbId:
          description: The related observation unit identifier, if relevant.
          example: b7e690b6
          type: string
      type: object
    ImageSearchRequest:
      allOf:
      - $ref: '#/components/schemas/SearchRequestParametersPaging'
      - $ref: '#/components/schemas/SearchRequestParametersExternalReferences'
      - properties:
          descriptiveOntologyTerms:
            description: A list of terms to formally describe the image to search for. Each item could be a simple Tag, an Ontology reference Id, or a full ontology URL.
            example:
            - doi:10.1002/0470841559
            - Red
            - ncbi:0300294
            items:
              type: string
            type: array
          imageDbIds:
            description: A list of image Ids to search for
            example:
            - 564b64a6
            - 0d122d1d
            items:
              type: string
            type: array
          imageFileNames:
            description: Image file names to search for.
            example:
            - image_01032019.jpg
            - picture_field_1234.jpg
            items:
              type: string
            type: array
          imageFileSizeMax:
            description: A maximum image file size to search for.
            example: 20000000
            type: integer
          imageFileSizeMin:
            description: A minimum image file size to search for.
            example: 1000
            type: integer
          imageHeightMax:
            description: A maximum image height to search for.
            example: 1080
            type: integer
          imageHeightMin:
            description: A minimum image height to search for.
            example: 720
            type: integer
          imageLocation:
            $ref: '#/components/schemas/geoJSONSearchArea'
          imageNames:
            description: Human readable names to search for.
            example:
            - Image 43
            - Tractor in field
            items:
              type: string
            type: array
          imageTimeStampRangeEnd:
            description: The latest timestamp to search for.
            format: date-time
            type: string
          imageTimeStampRangeStart:
            description: The earliest timestamp to search for.
            format: date-time
            type: string
          imageWidthMax:
            description: A maximum image width to search for.
            example: 1920
            type: integer
          imageWidthMin:
            description: A minimum image width to search for.
            example: 1280
            type: integer
          mimeTypes:
            description: A set of image file types to search for.
            example:
            - image/jpg
            - image/jpeg
            - image/gif
            items:
              pattern: image/.*
              type: string
            type: array
          observationDbIds:
            description: A list of observation Ids this image is associated with to search for
            example:
            - '47326456'
            - fc9823ac
            items:
              type: string
            type: array
          observationUnitDbIds:
            description: A set of observation unit identifiers to search for.
            example:
            - f5e4b273
            - 328c9424
            items:
              type: string
            type: array
        type: object
    Method:
      allOf:
      - $ref: '#/components/schemas/MethodBaseClass'
      - properties:
          methodDbId:
            description: Method unique identifier
            example: 0adb2764
            type: string
        type: object
    MethodBaseClass:
      properties:
        additionalInfo:
          additionalProperties:
            type: string
          description: Additional arbitrary info
          type: object
        bibliographicalReference:
          description: 'Bibliographical reference describing the method.


            MIAPPE V1.1 (DM-91) Reference associated to the method - URI/DOI of reference describing the method.'
          example: Smith, 1893, Really Cool Paper, Popular Journal
          type: string
        description:
          description: 'Method description


            MIAPPE V1.1 (DM-90) Method description - Textual description of the method, which may extend a method defined in an external reference with specific parameters, e.g. growth stage, inoculation precise organ (leaf number)'
          example: A measuring tape was used
          type: string
        externalReferences:
          $ref: '#/components/schemas/ExternalReferences'
        formula:
          description: For computational methods i.e., when the method consists in assessing the trait by computing measurements, write the generic formula used for the calculation
          example: a^2 + b^2 = c^2
          type: string
        methodClass:
          description: 'Method class (examples: "Measurement", "Counting", "Estimation", "Computation", etc.)'
          example: Measurement
          type: string
        methodName:
          description: 'Human readable name for the method


            MIAPPE V1.1 (DM-88) Method  Name of the method of observation'
          example: Measuring Tape
          type: string
        ontologyReference:
          $ref: '#/components/schemas/OntologyReference'
      type: object
    MethodNewRequest:
      $ref: '#/components/schemas/MethodBaseClass'
    Observation:
      allOf:
      - $ref: '#/components/schemas/ObservationNewRequest'
      - properties:
          observationDbId:
            description: The ID which uniquely identifies an observation
            example: ef24b615
            type: string
        type: object
    ObservationNewRequest:
      properties:
        additionalInfo:
          additionalProperties:
            type: string
          description: Additional arbitrary info
          type: object
        collector:
          description: The name or identifier of the entity which collected the observation
          example: 917d3ae0
          type: string
        externalReferences:
          $ref: '#/components/schemas/ExternalReferences'
        germplasmDbId:
          description: The ID which uniquely identifies a germplasm
          example: 2408ab11
          type: string
        germplasmName:
          description: Name of the germplasm. It can be the preferred name and does not have to be unique.
          example: A0000003
          type: string
        observationTimeStamp:
          description: The date and time when this observation was made
          format: date-time
          type: string
        observationUnitDbId:
          description: The ID which uniquely identifies an observation unit
          example: 598111d4
          type: string
        observationUnitName:
          description: A human readable name for an observation unit
          example: Plot 1
          type: string
        observationVariableDbId:
          description: The ID which uniquely identifies an observation variable
          example: c403d107
          type: string
        observationVariableName:
          description: A human readable name for an observation variable
          example: Plant Height in meters
          type: string
        season:
          $ref: '#/components/schemas/Season'
        studyDbId:
          description: The ID which uniquely identifies a study within the given database server
          example: ef2829db
          type: string
        uploadedBy:
          description: The name or id of the user who uploaded the observation to the database system
          example: a2f7f60b
          type: string
        value:
          description: The value of the data collected as an observation
          example: '2.3'
          type: string
      type: object
    ObservationSearchRequest:
      allOf:
      - $ref: '#/components/schemas/SearchRequestParametersPaging'
      - $ref: '#/components/schemas/SearchRequestParametersPrograms'
      - $ref: '#/components/schemas/SearchRequestParametersTrials'
      - $ref: '#/components/schemas/SearchRequestParametersStudies'
      - $ref: '#/components/schemas/SearchRequestParametersGermplasm'
      - $ref: '#/components/schemas/SearchRequestParametersLocations'
      - $ref: '#/components/schemas/SearchRequestParametersObservationVariables'
      - $ref: '#/components/schemas/SearchRequestParametersExternalReferences'
      - properties:
          observationDbIds:
            description: The unique id of an Observation
            example:
            - 6a4a59d8
            - 3ff067e0
            items:
              type: string
            type: array
          observationLevelRelationships:
            description: Searches for values in ObservationUnit->observationUnitPosition->observationLevelRelationships
            example:
            - levelCode: Field_1
              levelName: field
            items:
              $ref: '#/components/schemas/ObservationUnitLevelRelationship'
            type: array
          observationLevels:
            description: Searches for values in ObservationUnit->observationUnitPosition->observationLevel
            example:
            - levelCode: Plot_123
              levelName: plot
            - levelCode: Plot_456
              levelName: plot
            - levelCode: Plot_789
              levelName: plot
            items:
              $ref: '#/components/schemas/ObservationUnitLevelRelationship'
            type: array
          observationTimeStampRangeEnd:
            description: Timestamp range end
            format: date-time
            type: string
          observationTimeStampRangeStart:
            description: Timestamp range start
            format: date-time
            type: string
          observationUnitDbIds:
            description: The unique id of an Observation Unit
            example:
            - 76f559b5
            - 066bc5d3
            items:
              type: string
            type: array
          seasonDbIds:
            description: The year or Phenotyping campaign of a multi-annual study (trees, grape, ...)
            example:
            - Spring 2018
            - Season A
            items:
              type: string
            type: array
        type: object
    ObservationTable:
      properties:
        data:
          description: Matrix of observation data recorded for different observation variables across different observation units
          example:
          - - '2019-09-10T18:13:27.223Z'
            - f3a8a3db
            - Plant Alpha
            - 0fe3e48b
            - 2017 Plant Study
            - 06307ec0
            - A0043001
            - '76.50106681'
            - '42.44409301'
            - '2017'
            - Field_1
            - Plot_11
            - SubPlot_111
            - Plant_1111
            - Pot_1111
            - Block_11
            - Entry_11
            - Rep_11
            - '25.3'
            - ''
            - ''
            - ''
          - - '2019-09-10T18:14:27.223Z'
            - f3a8a3db
            - Plant Alpha
            - 0fe3e48b
            - 2017 Plant Study
            - 06307ec0
            - A0043001
            - '76.50106681'
            - '42.44409301'
            - '2017'
            - Field_1
            - Plot_11
            - SubPlot_111
            - Plant_1111
            - Pot_1111
            - Block_11
            - Entry_11
            - Rep_11
            - ''
            - '3'
            - ''
            - ''
          - - '2019-09-10T18:15:54.868Z'
            - 05d1b011
            - Plant Beta
            - 0fe3e48b
            - 2017 Plant Study
            - 59d435cd
            - A0043002
            - '76.50106683'
            - '42.44409301'
            - '2017'
            - Field_1
            - Plot_11
            - SubPlot_112
            - Plant_1122
            - Pot_1122
            - Block_11
            - Entry_11
            - Rep_12
            - '27.9'
            - ''
            - ''
            - ''
          - - '2019-09-10T18:16:54.868Z'
            - 05d1b011
            - Plant Beta
            - 0fe3e48b
            - 2017 Plant Study
            - 59d435cd
            - A0043002
            - '76.50106683'
            - '42.44409301'
            - '2017'
            - Field_1
            - Plot_11
            - SubPlot_112
            - Plant_1122
            - Pot_1122
            - Block_11
            - Entry_11
            - Rep_12
            - ''
            - '1'
            - ''
            - ''
          - - '2019-09-10T18:17:34.433Z'
            - 67e2d87c
            - Plant Gamma
            - 0fe3e48b
            - 2017 Plant Study
            - 06307ec0
            - A0043001
            - '76.50106681'
            - '42.44409356'
            - '2017'
            - Field_1
            - Plot_12
            - SubPlot_123
            - Plant_1233
            - Pot_1233
            - Block_12
            - Entry_12
            - Rep_11
            - ''
            - '3'
            - ''
            - ''
          - - '2019-09-10T18:18:34.433Z'
            - 67e2d87c
            - Plant Gamma
            - 0fe3e48b
            - 2017 Plant Study
            - 06307ec0
            - A0043001
            - '76.50106681'
            - '42.44409356'
            - '2017'
            - Field_1
            - Plot_12
            - SubPlot_123
            - Plant_1233
            - Pot_1233
            - Block_12
            - Entry_12
            - Rep_11
            - '25.5'
            - ''
            - ''
            - ''
          - - '2019-09-10T18:19:15.629Z'
            - d98d0d4c
            - Plant Epsilon
            - 0fe3e48b
            - 2017 Plant Study
            - 59d435cd
            - A0043002
            - '76.50106683'
            - '42.44409356'
            - '2017'
            - Field_1
            - Plot_12
            - SubPlot_124
            - Plant_1244
            - Pot_1244
            - Block_12
            - Entry_12
            - Rep_12
            - '28.9'
            - ''
            - ''
            - ''
          - - '2019-09-10T18:20:15.629Z'
            - d98d0d4c
            - Plant Epsilon
            - 0fe3e48b
            - 2017 Plant Study
            - 59d435cd
            - A0043002
            - '76.50106683'
            - '42.44409356'
            - '2017'
            - Field_1
            - Plot_12
            - SubPlot_124
            - Plant_1244
            - Pot_1244
            - Block_12
            - Entry_12
            - Rep_12
            - ''
            - '0'
            - ''
            - ''
          items:
            items:
              type: string
            type: array
          type: array
        headerRow:
          description: "<p>The table is REQUIRED to have the following columns</p>\n<ul>\n  <li>observationUnitDbId - Each row is related to one Observation Unit</li>\n  <li>observationTimeStamp - Each row is has a time stamp for when the observation was taken</li>\n  <li>At least one column with an observationVariableDbId</li>\n</ul>\n<p>The table may have any or all of the following OPTIONAL columns. Included columns are decided by the server developer</p>\n<ul>\n  <li>observationUnitName</li>\n  <li>studyDbId</li>\n  <li>studyName</li>\n  <li>germplasmDbId</li>\n  <li>germplasmName</li>\n  <li>positionCoordinateX</li>\n  <li>positionCoordinateY</li>\n  <li>year</li>\n</ul>\n<p>The table also may have any number of Observation Unit Hierarchy Level columns. For example:</p>\n<ul>\n  <li>field</li>\n  <li>plot</li>\n  <li>sub-plot</li>\n  <li>plant</li>\n  <li>pot</li>\n  <li>block</li>\n  <li>entry</li>\n  <li>rep</li>\n</ul>\n<p>The JSON representation provides a pair of extra arrays for defining the headers of the table. \nThe first array \"headerRow\" will always contain \"observationUnitDbId\" and any or all of the OPTIONAL column header names. \nThe second array \"observationVariables\" contains the names and DbIds for the Observation Variables represented in the table. \nBy appending the two arrays, you can construct the complete header row of the table. </p>"
          example:
          - observationTimeStamp
          - observationUnitDbId
          - observationUnitName
          - studyDbId
          - studyName
          - germplasmDbId
          - germplasmName
          - positionCoordinateX
          - positionCoordinateY
          - year
          - field
          - plot
          - sub-plot
          - plant
          - pot
          - block
          - entry
          - rep
          items:
            description: valid header fields
            enum:
            - observationTimeStamp
            - observationUnitDbId
            - observationUnitName
            - studyDbId
            - studyName
            - germplasmDbId
            - germplasmName
            - positionCoordinateX
            - positionCoordinateY
            - year
            - field
            - plot
            - sub-plot
            - plant
            - pot
            - block
            - entry
            - rep
            type: string
          type: array
        observationVariables:
          description: The list of observation variables which have values recorded for them in the data matrix. Append to the 'headerRow' for complete header row of the table.
          example:
          - observationVariableDbId: 367aa1a9
            observationVariableName: Plant height
          - observationVariableDbId: 2acb934c
            observationVariableName: Carotenoid
          - observationVariableDbId: 85a21ce1
            observationVariableName: Root color
          - observationVariableDbId: 46f590e5
            observationVariableName: Virus severity
          items:
            properties:
              observationVariableDbId:
                description: Variable unique identifier
                example: 367aa1a9
                type: string
              observationVariableName:
                description: Variable name (usually a short name)
                example: Plant height
                type: string
            type: object
          type: array
      type: object
    ObservationTreatment:
      properties:
        factor:
          description: 'The type of treatment/factor. ex. ''fertilizer'', ''inoculation'', ''irrigation'', etc


            MIAPPE V1.1 (DM-61) Experimental Factor type - Name/Acronym of the experimental factor.'
          example: fertilizer
          type: string
        modality:
          description: 'The treatment/factor description. ex. ''low fertilizer'', ''yellow rust inoculation'', ''high water'', etc


            MIAPPE V1.1 (DM-62) Experimental Factor description - Free text description of the experimental factor. This includes all relevant treatments planned and protocol planned for all the plants targeted by a given experimental factor. '
          example: low fertilizer
          type: string
      type: object
    ObservationUnit:
      allOf:
      - $ref: '#/components/schemas/ObservationUnitNewRequest'
      - properties:
          observationUnitDbId:
            description: 'The ID which uniquely identifies an observation unit


              MIAPPE V1.1 (DM-70) Observation unit ID - Identifier used to identify the observation unit in data files containing the values observed or measured on that unit. Must be locally unique. '
            example: 8c67503c
            type: string
          observations:
            description: "All observations attached to this observation unit. \n\nDefault for this field is null or omitted. Do NOT include data in this field unless the 'includeObservations' flag is explicitly set to True."
            items:
              $ref: '#/components/schemas/Observation'
            type: array
        type: object
    ObservationUnitHierarchyLevel:
      description: 'Observation levels indicate the granularity level at which the measurements are taken. `levelName` defines the level, `levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`s lower numbers are at the top of the hierarchy (ie field > 0) and higher numbers are at the bottom of the hierarchy (ie plant > 6). '
      properties:
        levelName:
          description: A name for this level
          enum:
          - study
          - field
          - entry
          - rep
          - block
          - sub-block
          - plot
          - sub-plot
          - plant
          - pot
          - sample
          example: plot
          type: string
        levelOrder:
          description: '`levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`''s lower numbers are at the top of the hierarchy (ie field -> 1) and higher numbers are at the bottom of the hierarchy (ie plant -> 9).'
          example: 2
          type: integer
      title: ObservationUnitHierarchyLevel
      type: object
    ObservationUnitLevelRelationship:
      allOf:
      - $ref: '#/components/schemas/ObservationUnitHierarchyLevel'
      - description: "Observation levels indicate the granularity level at which the measurements are taken. \n\n`levelName` defines the level \n\n`levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`s lower numbers are at the top of the hierarchy (ie field > 0) and higher numbers are at the bottom of the hierarchy (ie plant > 6). \n\n`levelCode` is an ID code for this level tag. Identify this observation unit by each level of the hierarchy where it exists"
        properties:
          levelCode:
            description: An ID code for this level tag. Identify this observation unit by each level of the hierarchy where it exists
            example: Plot_123
            type: string
        title: ObservationUnitLevelRelationship
        type: object
    ObservationUnitNewRequest:
      properties:
        additionalInfo:
          additionalProperties:
            type: string
          description: Additional arbitrary info
          type: object
        externalReferences:
          $ref: '#/components/schemas/ExternalReferences'
        germplasmDbId:
          description: The ID which uniquely identifies a germplasm
          example: e9d9ed57
          type: string
        germplasmName:
          description: Name of the germplasm. It can be the preferred name and does not have to be unique.
          example: A0000001
          type: string
        locationDbId:
          description: The ID which uniquely identifies a location, associated with this study
          example: 0e208b20
          type: string
        locationName:
          description: The human readable name of a location associated with this study
          example: Field Station Alpha
          type: string
        observationUnitName:
          description: A human readable name for an observation unit
          example: Plot 1
          type: string
        observationUnitPUI:
          description: 'A Permanent Unique Identifier for an observation unit


            MIAPPE V1.1 (DM-72) External ID - Identifier for the observation unit in a persistent repository, comprises the name of the repository and the identifier of the observation unit therein. The EBI Biosamples repository can be used. URI are recommended when possible.'
          example: http://pui.per/plot/1a9afc14
          type: string
        observationUnitPosition:
          $ref: '#/components/schemas/ObservationUnitPosition'
        programDbId:
          description: The ID which uniquely identifies a program
          example: 2d763a7a
          type: string
        programName:
          description: The human readable name of a program
          example: The Perfect Breeding Program
          type: string
        seedLotDbId:
          description: The unique identifier for the originating Seed Lot
          example: 261ecb09
          type: string
        studyDbId:
          description: The ID which uniquely identifies a study within the given database server
          example: 9865addc
          type: string
        studyName:
          description: The human readable name for a study
          example: Purple_Tomato_1
          type: string
        treatments:
          description: 'List of treatments applied to an observation unit.


            MIAPPE V1.1 (DM-74) Observation Unit factor value - List of values for each factor applied to the observation unit.'
          items:
            $ref: '#/components/schemas/ObservationTreatment'
          type: array
        trialDbId:
          description: The ID which uniquely identifies a trial
          example: 776a609c
          type: string
        trialName:
          description: The human readable name of a trial
          example: Purple Tomato
          type: string
      type: object
    ObservationUnitPosition:
      description: 'All positional and layout information related to this Observation Unit


        MIAPPE V1.1 (DM-73) Spatial distribution - Type and value of a spatial coordinate (georeference or relative) or level of observation (plot 45, subblock 7, block 2) provided as a key-value pair of the form type:value. Levels of observation must be consistent with those listed in the Study section.'
      properties:
        entryType:
          description: The type of entry for this observation unit. ex. "CHECK", "TEST", "FILLER"
          enum:
          - CHECK
          - TEST
          - FILLER
          example: TEST
          type: string
        geoCoordinates:
          $ref: '#/components/schemas/geoJSON'
        observationLevel:
          allOf:
          - $ref: '#/components/schemas/ObservationUnitLevelRelationship'
          - description: "The exact level and level code of an observation unit. \n\nMIAPPE V1.1 DM-71 Observation unit type \"Type of observation unit in textual form, usually one of the following: study, block, sub-block, plot, sub-plot, pot, plant. Use of other observation unit types is possible but not recommended. \nThe observation unit type can not be used to indicate sub-plant levels. However, observations can still be made on the sub-plant level, as long as the details are indicated in the associated observed variable (see observed variables).\nAlternatively, it is possible to use samples for more detailed tracing of sub-plant units, attaching the observations to them instead.\""
            properties: {}
            type: object
        observationLevelRelationships:
          description: "Observation levels indicate the granularity level at which the measurements are taken. \n\n`levelName` defines the level \n\n`levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`s lower numbers are at the top of the hierarchy (ie field > 0) and higher numbers are at the bottom of the hierarchy (ie plant > 6). \n\n`levelCode` is an ID code for this level tag. Identify this observation unit by each level of the hierarchy where it exists"
          example:
          - levelCode: Field_1
            levelName: field
            levelOrder: 0
          - levelCode: Block_12
            levelName: block
            levelOrder: 1
          - levelCode: Plot_123
            levelName: plot
            levelOrder: 2
          items:
            $ref: '#/components/schemas/ObservationUnitLevelRelationship'
          type: array
        positionCoordinateX:
          description: The X position coordinate for an observation unit. Different systems may use different coordinate systems.
          example: '74'
          type: string
        positionCoordinateXType:
          description: "The type of positional coordinate used. Must be one of the following values\n\nLONGITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details\n\nLATITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details\n\nPLANTED_ROW - The physical planted row number \n\nPLANTED_INDIVIDUAL - The physical counted number, could be independant or within a planted row\n\nGRID_ROW - The row index number of a square grid overlay\n\nGRID_COL - The column index number of a square grid overlay\n\nMEASURED_ROW - The distance in meters from a defined 0-th row\n\nMEASURED_COL - The distance in meters from a defined 0-th column"
          enum:
          - LONGITUDE
          - LATITUDE
          - PLANTED_ROW
          - PLANTED_INDIVIDUAL
          - GRID_ROW
          - GRID_COL
          - MEASURED_ROW
          - MEASURED_COL
          example: GRID_COL
          type: string
        positionCoordinateY:
          description: The Y position coordinate for an observation unit. Different systems may use different coordinate systems.
          example: '03'
          type: string
        positionCoordinateYType:
          description: "The type of positional coordinate used. Must be one of the following values\n\nLONGITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details\n\nLATITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details\n\nPLANTED_ROW - The physical planted row number \n\nPLANTED_INDIVIDUAL - The physical counted number, could be independant or within a planted row\n\nGRID_ROW - The row index number of a square grid overlay\n\nGRID_COL - The column index number of a square grid overlay\n\nMEASURED_ROW - The distance in meters from a defined 0-th row\n\nMEASURED_COL - The distance in meters from a defined 0-th column"
          enum:
          - LONGITUDE
          - LATITUDE
          - PLANTED_ROW
          - PLANTED_INDIVIDUAL
          - GRID_ROW
          - GRID_COL
          - MEASURED_ROW
          - MEASURED_COL
          example: GRID_ROW
          type: string
      type: object
    ObservationUnitSearchRequest:
      allOf:
      - $ref: '#/components/schemas/SearchRequestParametersPaging'
      - $ref: '#/components/schemas/SearchRequestParametersPrograms'
      - $ref: '#/components/schemas/SearchRequestParametersTrials'
      - $ref: '#/components/schemas/SearchRequestParametersStudies'
      - $ref: '#/components/schemas/SearchRequestParametersLocations'
      - $ref: '#/components/schemas/SearchRequestParametersGermplasm'
      - $ref: '#/components/schemas/SearchRequestParametersObservationVariables'
      - $ref: '#/components/schemas/SearchRequestParametersExternalReferences'
      - properties:
          includeObservations:
            description: "Use this parameter to include a list of observations embedded in each ObservationUnit object. \n\nCAUTION - Use this parameter at your own risk. It may return large, unpaginated lists of observation data. Only set this value to True if you are sure you need to."
            example: false
            type: boolean
          observationLevelRelationships:
            description: Searches for values in ObservationUnit->observationUnitPosition->observationLevelRelationships
            example:
            - levelCode: Field_1
              levelName: field
            items:
              $ref: '#/components/schemas/ObservationUnitLevelRelationship'
            type: array
          observationLevels:
            description: Searches for values in ObservationUnit->observationUnitPosition->observationLevel
            example:
            - levelCode: Plot_123
              levelName: plot
            - levelCode: Plot_456
              levelName: plot
            - levelCode: Plot_789
              levelName: plot
            items:
              $ref: '#/components/schemas/ObservationUnitLevelRelationship'
            type: array
          observationUnitDbIds:
            description: The unique id of an observation unit
            example:
            - 66bab7e3
            - 0e5e7f99
            items:
              type: string
            type: array
        type: object
    ObservationUnitTable:
      properties:
        data:
          description: Matrix of observation data recorded for different observation variables across different observation units
          example:
          - - f3a8a3db
            - Plant Alpha
            - 0fe3e48b
            - 2017 Plant Study
            - 06307ec0
            - A0043001
            - '76.50106681'
            - '42.44409301'
            - '2017'
            - Field_1
            - Plot_11
            - SubPlot_111
            - Plant_1111
            - Pot_1111
            - Block_11
            - Entry_11
            - Rep_11
            - '25.3'
            - '3'
            - '50.75'
          - - 05d1b011
            - Plant Beta
            - 0fe3e48b
            - 2017 Plant Study
            - 59d435cd
            - A0043002
            - '76.50106683'
            - '42.44409301'
            - '2017'
            - Field_1
            - Plot_11
            - SubPlot_112
            - Plant_1122
            - Pot_1122
            - Block_11
            - Entry_11
            - Rep_12
            - '27.9'
            - '1'
            - '45.345'
          - - 67e2d87c
            - Plant Gamma
            - 0fe3e48b
            - 2017 Plant Study
            - 06307ec0
            - A0043001
            - '76.50106681'
            - '42.44409356'
            - '2017'
            - Field_1
            - Plot_12
            - SubPlot_123
            - Plant_1233
            - Pot_1233
            - Block_12
            - Entry_12
            - Rep_11
            - '25.5'
            - '3'
            - '50.76'
          - - d98d0d4c
            - Plant Epsilon
            - 0fe3e48b
            - 2017 Plant Study
            - 59d435cd
            - A0043002
            - '76.50106683'
            - '42.44409356'
            - '2017'
            - Field_1
            - Plot_12
            - SubPlot_124
            - Plant_1244
            - Pot_1244
            - Block_12
            - Entry_12
            - Rep_12
            - '28.9'
            - '0'
            - '46.5'
          items:
            items:
              type: string
            type: array
          type: array
        headerRow:
          description: "<p>The table is REQUIRED to have the following columns</p>\n<ul>\n  <li>observationUnitDbId - Each row is related to one Observation Unit</li>\n  <li>At least one column with an observationVariableDbId</li>\n</ul>\n<p>The table may have any or all of the following OPTIONAL columns. Included columns are decided by the server developer</p>\n<ul>\n  <li>observationUnitName</li>\n  <li>studyDbId</li>\n  <li>studyName</li>\n  <li>germplasmDbId</li>\n  <li>germplasmName</li>\n  <li>positionCoordinateX</li>\n  <li>positionCoordinateY</li>\n  <li>year</li>\n</ul>\n<p>The table also may have any number of Observation Unit Hierarchy Level columns. For example:</p>\n<ul>\n  <li>field</li>\n  <li>plot</li>\n  <li>sub-plot</li>\n  <li>plant</li>\n  <li>pot</li>\n  <li>block</li>\n  <li>entry</li>\n  <li>rep</li>\n</ul>\n<p>The JSON representation provides a pair of extra arrays for defining the headers of the table. \nThe first array \"headerRow\" will always contain \"observationUnitDbId\" and any or all of the OPTIONAL column header names. \nThe second array \"observationVariables\" contains the names and DbIds for the Observation Variables represented in the table. \nBy appending the two arrays, you can construct the complete header row of the table. </p>"
          example:
          - observationUnitDbId
          - observationUnitName
          - studyDbId
          - studyName
          - germplasmDbId
          - germplasmName
          - positionCoordinateX
          - positionCoordinateY
          - year
          - field
          - plot
          - sub-plot
          - plant
          - pot
          - block
          - entry
          - rep
          items:
            description: valid header fields
            enum:
            - observationUnitDbId
            - observationUnitName
            - studyDbId
            - studyName
            - germplasmDbId
            - germplasmName
            - positionCoordinateX
            - positionCoordinateY
            - year
            - field
            - plot
            - sub-plot
            - plant
            - pot
            - block
            - entry
            - rep
            type: string
          type: array
        observationVariables:
          description: The list of observation variables which have values recorded for them in the data matrix. Append to the 'headerRow' for complete header row of the table.
          example:
          - observationVariableDbId: 367aa1a9
            observationVariableName: Plant height
          - observationVariableDbId: 2acb934c
            observationVariableName: Carotenoid
          - observationVariableDbId: 85a21ce1
            observationVariableName: Root color
          - observationVariableDbId: 46f590e5
            observationVariableName: Virus severity
          items:
            properties:
              observationVariableDbId:
                description: Variable unique identifier
                example: 367aa1a9
                type: string
              observationVariableName:
                description: Variable name (usually a short name)
                example: Plant height
                type: string
            type: object
          type: array
      type: object
    ObservationVariable:
      allOf:
      - $ref: '#/components/schemas/VariableBaseClass'
      - properties:
          observationVariableDbId:
            description: 'Variable unique identifier


              MIAPPE V1.1 (DM-83) Variable ID - Code used to identify the variable in the data file. We recommend using a variable definition from the Crop Ontology where possible. Otherwise, the Crop Ontology naming convention is recommended: <trait abbreviation>_<method abbreviation>_<scale abbreviation>). A variable ID must be unique within a given investigation.'
            example: b9b7edd1
            type: string
          observationVariableName:
            description: 'Variable name (usually a short name)


              MIAPPE V1.1 (DM-84) Variable name - Name of the variable.'
            example: Variable Name
            type: string
        required:
        - observationVariableDbId
        - observationVariableName
        type: object
    ObservationVariableNewRequest:
      allOf:
      - $ref: '#/components/schemas/VariableBaseClass'
      - properties:
          observationVariableName:
            description: Variable name (usually a short name)
            example: Variable Name
            type: string
        required:
        - observationVariableName
        type: object
    ObservationVariableSearchRequest:
      allOf:
      - $ref: '#/components/schemas/SearchRequestParametersPaging'
      - $ref: '#/components/schemas/SearchRequestParametersExternalReferences'
      - properties:
          dataTypes:
            description: List of scale data types to filter search results
            example:
            - Numerical
            - Ordinal
            - Text
            items:
              $ref: '#/components/schemas/TraitDataType'
            type: array
          methodDbIds:
            description: List of methods to filter search results
            example:
            - 07e34f83
            - d3d5517a
            items:
              type: string
            type: array
          observationVariableDbIds:
            description: List of observation variable IDs to search for
            example:
            - 2ef15c9f
            - 318e7f7d
            items:
              type: string
            type: array
          observationVariableNames:
            description: List of human readable observation variable names to search for
            example:
            - Plant Height 1
            - Root Color
            items:
              type: string
            type: array
          ontologyDbIds:
            description: List of ontology IDs to search for
            example:
            - f44f7b23
            - a26b576e
            items:
              type: string
            type: array
          scaleDbIds:
            description: List of scales to filter search results
            example:
            - a13ecffa
            - 7e1afe4f
            items:
              type: string
            type: array
          studyDbId:
            description: The unique ID of a studies to filter on
            example:
            - 5bcac0ae
            - 7f48e22d
            items:
              type: string
            type: array
          traitClasses:
            description: List of trait classes to filter search results
            example:
            - morphological
            - phenological
            - agronomical
            items:
              type: string
            type: array
          traitDbIds:
            description: List of trait unique ID to filter search results
            example:
            - ef81147b
            - 78d82fad
            items:
              type: string
            type: array
        type: object
    Ontology:
      properties:
        additionalInfo:
          additionalProperties:
            type: string
          description: Additional arbitrary info
          type: object
        authors:
          description: Ontology's list of authors (no specific format)
          example: Bob Robertson, Rob Robertson
          type: string
        copyright:
          description: Ontology copyright
          example: Copyright 1987, Bob Robertson
          type: string
        description:
          description: Human readable description of Ontology
          example: This is an example ontology that does not exist
          type: string
        documentationURL:
          description: A URL to the human readable documentation of this object
          example: https://wiki.brapi.org/ontology
          format: uri
          type: string
        licence:
          description: Ontology licence
          example: MIT Open source licence
          type: string
        ontologyDbId:
          description: Ontology database unique identifier
          example: 18e186cd
          type: string
        ontologyName:
          description: Ontology name
          example: The Official Ontology
          type: string
        version:
          description: Ontology version (no specific format)
          example: V1.3.2
          type: string
      required:
      - ontologyDbId
      - ontologyName
      type: object
    OntologyReference:
      description: 'MIAPPE V1.1


        (DM-85) Variable accession number - Accession number of the variable in the Crop Ontology


        (DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).


        (DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).


        (DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology).'
      properties:
        documentationLinks:
          description: links to various ontology documentation
          items:
            properties:
              URL:
                example: http://purl.obolibrary.org/obo/ro.owl
                format: uri
                type: string
              type:
                enum:
                - OBO
                - RDF
                - WEBPAGE
                example: OBO
                type: string
            type: object
          type: array
        ontologyDbId:
          description: Ontology database unique identifier
          example: 6b071868
          type: string
        ontologyName:
          description: Ontology name
          example: The Crop Ontology
          type: string
        version:
          description: Ontology version (no specific format)
          example: 7.2.3
          type: string
      required:
      - ontologyName
      - ontologyDbId
      type: object
    Scale:
      allOf:
      - $ref: '#/components/schemas/ScaleBaseClass'
      - description: Scale metadata
        properties:
          scaleDbId:
            description: Unique identifier of the scale. If left blank, the upload system will automatically generate a scale ID.
            example: af730171
            type: string
        required:
        - scaleDbId
        type: object
    ScaleBaseClass:
      description: Scale metadata
      properties:
        additionalInfo:
          additionalProperties:
            type: string
          description: Additional arbitrary info
          type: object
        dataType:
          $ref: '#/components/schemas/TraitDataType'
        decimalPlaces:
          description: For numerical, number of decimal places to be reported
          example: 2
          type: integer
        externalReferences:
          $ref: '#/components/schemas/ExternalReferences'
        ontologyReference:
          $ref: '#/components/schemas/OntologyReference'
        scaleName:
          description: 'Name of the scale


            MIAPPE V1.1 (DM-92) Scale Name of the scale associated with the variable'
          example: Meters
          type: string
        validValues:
          properties:
            categories:
              description: List of possible values with optional labels
              example:
              - label: low
                value: '0'
              - label: medium
                value: '5'
              - label: high
                value: '10'
              items:
                properties:
                  label:
                    description: A text label for a category
                    type: string
                  value:
                    description: The actual value for a category
                    type: string
                type: object
              type: array
            max:
              description: Maximum value (used for field data capture control).
              example: 9999
              type: integer
            min:
              description: Minimum value (used for data capture control) for numerical and date scales
              example: 2
              type: integer
          type: object
      required:
      - scaleName
      type: object
    ScaleNewRequest:
      $ref: '#/components/schemas/ScaleBaseClass'
    SearchRequestParametersCommonCropNames:
      properties:
        commonCropNames:
          description: Common name for the crop which this program is for
          example:
          - Tomatillo
          - Paw Paw
          items:
            type: string
          type: array
      type: object
    SearchRequestParametersExternalReferences:
      properties:
        externalReferenceIDs:
          description: List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)
          example:
          - http://purl.obolibrary.org/obo/ro.owl
          - 14a19841
          items:
            type: string
          type: array
        externalReferenceSources:
          description: List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)
          example:
          - OBO Library
          - Field App Name
          items:
            type: string
          type: array
      type: object
    SearchRequestParametersGermplasm:
      properties:
        germplasmDbIds:
          description: List of IDs which uniquely identify germplasm to search for
          example:
          - e9c6edd7
          - 1b1df4a6
          items:
            type: string
          type: array
        germplasmNames:
          description: List of human readable names to identify germplasm to search for
          example:
          - A0000003
          - A0000477
          items:
            type: string
          type: array
      type: object
    SearchRequestParametersLocations:
      properties:
        locationDbIds:
          description: The location ids to search for
          example:
          - b28911cf
          - 5071d1e4
          items:
            type: string
          type: array
        locationNames:
          description: A human readable names to search for
          example:
          - Location Alpha
          - The Large Hadron Collider
          items:
            type: string
          type: array
      type: object
    SearchRequestParametersObservationVariables:
      properties:
        observationVariableDbIds:
          description: The DbIds of Variables to search for
          example:
          - a646187d
          - 6d23513b
          items:
            type: string
          type: array
        observationVariableNames:
          description: The names of Variables to search for
          example:
          - Plant Height in meters
          - Wheat rust score 1-5
          items:
            type: string
          type: array
      type: object
    SearchRequestParametersPaging:
      properties:
        page:
          description: Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
          example: 0
          type: integer
        pageSize:
          description: The size of the pages to be returned. Default is `1000`.
          example: 1000
          type: integer
      type: object
    SearchRequestParametersPrograms:
      properties:
        programDbIds:
          description: A program identifier to search for
          example:
          - 8f5de35b
          - 0e2d4a13
          items:
            type: string
          type: array
        programNames:
          description: A name of a program to search for
          example:
          - Better Breeding Program
          - Best Breeding Program
          items:
            type: string
          type: array
      type: object
    SearchRequestParametersStudies:
      properties:
        studyDbIds:
          description: List of study identifiers to search for
          example:
          - cf6c4bd4
          - 691e69d6
          items:
            type: string
          type: array
        studyNames:
          description: List of study names to filter search results
          example:
          - The First Bob Study 2017
          - Wheat Yield Trial 246
          items:
            type: string
          type: array
      type: object
    SearchRequestParametersTokenPaging:
      properties:
        pageSize:
          description: The size of the pages to be returned. Default is `1000`.
          example: 1000
          type: integer
        pageToken:
          description: 'Used to request a specific page of data to be returned.


            Tokenized pages are for large data sets which can not be efficiently broken into indexed pages. Use the nextPageToken and prevPageToken from a prior response to construct a query and move to the next or previous page respectively. '
          example: 33c27874
          type: string
      type: object
    SearchRequestParametersTrials:
      properties:
        trialDbIds:
          description: The ID which uniquely identifies a trial to search for
          example:
          - d2593dc2
          - 9431a731
          items:
            type: string
          type: array
        trialNames:
          description: The human readable name of a trial to search for
          example:
          - All Yield Trials 2016
          - Disease Resistance Study Comparison Group
          items:
            type: string
          type: array
      type: object
    Season:
      properties:
        season:
          description: Name of the season. ex. 'Spring', 'Q2', 'Season A', etc.
          example: Spring
          type: string
        seasonDbId:
          description: The ID which uniquely identifies a season. For backward compatibility it can be a string like '2012', '1957-2004'
          example: Spring_2018
          type: string
        year:
          description: The 4 digit year of the season.
          example: 2018
          type: integer
      required:
      - seasonDbId
      type: object
    Trait:
      allOf:
      - $ref: '#/components/schemas/TraitBaseClass'
      - properties:
          traitDbId:
            description: The ID which uniquely identifies a trait
            example: 9b2e34f5
            type: string
        type: object
    TraitBaseClass:
      properties:
        additionalInfo:
          additionalProperties:
            type: string
          description: Additional arbitrary info
          type: object
        alternativeAbbreviations:
          description: Other frequent abbreviations of the trait, if any. These abbreviations do not have to follow a convention
          example:
          - H
          - PH
          - H1
          items:
            type: string
          type: array
        attribute:
          description: A trait can be decomposed as "Trait" = "Entity" + "Attribute", the attribute is the observed feature (or characteristic) of the entity e.g., for "grain colour", attribute = "colour"
          example: height
          type: string
        entity:
          description: A trait can be decomposed as "Trait" = "Entity" + "Attribute", the entity is the part of the plant that the trait refers to e.g., for "grain colour", entity = "grain"
          example: Stalk
          type: string
        externalReferences:
          $ref: '#/components/schemas/ExternalReferences'
        mainAbbreviation:
          description: 'Main abbreviation for trait name. (examples: "Carotenoid content" => "CC")'
          example: PH
          type: string
        ontologyReference:
          $ref: '#/components/schemas/OntologyReference'
        status:
          description: 'Trait status (examples: "recommended", "obsolete", "legacy", etc.)'
          example: recommended
          type: string
        synonyms:
          description: Other trait names
          example:
          - Height
          - Plant Height
          - Stalk Height
          - Canopy Height
          items:
            type: string
          type: array
        traitClass:
          description: 'Trait class. (examples: "morphological", "phenological", "agronomical", "physiological", "abiotic stress", "biotic stress", "biochemical", "quality traits", "fertility", etc.)'
          example: phenological
          type: string
        traitDescription:
          description: The description of a trait
          example: The height of the plant
          type: string
        traitName:
          description: 'The human readable name of a trait


            MIAPPE V1.1 (DM-86) Trait - Name of the (plant or environmental) trait under observation'
          example: Height
          type: string
      type: object
    TraitDataType:
      description: '<p>Class of the scale, entries can be</p>

        <p>"Code" -  This scale class is exceptionally used to express complex traits. Code is a nominal scale that combines the expressions of the different traits composing the complex trait. For example a severity trait might be expressed by a 2 digit and 2 character code. The first 2 digits are the percentage of the plant covered by a fungus and the 2 characters refer to the delay in development, e.g. "75VD" means "75 %" of the plant is infected and the plant is very delayed.</p>

        <p>"Date" - The date class is for events expressed in a time format, See ISO 8601</p>

        <p>"Duration" - The Duration class is for time elapsed between two events expressed in a time format, e.g. days, hours, months</p>

        <p>"Nominal" - Categorical scale that can take one of a limited and fixed number of categories. There is no intrinsic ordering to the categories</p>

        <p>"Numerical" - Numerical scales express the trait with real numbers. The numerical scale defines the unit e.g. centimeter, ton per hectare, branches</p>

        <p>"Ordinal" - Ordinal scales are scales composed of ordered categories</p>

        <p>"Text" - A free text is used to express the trait.</p>'
      enum:
      - Code
      - Date
      - Duration
      - Nominal
      - Numerical
      - Ordinal
      - Text
      example: Numerical
      type: string
    TraitNewRequest:
      $ref: '#/components/schemas/TraitBaseClass'
    VariableBaseClass:
      properties:
        additionalInfo:
          additionalProperties:
            type: string
          description: Additional arbitrary info
          type: object
        commonCropName:
          description: 'Crop name (examples: "Maize", "Wheat")'
          example: Maize
          type: string
        contextOfUse:
          description: 'Indication of how trait is routinely used. (examples: ["Trial evaluation", "Nursery evaluation"])'
          example:
          - Trial evaluation
          - Nursery evaluation
          items:
            type: string
          type: array
        defaultValue:
          description: 'Variable default value. (examples: "red", "2.3", etc.)'
          example: '2.0'
          type: string
        documentationURL:
          description: A URL to the human readable documentation of this object
          example: https://wiki.brapi.org/documentation.html
          format: uri
          type: string
        externalReferences:
          $ref: '#/components/schemas/ExternalReferences'
        growthStage:
          description: 'Growth stage at which measurement is made (examples: "flowering")'
          example: flowering
          type: string
        institution:
          description: Name of institution submitting the variable
          example: The BrAPI Institute
          type: string
        language:
          description: 2 letter ISO 639-1 code for the language of submission of the variable.
          example: en
          type: string
        method:
          allOf:
          - $ref: '#/components/schemas/MethodBaseClass'
          - properties:
              methodDbId:
                description: Method unique identifier
                example: 0adb2764
                type: string
            type: object
        ontologyReference:
          $ref: '#/components/schemas/OntologyReference'
        scale:
          allOf:
          - $ref: '#/components/schemas/ScaleBaseClass'
          - description: Scale metadata
            properties:
              scaleDbId:
                description: Unique identifier of the scale. If left blank, the upload system will automatically generate a scale ID.
                example: af730171
                type: string
            required:
            - scaleDbId
            type: object
        scientist:
          description: Name of scientist submitting the variable.
          example: Dr. Bob Robertson
          type: string
        status:
          description: 'Variable status. (examples: "recommended", "obsolete", "legacy", etc.)'
          example: recommended
          type: string
        submissionTimestamp:
          description: Timestamp when the Variable was added (ISO 8601)
          format: date-time
          type: string
        synonyms:
          description: Other variable names
          example:
          - Maize Height
          - Stalk Height
          - Corn Height
          items:
            type: string
          type: array
        trait:
          allOf:
          - $ref: '#/components/schemas/TraitBaseClass'
          - properties:
              traitDbId:
                description: The ID which uniquely identifies a trait
                example: 9b2e34f5
                type: string
            type: object
      required:
      - trait
      - method
      - scale
      type: object
    WSMIMEDataTypes:
      enum:
      - application/json
      - text/csv
      - text/tsv
      - application/flapjack
      type: string
    basePagination:
      properties:
        pageSize:
          default: 1000
          description: The number of data elements returned, aka the size of the current page. If the requested page does not have enough elements to fill a page at the requested page size, this field should indicate the actual number of elements returned.
          example: 1000
          type: integer
        totalCount:
          description: The total number of elements that are available on the server and match the requested query parameters.
          example: 10
          type: integer
        totalPages:
          description: "The total number of pages of elements available on the server. This should be calculated with the following formula. \n\ntotalPages = CEILING( totalCount / requested_page_size)"
          example: 1
          type: integer
      required:
      - pageSize
      type: object
    dataFile:
      description: A dataFile contains a URL and the relevant file metadata to represent a file
      properties:
        fileDescription:
          description: A human readable description of the file contents
          example: This is an Excel data file
          type: string
        fileMD5Hash:
          description: The MD5 Hash of the file contents to be used as a check sum
          example: c2365e900c81a89cf74d83dab60df146
          type: string
        fileName:
          description: The name of the file
          example: datafile.xlsx
          type: string
        fileSize:
          description: The size of the file in bytes
          example: 4398
          type: integer
        fileType:
          description: The type or format of the file. Preferably MIME Type.
          example: application/vnd.ms-excel
          type: string
        fileURL:
          description: The absolute URL where the file is located
          example: https://wiki.brapi.org/examples/datafile.xlsx
          format: uri
          type: string
      required:
      - fileURL
      type: object
    geoJSON:
      description: 'One geometry as defined by GeoJSON (RFC 7946). All coordinates are decimal values on the WGS84 geographic coordinate reference system.


        Copied from RFC 7946 Section 3.1.1


        A position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or

        easting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.'
      properties:
        geometry:
          description: A geometry as defined by GeoJSON (RFC 7946). In this context, only Point or Polygon geometry are allowed.
          discriminator:
            mapping:
              Point: '#/components/schemas/pointGeometry'
              Polygon: '#/components/schemas/polygonGeometry'
            propertyName: type
          example:
            coordinates:
            - -76.506042
            - 42.417373
            - 123
            type: Point
          oneOf:
          - $ref: '#/components/schemas/pointGeometry'
          - $ref: '#/components/schemas/polygonGeometry'
          title: GeoJSON Geometry
          type: object
        type:
          default: Feature
          description: The literal string "Feature"
          example: Feature
          type: string
      title: GeoJSON
      type: object
    geoJSONSearchArea:
      allOf:
      - $ref: '#/components/schemas/geoJSON'
      - description: "A GeoJSON Polygon which describes an area to search for other GeoJSON objects. All contained Points and intersecting Polygons should be returned as search results. \n\nAll coordinates are decimal values on the WGS84 geographic coordinate reference system."
        example:
          geometry:
            coordinates:
            - - - -77.456654
                - 42.241133
              - - -75.414133
                - 41.508282
              - - -76.506042
                - 42.417373
              - - -77.456654
                - 42.241133
            type: Polygon
          type: Feature
        properties: {}
        title: GeoJSONSearchArea
        type: object
    indexPagination:
      allOf:
      - $ref: '#/components/schemas/basePagination'
      - description: "The pagination object is applicable only when the payload contains a \"data\" key. It describes the pagination of the data contained in the \"data\" array, as a way to identify which subset of data is being returned. \n\nPages are zero indexed, so the first page will be page 0 (zero)."
        properties:
          currentPage:
            default: 0
            description: The index number for the returned page of data. This should always match the requested page number or the default page (0).
            example: 0
            type: integer
        required:
        - currentPage
        type: object
    linearRing:
      description: An array of at least four positions where the first equals the last
      example:
      - - -77.456654
        - 42.241133
        - 494
      - - -75.414133
        - 41.508282
        - 571
      - - -76.506042
        - 42.417373
        - 123
      - - -77.456654
        - 42.241133
        - 346
      items:
        $ref: '#/components/schemas/position'
      minItems: 4
      type: array
    metadata:
      allOf:
      - $ref: '#/components/schemas/metadataBase'
      - properties:
          pagination:
            $ref: '#/components/schemas/indexPagination'
        type: object
    metadataBase:
      properties:
        datafiles:
          description: "The datafiles contains a list of file URLs and metadata. \nThese files contain additional information related to the returned object and can be retrieved by a subsequent call. \nThis could be a supplementary data file, an informational file, the uploaded file where the data originated from, a generated file representing the whole dataset in a particular format, or any other related file. "
          items:
            $ref: '#/components/schemas/dataFile'
          type: array
        status:
          description: "The status field contains a list of informational status messages from the server. \nIf no status is reported, an empty list should be returned. See Error Reporting for more information."
          items:
            $ref: '#/components/schemas/status'
          type: array
      type: object
    metadataTokenPagination:
      allOf:
      - $ref: '#/components/schemas/metadataBase'
      - properties:
          pagination:
            $ref: '#/components/schemas/tokenPagination'
        type: object
    pointGeometry:
      description: 'Copied from RFC 7946 Section 3.1.1


        A position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or

        easting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.'
      properties:
        coordinates:
          $ref: '#/components/schemas/position'
        type:
          default: Point
          description: The literal string "Point"
          example: Point
          type: string
      type: object
    polygon:
      description: An array of linear rings
      example:
      - - - -77.456654
          - 42.241133
          - 494
        - - -75.414133
          - 41.508282
          - 571
        - - -76.506042
          - 42.417373
          - 123
        - - -77.456654
          - 42.241133
          - 346
      items:
        $ref: '#/components/schemas/linearRing'
      type: array
    polygonGeometry:
      description: "An array of Linear Rings. Each Linear Ring is an array of Points. \n\nA Point is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element."
      properties:
        coordinates:
          $ref: '#/components/schemas/polygon'
        type:
          default: Polygon
          description: The literal string "Polygon"
          example: Polygon
          type: string
      type: object
    position:
      description: A single position
      example:
      - -76.506042
      - 42.417373
      - 123
      items:
        type: number
      minItems: 2
      type: array
    status:
      description: An array of status messages to convey technical logging information from the server to the client.
      properties:
        message:
          description: A short message concerning the status of this request/response
          example: Request accepted, response successful
          type: string
        messageType:
          description: The logging level for the attached message
          enum:
          - DEBUG
          - ERROR
          - WARNING
          - INFO
          example: INFO
          type: string
      required:
      - message
      - messageType
      type: object
    tokenPagination:
      allOf:
      - $ref: '#/components/schemas/basePagination'
      - description: "The pagination object is applicable only when the payload contains a \"data\" key. It describes the pagination of the data contained in the \"data\" array, as a way to identify which subset of data is being returned. \n\nTokenized pages are for large data sets which can not be efficiently broken into indexed pages. Use the nextPageToken and prevPageToken to construct an additional query and move to the next or previous page respectively.  "
        properties:
          currentPageToken:
            description: The string token used to query the current page of data.
            example: 48bc6ac1
            type: string
          nextPageToken:
            description: The string token used to query the next page of data.
            example: cb668f63
            type: string
          prevPageToken:
            description: The string token used to query the previous page of data.
            example: 9659857e
            type: string
        required:
        - nextPageToken
        type: object
  securitySchemes:
    AuthorizationToken:
      bearerFormat: nonce token or JWT
      description: OAuth Bearer Token - A valid Bearer token to prove authorization
      scheme: bearer
      type: http
info:
  description: "The Breeding API (BrAPI) is a Standardized REST ful Web Service API Specification for communicating Plant Breeding Data. BrAPI allows for easy data sharing between databases and tools involved in plant breeding.\n<div class=\"brapi-section\">\n<h2 class=\"brapi-section-title\">General Reference Documentation</h2>\n<div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/URL_Structure.md\">URL Structure</a></div>\n<div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Response_Structure.md\">Response Structure</a></div>\n<div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Date_Time_Encoding.md\">Date/Time Encoding</a></div>\n<div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Location_Encoding.md\">Location Encoding</a></div>\n<div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Error_Handling.md\">Error Handling</a></div>\n<div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Search_Services.md\">Search Services</a></div>\n</div>\n\n<div class=\"brapi-section\">\n<h2 class=\"brapi-section-title\">BrAPI Core</h2>\n<div class=\"brapi-section-description\">The BrAPI Core module contains high level entities used for organization and management. This includes Programs, Trials, Studies, Locations, People, and Lists</div>\n<div class=\"version-number\">V2.0</div>\n<div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Core\">GitHub</a></div>\n<div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Core\">SwaggerHub</a></div>\n<div class=\"link-btn\"><a href=\"https://brapicore.docs.apiary.io\">Apiary</a></div>\n<div class=\"stop-float\"></div>\n</div>\n\n<div class=\"current-brapi-section brapi-section\">\n<h2 class=\"brapi-section-title\">BrAPI Phenotyping</h2>\n<div class=\"brapi-section-description\">The BrAPI Phenotyping module contains entities related to phenotypic observations. This includes Observation Units, Observations, Observation Variables, Traits, Scales, Methods, and Images</div>\n<div class=\"version-number\">V2.0</div>\n<div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Phenotyping\">GitHub</a></div>\n<div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Phenotyping\">SwaggerHub</a></div>\n<div class=\"link-btn\"><a href=\"https://brapiphenotyping.docs.apiary.io\">Apiary</a></div>\n<div class=\"stop-float\"></div>\n</div>\n\n<div class=\"brapi-section\">\n<h2 class=\"brapi-section-title\">BrAPI Genotyping</h2>\n<div class=\"brapi-section-description\">The BrAPI Genotyping module contains entities related to genotyping analysis. This includes Samples, Markers, Variant Sets, Variants, Call Sets, Calls, References, Reads, and Vendor Orders</div>\n<div class=\"version-number\">V2.0</div>\n<div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Genotyping\">GitHub</a></div>\n<div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Genotyping\">SwaggerHub</a></div>\n<div class=\"link-btn\"><a href=\"https://brapigenotyping.docs.apiary.io\">Apiary</a></div>\n<div class=\"stop-float\"></div>\n</div>\n\n<div class=\"brapi-section\">\n<h2 class=\"brapi-section-title\">BrAPI Germplasm</h2>\n<div class=\"brapi-section-description\">The BrAPI Germplasm module contains entities related to germplasm management. This includes Germplasm, Germplasm Attributes, Seed Lots, Crosses, Pedigree, and Progeny</div>\n<div class=\"version-number\">V2.0</div>\n<div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Germplasm\">GitHub</a></div>\n<div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Germplasm\">SwaggerHub</a></div>\n<div class=\"link-btn\"><a href=\"https://brapigermplasm.docs.apiary.io\">Apiary</a></div>\n<div class=\"stop-float\"></div>\n</div>\n\n<style>\n.link-btn{\nfloat: left; \nmargin: 2px 10px 0 0; \npadding: 0 5px; \nborder-radius: 5px; \nbackground-color: #ddd;\n}\n.stop-float{\n  clear: both;\n}\n.version-number{\n  float: left; \n  margin: 5px 10px 0 5px;\n}\n.brapi-section-title{\n  margin: 0 10px 0 0;\n  font-size: 20px;\n}\n.current-brapi-section{\n  font-weight: bolder;\n  border-radius: 5px; \n  background-color: #ddd;\n}\n.brapi-section{\n  padding: 5px 5px; \n}\n.brapi-section-description{\n  margin: 5px 0 0 5px;\n}\n</style>"
  title: BrAPI-Phenotyping
  version: '2.0'
openapi: 3.0.0
paths:
  /events:
    get:
      description: Get list of events
      parameters:
      - description: Filter based on study unique identifier in which the events occured
        in: query
        name: studyDbId
        required: false
        schema:
          type: string
      - description: Filter based on an ObservationUnit unique identifier in which the events occured
        in: query
        name: observationUnitDbId
        required: false
        schema:
          type: string
      - description: Filter based on an Event DbId
        in: query
        name: eventDbId
        required: false
        schema:
          type: string
      - description: Filter based on an Event Type
        in: query
        name: eventType
        required: false
        schema:
          type: string
      - description: Filter based on an Date Range
        in: query
        name: dateRangeStart
        required: false
        schema:
          format: date-time
          type: string
      - description: Filter based on an Date Range
        in: query
        name: dateRangeEnd
        required: false
        schema:
          format: date-time
          type: string
      - $ref: '#/components/parameters/page'
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/authorizationHeader'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
                  metadata:
                    $ref: '#/components/schemas/metadata'
                  result:
                    properties:
                      data:
                        items:
                          $ref: '#/components/schemas/Event'
                        type: array
                    required:
                    - data
                    type: object
                required:
                - metadata
                - result
                title: eventsResponse
                type: object
          description: OK
          headers: {}
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
      summary: Get the Events
      tags:
      - Events
  /images:
    get:
      description: 'Get filtered set of image meta data


        Implementation Notes


        - ''''imageURL'''' should be a complete URL describing the location of the image. There is no BrAPI call for retrieving the image content, so it could be on a different path, or a different host.


        - ''''descriptiveOntologyTerm'''' can be thought of as Tags for the image. These could be simple descriptive words, or ontology references, or full ontology URI''''s.'
      parameters:
      - description: The unique identifier for a image
        in: query
        name: imageDbId
        required: false
        schema:
          type: string
      - description: The human readable name of an image
        in: query
        name: imageName
        required: false
        schema:
          type: string
      - description: The unique identifier of the observation unit an image is portraying
        in: query
        name: observationUnitDbId
        required: false
        schema:
          type: string
      - description: The unique identifier of the observation an image is associated with
        in: query
        name: observationDbId
        required: false
        schema:
          type: string
      - description: A descriptive term associated with an image
        in: query
        name: descriptiveOntologyTerm
        required: false
        schema:
          type: string
      - $ref: '#/components/parameters/externalReferenceID'
      - $ref: '#/components/parameters/externalReferenceSource'
      - $ref: '#/components/parameters/page'
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/authorizationHeader'
      responses:
        '200':
          $ref: '#/components/responses/ImageListResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
      summary: Get the image meta data summaries
      tags:
      - Images
    post:
      description: 'Create new image meta data objects


        Implementation Notes


        - ''''imageURL'''' should be a complete URL describing the location of the image. There is no BrAPI call for retrieving the image content, so it could be on a different path, or a different host.


        - ''''descriptiveOntologyTerm'''' can be thought of as Tags for the image. These could be simple descriptive words, or ontology references, or full ontology URI''''s.


        - The ''/images'' calls support a GeoJSON object structure for describing their location. The BrAPI spec for GeoJSON only supports two of the possible geometries: Points and Polygons.


        - With most images, the Point geometry should be used, and it should indicate the longitude and latitude of the camera.


        - For top down images (ie from drones, cranes, etc), the Point geometry may be used to indicate the longitude and latitude of the centroid of the image content, and the Polygon geometry may be used to indicate the border of the image content. '''
      parameters:
      - $ref: '#/components/parameters/authorizationHeader'
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/ImageNewRequest'
              type: array
      responses:
        '200':
          $ref: '#/components/responses/ImageListResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
      summary: Create new image meta data objects
      tags:
      - Images
  /images/{imageDbId}:
    get:
      description: 'Get one image meta data object


        Implementation Notes


        - ''''imageURL'''' should be a complete URL describing the location of the image. There is no BrAPI call for retrieving the image content, so it could be on a different path, or a different host.


        - ''''descriptiveOntologyTerm'''' can be thought of as Tags for the image. These could be simple descriptive words, or ontology references, or full ontology URI''''s.'
      parameters:
      - description: The unique identifier for a image
        in: path
        name: imageDbId
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/authorizationHeader'
      responses:
        '200':
          $ref: '#/components/responses/ImageSingleResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
      summary: Get the an image meta data summary
      tags:
      - Images
    put:
      description: "Update an image meta data object\n\nImplementation Notes\n\n- This call should be paired with 'PUT /images/{imageDbId}/imagecontent' for full capability\n\n- A server may choose to modify the image meta data object based on the actually image which has been uploaded. \n\n- Image data may be stored in a database or file system. Servers should generate and provide the \"imageURL\" as an absolute path for retrieving the image, wherever it happens to live. \n\n- 'descriptiveOntologyTerm' can be thought of as Tags for the image. These could be simple descriptive words, or ontology references, or full ontology URI's. \n\n- The '/images' calls support a GeoJSON object structure for describing their location. The BrAPI spec for GeoJSON only supports two of the possible geometries: Points and Polygons. \n\n- With most images, the Point geometry should be used, and it should indicate the longitude and latitude of the camera. \n\n- For top down images (ie from drones, cranes, etc), the Point geometry may be used to indicate the longitude and latitude of the centroid of the image content, and the Polygon geometry may be used to indicate the border of the image content."
      parameters:
      - description: The unique identifier for a image
        in: path
        name: imageDbId
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/authorizationHeader'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImageNewRequest'
      responses:
        '200':
          $ref: '#/components/responses/ImageSingleResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
      summary: Update an image meta data
      tags:
      - Images
  /images/{imageDbId}/imagecontent:
    put:
      description: "Update an image with the image file content\n\nImplementation Notes\n\n- This call should be paired with 'PUT /images/{imageDbId}' for full capability\n\n- A server may choose to modify the image meta data object based on the actually image which has been uploaded. \n\n- Image data may be stored in a database or file system. Servers should generate and provide the \"imageURL\" for retrieving the image, wherever it happens to live."
      parameters:
      - description: The unique identifier for a image
        in: path
        name: imageDbId
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/authorizationHeader'
      requestBody:
        content:
          image/*:
            schema:
              format: binary
              type: string
      responses:
        '200':
          $ref: '#/components/responses/ImageSingleResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
      summary: Update an image with the image file content
      tags:
      - Images
  /methods:
    get:
      description: 'Returns a list of Methods available on a server.


        An Observation Variable has 3 critical parts; A Trait being observed, a Method for making the observation, and a Scale on which the observation can be measured and compared with other observations.'''
      parameters:
      - description: The unique identifier for a method
        in: query
        name: methodDbId
        required: false
        schema:
          type: string
      - description: The unique identifier for an observation variable
        in: query
        name: observationVariableDbId
        required: false
        schema:
          type: string
      - $ref: '#/components/parameters/externalReferenceID'
      - $ref: '#/components/parameters/externalReferenceSource'
      - $ref: '#/components/parameters/page'
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/authorizationHeader'
      responses:
        '200':
          $ref: '#/components/responses/MethodListResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
      summary: Get the Methods
      tags:
      - Methods
    post:
      description: Create new method objects in the database
      parameters:
      - $ref: '#/components/parameters/authorizationHeader'
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/MethodNewRequest'
              type: array
      responses:
        '200':
          $ref: '#/components/responses/MethodListResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
      summary: Add new Methods
      tags:
      - Methods
  /methods/{methodDbId}:
    get:
      description: 'Retrieve details about a specific method


        An Observation Variable has 3 critical parts; A Trait being observed, a Method for making the observation, and a Scale on which the observation can be measured and compared with other observations.'
      parameters:
      - description: Id of the method to retrieve details of.
        in: path
        name: methodDbId
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/authorizationHeader'
      responses:
        '200':
          $ref: '#/components/responses/MethodSingleResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
      summary: Get the details for a specific Method
      tags:
      - Methods
    put:
      description: Update the details of an existing method
      parameters:
      - description: Id of the method to retrieve details of.
        in: path
        name: methodDbId
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/authorizationHeader'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MethodNewRequest'
      responses:
        '200':
          $ref: '#/components/responses/MethodSingleResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
      summary: Update an existing Method
      tags:
      - Methods
  /observationlevels:
    get:
      description: "Call to retrieve the list of supported observation levels. \n\nObservation levels indicate the granularity level at which the measurements are taken. `levelName` defines the level, `levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`s lower numbers are at the top of the hierarchy (ie field > 0) and higher numbers are at the bottom of the hierarchy (ie plant > 6). \n\nThe values are used to supply the `observationLevel` parameter in the observation unit details call."
      parameters:
      - description: Filter by study DbId
        in: query
        name: studyDbId
        required: false
        schema:
          type: string
      - description: Filter by trial DbId
        in: query
        name: trialDbId
        required: false
        schema:
          type: string
      - description: Filter by program DbId
        in: query
        name: programDbId
        required: false
        schema:
          type: string
      - $ref: '#/components/parameters/page'
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/authorizationHeader'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
                  metadata:
                    $ref: '#/components/schemas/metadata'
                  result:
                    properties:
                      data:
                        example:
                        - levelName: field
                          levelOrder: 0
                        - levelName: block
                          levelOrder: 1
                        - levelName: plot
                          levelOrder: 2
                        - levelName: sub-plot
                          levelOrder: 3
                        - levelName: plant
                          levelOrder: 4
                        items:
                          $ref: '#/components/schemas/ObservationUnitHierarchyLevel'
                        type: array
                    required:
                    - data
                    type: object
                required:
                - metadata
                - result
                title: ObservationLevelListResponse
                type: object
          description: OK
          headers: {}
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
      summary: Get the Observation Levels
      tags:
      - Observation Units
  /observations:
    get:
      description: 'Retrieve all observations where there are measurements for the given observation variables.


        observationTimestamp should be ISO8601 format with timezone -> YYYY-MM-DDThh:mm:ss+hhmm'
      parameters:
      - description: The unique ID of an Observation
        in: query
        name: observationDbId
        required: false
        schema:
          type: string
      - description: The unique ID of an Observation Unit
        in: query
        name: observationUnitDbId
        required: false
        schema:
          type: string
      - description: The unique ID of a germplasm (accession) to filter on
        in: query
        name: germplasmDbId
        required: false
        schema:
          type: string
      - description: The unique ID of an observation variable
        in: query
        name: observationVariableDbId
        required: false
        schema:
          type: string
      - description: The unique ID of a studies to filter on
        in: query
        name: studyDbId
        required: false
        schema:
          type: string
      - description: The unique ID of a location where these observations were collected
        in: query
        name: locationDbId
        required: false
        schema:
          type: string
      - description: The unique ID of a trial to filter on
        in: query
        name: trialDbId
        required: false
        schema:
          type: string
      - description: The unique ID of a program to filter on
        in: query
        name: programDbId
        required: false
        schema:
          type: string
      - description: The year or Phenotyping campaign of a multi-annual study (trees, grape, ...)
        in: query
        name: seasonDbId
        required: false
        schema:
          type: string
      - description: The Observation Unit Level. Returns only the observation unit of the specified Level. References ObservationUnit->observationUnitPosition->observationLevel->levelName
        in: query
        name: observationUnitLevelName
        required: false
        schema:
          type: string
      - description: The Observation Unit Level Order Number. Returns only the observation unit of the specified Level. References ObservationUnit->observationUnitPosition->observationLevel->levelOrder
        in: query
        name: observationUnitLevelOrder
        required: false
        schema:
          type: string
      - description: The Observation Unit Level Code. This parameter should be used together with `observationUnitLevelName` or `observationUnitLevelOrder`. References ObservationUnit->observationUnitPosition->observationLevel->levelCode
        in: query
        name: observationUnitLevelCode
        required: false
        schema:
          type: string
      - description: Timestamp range start
        in: query
        name: observationTimeStampRangeStart
        required: false
        schema:
          format: date-time
          type: string
      - description: Timestamp range end
        in: query
        name: observationTimeStampRangeEnd
        required: false
        schema:
          format: date-time
          type: string
      - $ref: '#/components/parameters/externalReferenceID'
      - $ref: '#/components/parameters/externalReferenceSource'
      - $ref: '#/components/parameters/page'
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/authorizationHeader'
      responses:
        '200':
          $ref: '#/components/responses/ObservationListResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
      summary: Get a filtered set of Observations
      tags:
      - Observations
    post:
      description: Add new Observation entities
      parameters:
      - $ref: '#/components/parameters/authorizationHeader'
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/ObservationNewRequest'
              type: array
      responses:
        '200':
          $ref: '#/components/responses/ObservationListResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
      summary: Add new Observation entities
      tags:
      - Observations
    put:
      description: 'Update multiple Observation entities simultaneously with a single call


        Include as many `observationDbIds` in the request as needed.


        Note - In strictly typed languages, this structure can be represented as a Map or Dictionary of objects and parsed directly from JSON.'
      parameters:
      - $ref: '#/components/parameters/authorizationHeader'
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties:
                $ref: '#/components/schemas/ObservationNewRequest'
              example:
                <observationDbId_1>:
                  additionalInfo: {}
                  collector: 917d3ae0
                  externalReferences:
                  - referenceID: 75a50e76
                    referenceSource: Remote Data Collection Upload Tool
                  germplasmDbId: 2408ab11
                  germplasmName: A0000003
                  observationTimeStamp: '2020-08-12T18:10:40.413Z'
                  observationUnitDbId: 598111d4
                  observationUnitName: Plot 1
                  observationVariableDbId: c403d107
                  observationVariableName: Plant Height in meters
                  season:
                    season: Spring
                    seasonDbId: Spring_2018
                    year: 2018
                  studyDbId: ef2829db
                  uploadedBy: a2f7f60b
                  value: '2.3'
                <observationDbId_2>:
                  additionalInfo: {}
                  collector: 03ba8c2c
                  externalReferences:
                  - referenceID: 75a50e76
                    referenceSource: Remote Data Collection Upload Tool
                  germplasmDbId: 69310ca4
                  germplasmName: A0000438
                  observationTimeStamp: '2020-08-12T18:10:40.413Z'
                  observationUnitDbId: 1177a714
                  observationUnitName: Plot 13
                  observationVariableDbId: e4f8ba8c
                  observationVariableName: Carotenoid
                  season:
                    season: Spring
                    seasonDbId: Spring_2018
                    year: 2018
                  studyDbId: 6f9e267d
                  uploadedBy: 182c72ad
                  value: '2.5'
              type: object
      responses:
        '200':
          $ref: '#/components/responses/ObservationListResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
      summary: Update multiple Observation entities
      tags:
      - Observations
  /observations/table:
    get:
      description: "<p>This service is designed to retrieve a table of time dependant observation values as a matrix of Observation Units and Observation Variables.\nThis is also sometimes called a Time Series. This service takes the \"Sparse Table\" approach for representing this time dependant data.</p>\n<p>The table may be represented by JSON, CSV, or TSV. The \"Accept\" HTTP header is used for the client to request different return formats. \nBy default, if the \"Accept\" header is not included in the request, the server should return JSON as described below.</p>\n<p>The table is REQUIRED to have the following columns</p>\n<ul>\n  <li>observationUnitDbId - Each row is related to one Observation Unit</li>\n  <li>observationTimeStamp - Each row is has a time stamp for when the observation was taken</li>\n  <li>At least one column with an observationVariableDbId</li>\n</ul>\n<p>The table may have any or all of the following OPTIONAL columns. Included columns are decided by the server developer</p>\n<ul>\n  <li>observationUnitName</li>\n  <li>studyDbId</li>\n  <li>studyName</li>\n  <li>germplasmDbId</li>\n  <li>germplasmName</li>\n  <li>positionCoordinateX</li>\n  <li>positionCoordinateY</li>\n  <li>year</li>\n</ul>\n<p>The table also may have any number of Observation Unit Hierarchy Level columns. For example:</p>\n<ul>\n  <li>field</li>\n  <li>plot</li>\n  <li>sub-plot</li>\n  <li>plant</li>\n  <li>pot</li>\n  <li>block</li>\n  <li>entry</li>\n  <li>rep</li>\n</ul>\n<p>The JSON representation provides a pair of extra arrays for defining the headers of the table. \nThe first array \"headerRow\" will always contain \"observationUnitDbId\" and any or all of the OPTIONAL column header names. \nThe second array \"observationVariables\" contains the names and DbIds for the Observation Variables represented in the table. \nBy appending the two arrays, you can construct the complete header row of the table. </p>\n<p>For CSV and TSV representations of the table, an extra header row is needed to describe both the Observation Variable DbId and the Observation Variable Name for each data column. \nSee the example responses below</p> "
      parameters:
      - description: The unique ID of an Observation Unit
        in: query
        name: observationUnitDbId
        required: false
        schema:
          type: string
      - description: The unique ID of a germplasm (accession) to filter on
        in: query
        name: germplasmDbId
        required: false
        schema:
          type: string
      - description: The unique ID of an observation variable
        in: query
        name: observationVariableDbId
        required: false
        schema:
          type: string
      - description: The unique ID of a studies to filter on
        in: query
        name: studyDbId
        required: false
        schema:
          type: string
      - description: The unique ID of a location where these observations were collected
        in: query
        name: locationDbId
        required: false
        schema:
          type: string
      - description: The unique ID of a trial to filter on
        in: query
        name: trialDbId
        required: false
        schema:
          type: string
      - description: The unique ID of a program to filter on
        in: query
        name: programDbId
        required: false
        schema:
          type: string
      - description: The year or Phenotyping campaign of a multi-annual study (trees, grape, ...)
        in: query
        name: seasonDbId
        required: false
        schema:
          type: string
      - description: The type of the observationUnit. Returns only the observation unit of the specified type; the parent levels ID can be accessed through observationUnitStructure.
        in: query
        name: observationLevel
        required: false
        schema:
          type: string
      - description: Permanent unique identifier which references the search results
        in: query
        name: searchResultsDbId
        required: false
        schema:
          type: string
      - description: Timestamp range start
        in: query
        name: observationTimeStampRangeStart
        required: false
        schema:
          format: date-time
          type: string
      - description: Timestamp range end
        in: query
        name: observationTimeStampRangeEnd
        required: false
        schema:
          format: date-time
          type: string
      - $ref: '#/components/parameters/acceptHeader'
      - $ref: '#/components/parameters/authorizationHeader'
      responses:
        '200':
          $ref: '#/components/responses/ObservationTableResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
      summary: Get a list of Observations in a table format
      tags:
      - Observations
  /observations/{observationDbId}:
    get:
      description: 'Get the details of a specific Observations


        observationTimestamp should be ISO8601 format with timezone -> YYYY-MM-DDThh:mm:ss+hhmm'
      parameters:
      - description: The unique ID of an observation
        in: path
        name: observationDbId
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/authorizationHeader'
      responses:
        '200':
          $ref: '#/components/responses/ObservationSingleResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
      summary: Get the details of a specific Observations
      tags:
      - Observations
    put:
      description: Update an existing Observation
      parameters:
      - description: The unique ID of an observation
        in: path
        name: observationDbId
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/authorizationHeader'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ObservationNewRequest'
      responses:
        '200':
          $ref: '#/components/responses/ObservationSingleResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
      summary: Update an existing Observation
      tags:
      - Observations
  /observationunits:
    get:
      description: Get a filtered set of Observation Units
      parameters:
      - description: The unique ID of an Observation Unit
        in: query
        name: observationUnitDbId
        required: false
        schema:
          type: string
      - description: The unique ID of a germplasm (accession) to filter on
        in: query
        name: germplasmDbId
        required: false
        schema:
          type: string
      - description: The unique ID of a studies to filter on
        in: query
        name: studyDbId
        required: false
        schema:
          type: string
      - description: The unique ID of a location where these observations were collected
        in: query
        name: locationDbId
        required: false
        schema:
          type: string
      - description: The unique ID of a trial to filter on
        in: query
        name: trialDbId
        required: false
        schema:
          type: string
      - description: The unique ID of a program to filter on
        in: query
        name: programDbId
        required: false
        schema:
          type: string
      - description: The year or Phenotyping campaign of a multi-annual study (trees, grape, ...)
        in: query
        name: seasonDbId
        required: false
        schema:
          type: string
      - description: The Observation Unit Level. Returns only the observation unit of the specified Level. References ObservationUnit->observationUnitPosition->observationLevel->levelName
        in: query
        name: observationUnitLevelName
        required: false
        schema:
          type: string
      - description: The Observation Unit Level Order Number. Returns only the observation unit of the specified Level. References ObservationUnit->observationUnitPosition->observationLevel->levelOrder
        in: query
        name: observationUnitLevelOrder
        required: false
        schema:
          type: string
      - description: The Observation Unit Level Code. This parameter should be used together with `observationUnitLevelName` or `observationUnitLevelOrder`. References ObservationUnit->observationUnitPosition->observationLevel->levelCode
        in: query
        name: observationUnitLevelCode
        required: false
        schema:
          type: string
      - description: "Use this parameter to include a list of observations embedded in each ObservationUnit object. \n\nCAUTION - Use this parameter at your own risk. It may return large, unpaginated lists of observation data. Only set this value to True if you are sure you need to."
        in: query
        name: includeObservations
        required: false
        schema:
          type: boolean
      - $ref: '#/components/parameters/externalReferenceID'
      - $ref: '#/components/parameters/externalReferenceSource'
      - $ref: '#/components/parameters/page'
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/authorizationHeader'
      responses:
        '200':
          $ref: '#/components/responses/ObservationUnitListResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
      summary: Get a filtered set of Observation Units
      tags:
      - Observation Units
    post:
      description: Add new Observation Units
      parameters:
      - $ref: '#/components/parameters/authorizationHeader'
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/ObservationUnitNewRequest'
              type: array
      responses:
        '200':
          $ref: '#/components/responses/ObservationUnitListResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
      summary: Add new Observation Units
      tags:
      - Observation Units
    put:
      description: 'Update a set of Observation Units


        Note - In strictly typed languages, this structure can be represented as a Map or Dictionary of objects and parsed directly to JSON.'
      parameters:
      - $ref: '#/components/parameters/authorizationHeader'
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties:
                $ref: '#/components/schemas/ObservationUnitNewRequest'
              example:
                <observationUnitDbId_1>:
                  additionalInfo: {}
                  externalReferences:
                  - referenceID: doi:10.155454/12341234
                    referenceSource: DOI
                  germplasmDbId: e9d9ed57
                  germplasmName: A0000001
                  locationDbId: 0e208b20
                  locationName: Field Station Alpha
                  observationUnitName: Plot 31
                  observationUnitPUI: http://pui.per/plot/1a9afc14
                  observationUnitPosition:
                    entryType: TEST
                    geoCoordinates:
                      geometry:
                        coordinates:
                        - -76.506042
                        - 42.417373
                        - 123
                        type: Point
                      type: Feature
                    observationLevel:
                      levelCode: Plot_456
                      levelName: plot
                      levelOrder: 2
                    observationLevelRelationships:
                    - levelCode: Field_1
                      levelName: field
                      levelOrder: 0
                    - levelCode: Block_6
                      levelName: block
                      levelOrder: 1
                    - levelCode: Plot_456
                      levelName: plot
                      levelOrder: 2
                    positionCoordinateX: '78'
                    positionCoordinateXType: GRID_COL
                    positionCoordinateY: 08
                    positionCoordinateYType: GRID_ROW
                  programDbId: 2d763a7a
                  programName: The Perfect Breeding Program
                  seedLotDbId: 261ecb09
                  studyDbId: 9865addc
                  studyName: Purple_Tomato_1
                  treatments:
                  - factor: fertilizer
                    modality: low fertilizer
                  trialDbId: 776a609c
                  trialName: Purple Tomato
                <observationUnitDbId_2>:
                  additionalInfo: {}
                  externalReferences:
                  - referenceID: doi:10.155454/12341234
                    referenceSource: DOI
                  germplasmDbId: e9d9ed57
                  germplasmName: A0000001
                  locationDbId: 0e208b20
                  locationName: Field Station Alpha
                  observationUnitName: Plot 17
                  observationUnitPUI: http://pui.per/plot/1a9afc14
                  observationUnitPosition:
                    entryType: TEST
                    geoCoordinates:
                      geometry:
                        coordinates:
                        - -76.506042
                        - 42.417373
                        - 123
                        type: Point
                      type: Feature
                    observationLevel:
                      levelCode: Plot_123
                      levelName: plot
                      levelOrder: 2
                    observationLevelRelationships:
                    - levelCode: Field_1
                      levelName: field
                      levelOrder: 0
                    - levelCode: Block_12
                      levelName: block
                      levelOrder: 1
                    - levelCode: Plot_123
                      levelName: plot
                      levelOrder: 2
                    positionCoordinateX: '74'
                    positionCoordinateXType: GRID_COL
                    positionCoordinateY: '03'
                    positionCoordinateYType: GRID_ROW
                  programDbId: 2d763a7a
                  programName: The Perfect Breeding Program
                  seedLotDbId: 261ecb09
                  studyDbId: 9865addc
                  studyName: Purple_Tomato_1
                  treatments:
                  - factor: fertilizer
                    modality: low fertilizer
                  trialDbId: 776a609c
                  trialName: Purple Tomato
              type: object
      responses:
        '200':
          $ref: '#/components/responses/ObservationUnitListResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
      summary: Update a set of Observation Units
      tags:
      - Observation Units
  /observationunits/table:
    get:
      description: "<p>This service is designed to retrieve a table for observation values as a matrix of Observation Units and Observation Variables.</p>\n<p>The table may be represented by JSON, CSV, or TSV. The \"Accept\" HTTP header is used for the client to request different return formats. \nBy default, if the \"Accept\" header is not included in the request, the server should return JSON as described below.</p>\n<p>The table is REQUIRED to have the following columns</p>\n<ul>\n  <li>observationUnitDbId - Each row is related to one Observation Unit</li>\n  <li>At least one column with an observationVariableDbId</li>\n</ul>\n<p>The table may have any or all of the following OPTIONAL columns. Included columns are decided by the server developer</p>\n<ul>\n  <li>observationUnitName</li>\n  <li>studyDbId</li>\n  <li>studyName</li>\n  <li>germplasmDbId</li>\n  <li>germplasmName</li>\n  <li>positionCoordinateX</li>\n  <li>positionCoordinateY</li>\n  <li>year</li>\n</ul>\n<p>The table also may have any number of Observation Unit Hierarchy Level columns. For example:</p>\n<ul>\n  <li>field</li>\n  <li>plot</li>\n  <li>sub-plot</li>\n  <li>plant</li>\n  <li>pot</li>\n  <li>block</li>\n  <li>entry</li>\n  <li>rep</li>\n</ul>\n<p>The JSON representation provides a pair of extra arrays for defining the headers of the table. \nThe first array \"headerRow\" will always contain \"observationUnitDbId\" and any or all of the OPTIONAL column header names. \nThe second array \"observationVariables\" contains the names and DbIds for the Observation Variables represented in the table. \nBy appending the two arrays, you can construct the complete header row of the table. </p>\n<p>For CSV and TSV representations of the table, an extra header row is needed to describe both the Observation Variable DbId and the Observation Variable Name for each data column. \nSee the example responses below</p> "
      parameters:
      - description: The unique ID of an Observation Unit
        in: query
        name: observationUnitDbId
        required: false
        schema:
          type: string
      - description: The unique ID of a germplasm (accession) to filter on
        in: query
        name: germplasmDbId
        required: false
        schema:
          type: string
      - description: The unique ID of an observation variable
        in: query
        name: observationVariableDbId
        required: false
        schema:
          type: string
      - description: The unique ID of a studies to filter on
        in: query
        name: studyDbId
        required: false
        schema:
          type: string
      - description: The unique ID of a location where these observations were collected
        in: query
        name: locationDbId
        required: false
        schema:
          type: string
      - description: The unique ID of a trial to filter on
        in: query
        name: trialDbId
        required: false
        schema:
          type: string
      - description: The unique ID of a program to filter on
        in: query
        name: programDbId
        required: false
        schema:
          type: string
      - description: The year or Phenotyping campaign of a multi-annual study (trees, grape, ...)
        in: query
        name: seasonDbId
        required: false
        schema:
          type: string
      - description: The type of the observationUnit. Returns only the observation unit of the specified type; the parent levels ID can be accessed through observationUnitStructure.
        in: query
        name: observationLevel
        required: false
        schema:
          type: string
      - $ref: '#/components/parameters/acceptHeader'
      - $ref: '#/components/parameters/authorizationHeader'
      responses:
        '200':
          $ref: '#/components/responses/ObservationUnitTableResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
      summary: Get a list of Observations in a table format
      tags:
      - Observation Units
  /observationunits/{observationUnitDbId}:
    get:
      description: Get the details of a specific Observation Unit
      parameters:
      - description: The unique ID of the specific Observation Unit
        in: path
        name: observationUnitDbId
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/authorizationHeader'
      responses:
        '200':
          $ref: '#/components/responses/ObservationUnitSingleResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
      summary: Get the details of a specific Observation Unit
      tags:
      - Observation Units
    put:
      description: Update an existing Observation Units
      parameters:
      - description: The unique ID of the specific Observation Unit
        in: path
        name: observationUnitDbId
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/authorizationHeader'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ObservationUnitNewRequest'
      responses:
        '200':
          $ref: '#/components/responses/ObservationUnitSingleResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
      summary: Update an existing Observation Units
      tags:
      - Observation Units
  /ontologies:
    get:
      description: Call to retrieve a list of observation variable ontologies available in the system.
      parameters:
      - description: The unique identifier for an ontology definition
        in: query
        name: ontologyDbId
        required: false
        schema:
          type: string
      - $ref: '#/components/parameters/page'
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/authorizationHeader'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
                  metadata:
                    $ref: '#/components/schemas/metadata'
                  result:
                    properties:
                      data:
                        items:
                          $ref: '#/components/schemas/Ontology'
                        type: array
                    required:
                    - data
                    type: object
                required:
                - metadata
                - result
                title: OntologyListResponse
                type: object
          description: OK
          headers: {}
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
      summary: Get the Ontologies
      tags:
      - Ontologies
  /scales:
    get:
      description: 'Returns a list of Scales available on a server.


        An Observation Variable has 3 critical parts; A Trait being observed, a Method for making the observation, and a Scale on which the observation can be measured and compared with other observations.'
      parameters:
      - description: The unique identifier for a scale
        in: query
        name: scaleDbId
        required: false
        schema:
          type: string
      - description: The unique identifier for an observation variable
        in: query
        name: observationVariableDbId
        required: false
        schema:
          type: string
      - $ref: '#/components/parameters/externalReferenceID'
      - $ref: '#/components/parameters/externalReferenceSource'
      - $ref: '#/components/parameters/page'
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/authorizationHeader'
      responses:
        '200':
          $ref: '#/components/responses/ScaleListResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
      summary: Get the Scales
      tags:
      - Scales
    post:
      description: Create new scale objects in the database
      parameters:
      - $ref: '#/components/parameters/authorizationHeader'
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/ScaleNewRequest'
              type: array
      responses:
        '200':
          $ref: '#/components/responses/ScaleListResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
      summary: Add new Scales
      tags:
      - Scales
  /scales/{scaleDbId}:
    get:
      description: 'Retrieve details about a specific scale


        An Observation Variable has 3 critical parts: A Trait being observed, a Method for making the observation, and a Scale on which the observation can be measured and compared with other observations.'
      parameters:
      - description: Id of the scale to retrieve details of.
        in: path
        name: scaleDbId
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/authorizationHeader'
      responses:
        '200':
          $ref: '#/components/responses/ScaleSingleResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
      summary: Get the details of a specific Scale
      tags:
      - Scales
    put:
      description: Update the details of an existing scale
      parameters:
      - description: Id of the scale to retrieve details of.
        in: path
        name: scaleDbId
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/authorizationHeader'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScaleNewRequest'
      responses:
        '200':
          $ref: '#/components/responses/ScaleSingleResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
      summary: Update an existing Scale
      tags:
      - Scales
  /search/images:
    post:
      description: 'Get filtered set of image meta data


        Implementation Notes


        - ''''imageURL'''' should be a complete URL describing the location of the image. There is no BrAPI call for retrieving the image content, so it could be on a different path, or a different host.


        - ''descriptiveOntologyTerm'' can be thought of as Tags for the image. These could be simple descriptive words, or ontology references, or full ontology URI''s.


        See Search Services for additional implementation details.'
      parameters:
      - $ref: '#/components/parameters/authorizationHeader'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImageSearchRequest'
      responses:
        '200':
          $ref: '#/components/responses/ImageListResponse'
        '202':
          $ref: '#/components/responses/202AcceptedSearchResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
      summary: Submit a search request for Images
      tags:
      - Images
  /search/images/{searchResultsDbId}:
    get:
      description: 'Get filtered set of image meta data


        Implementation Notes


        - ''''imageURL'''' should be a complete URL describing the location of the image. There is no BrAPI call for retrieving the image content, so it could be on a different path, or a different host.


        - ''''descriptiveOntologyTerm'''' can be thought of as Tags for the image. These could be simple descriptive words, or ontology references, or full ontology URI''''s.'
      parameters:
      - $ref: '#/components/parameters/searchResultsDbId'
      - $ref: '#/components/parameters/page'
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/authorizationHeader'
      responses:
        '200':
          $ref: '#/components/responses/ImageListResponse'
        '202':
          $ref: '#/components/responses/202AcceptedSearchResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
      summary: Get the results of an Images search request
      tags:
      - Images
  /search/observations:
    post:
      description: Submit a search request for a set of Observations. Returns an Id which reference the results of this search
      parameters:
      - $ref: '#/components/parameters/authorizationHeader'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ObservationSearchRequest'
      responses:
        '200':
          $ref: '#/components/responses/ObservationListResponse'
        '202':
          $ref: '#/components/responses/202AcceptedSearchResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
      summary: Submit a search request for a set of Observations
      tags:
      - Observations
  /search/observations/{searchResultsDbId}:
    get:
      description: 'Returns a list of Observations based on search criteria.


        observationTimeStamp - Iso Standard 8601.


        observationValue data type inferred from the ontology'
      parameters:
      - $ref: '#/components/parameters/acceptHeader'
      - $ref: '#/components/parameters/authorizationHeader'
      - $ref: '#/components/parameters/searchResultsDbId'
      - $ref: '#/components/parameters/page'
      - $ref: '#/components/parameters/pageSize'
      responses:
        '200':
          $ref: '#/components/responses/ObservationListResponse'
        '202':
          $ref: '#/components/responses/202AcceptedSearchResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
      summary: Returns a list of Observations based on search criteria.
      tags:
      - Observations
  /search/observationunits:
    post:
      description: "Returns a list of observationUnit with the observed Phenotypes.\n\nSee Search Services for additional implementation details.\n\nUse case - this section allows to get a dataset from multiple studies. It allows to integrate data from several databases.\n\nExample Use cases \n\n- Study a panel of germplasm across multiple studies\n\n- Get all data for a specific study \n\n- Get simple atomic phenotyping values \n\n- Study Locations for adaptation to climate change\n\n- Find phenotypes that are from after a certain timestamp\n\nobservationTimeStampRangeStart and observationTimeStampRangeEnd use Iso Standard 8601.\n\nobservationValue data type inferred from the ontology"
      parameters:
      - $ref: '#/components/parameters/authorizationHeader'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ObservationUnitSearchRequest'
      responses:
        '200':
          $ref: '#/components/responses/ObservationUnitListResponse'
        '202':
          $ref: '#/components/responses/202AcceptedSearchResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
      summary: Submit a search request for Observation Units
      tags:
      - Observation Units
  /search/observationunits/{searchResultsDbId}:
    get:
      description: 'Returns a list of observationUnit with the observed Phenotypes.


        See Search Services for additional implementation details.'
      parameters:
      - $ref: '#/components/parameters/searchResultsDbId'
      - $ref: '#/components/parameters/page'
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/authorizationHeader'
      responses:
        '200':
          $ref: '#/components/responses/ObservationUnitListResponse'
        '202':
          $ref: '#/components/responses/202AcceptedSearchResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
      summary: Observation Unit Search
      tags:
      - Observation Units
  /search/variables:
    post:
      description: 'Search observation variables.


        See Search Services for additional implementation details.'
      parameters:
      - $ref: '#/components/parameters/authorizationHeader'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ObservationVariableSearchRequest'
      responses:
        '200':
          $ref: '#/components/responses/ObservationVariableListResponse'
        '202':
          $ref: '#/components/responses/202AcceptedSearchResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
      summary: Submit a search request for Observation Variables
      tags:
      - Observation Variables
  /search/variables/{searchResultsDbId}:
    get:
      description: 'Search observation variables.


        See Search Services for additional implementation details.'
      parameters:
      - $ref: '#/components/parameters/searchResultsDbId'
      - $ref: '#/components/parameters/page'
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/authorizationHeader'
      responses:
        '200':
          $ref: '#/components/responses/ObservationVariableListResponse'
        '202':
          $ref: '#/components/responses/202AcceptedSearchResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
      summary: Get the results of a Observation Variable search request
      tags:
      - Observation Variables
  /traits:
    get:
      description: 'Call to retrieve a list of traits available in the system and their associated variables.


        An Observation Variable has 3 critical parts; A Trait being observed, a Method for making the observation, and a Scale on which the observation can be measured and compared with other observations.'''
      parameters:
      - description: The unique identifier for a trait
        in: query
        name: traitDbId
        required: false
        schema:
          type: string
      - description: The unique identifier for an observation variable
        in: query
        name: observationVariableDbId
        required: false
        schema:
          type: string
      - $ref: '#/components/parameters/externalReferenceID'
      - $ref: '#/components/parameters/externalReferenceSource'
      - $ref: '#/components/parameters/page'
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/authorizationHeader'
      responses:
        '200':
          $ref: '#/components/responses/TraitListResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
      summary: Get the Traits
      tags:
      - Traits
    post:
      description: Create new trait objects in the database
      parameters:
      - $ref: '#/components/parameters/authorizationHeader'
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/TraitNewRequest'
              type: array
      responses:
        '200':
          $ref: '#/components/responses/TraitListResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
      summary: Add new Traits
      tags:
      - Traits
  /traits/{traitDbId}:
    get:
      description: 'Retrieve the details of a single trait


        An Observation Variable has 3 critical parts: A Trait being observed, a Method for making the observation, and a Scale on which the observation can be measured and compared with other observations.'
      parameters:
      - description: Id of the trait to retrieve details of.
        in: path
        name: traitDbId
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/authorizationHeader'
      responses:
        '200':
          $ref: '#/components/responses/TraitSingleResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
      summary: Get the details of a specific Trait
      tags:
      - Traits
    put:
      description: Update an existing trait
      parameters:
      - description: Id of the trait to retrieve details of.
        in: path
        name: traitDbId
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/authorizationHeader'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TraitNewRequest'
      responses:
        '200':
          $ref: '#/components/responses/TraitSingleResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
      summary: Update an existing Trait
      tags:
      - Traits
  /variables:
    get:
      description: Call to retrieve a list of observationVariables available in the system.
      parameters:
      - description: Variable's unique ID
        in: query
        name: observationVariableDbId
        required: false
        schema:
          type: string
      - description: Variable's trait class (phenological, physiological, morphological, etc.)
        in: query
        name: traitClass
        required: false
        schema:
          type: string
      - description: The unique ID of a studies to filter on
        in: query
        name: studyDbId
        required: false
        schema:
          type: string
      - $ref: '#/components/parameters/externalReferenceID'
      - $ref: '#/components/parameters/externalReferenceSource'
      - $ref: '#/components/parameters/page'
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/authorizationHeader'
      responses:
        '200':
          $ref: '#/components/responses/ObservationVariableListResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
      summary: Get the Observation Variables
      tags:
      - Observation Variables
    post:
      description: Add new Observation Variables to the system.
      parameters:
      - $ref: '#/components/parameters/authorizationHeader'
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/ObservationVariableNewRequest'
              type: array
      responses:
        '200':
          $ref: '#/components/responses/ObservationVariableListResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
      summary: Add new Observation Variables
      tags:
      - Observation Variables
  /variables/{observationVariableDbId}:
    get:
      description: Retrieve variable details
      parameters:
      - description: string id of the variable
        in: path
        name: observationVariableDbId
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/authorizationHeader'
      responses:
        '200':
          $ref: '#/components/responses/ObservationVariableSingleResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
      summary: Get the details for a specific Observation Variable
      tags:
      - Observation Variables
    put:
      description: Update an existing Observation Variable
      parameters:
      - description: string id of the variable
        in: path
        name: observationVariableDbId
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/authorizationHeader'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ObservationVariableNewRequest'
      responses:
        '200':
          $ref: '#/components/responses/ObservationVariableSingleResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
      summary: Update an existing Observation Variable
      tags:
      - Observation Variables
security:
- AuthorizationToken: []
servers:
- url: https://test-server.brapi.org/brapi/v2
tags:
- description: Retrieve and edit information about Observations
  externalDocs:
    description: Docs
    url: https://wiki.brapi.org/
  name: Observations
- description: Retrieve and edit information about Observation Units. An Observation Unit can be anything in a field you might observe as part of a Study
  externalDocs:
    description: Docs
    url: https://wiki.brapi.org/
  name: Observation Units
- description: Retrieve and edit information about Observation Variables. An Observation Variable is composed by the unique combination of one Trait, one Method and one Scale.
  externalDocs:
    description: Docs
    url: https://wiki.brapi.org/
  name: Observation Variables
- description: Retrieve and edit information about Methods.
  externalDocs:
    description: Docs
    url: https://wiki.brapi.org/
  name: Methods
- description: Retrieve and edit information about Traits.
  externalDocs:
    description: Docs
    url: https://wiki.brapi.org/
  name: Traits
- description: Retrieve and edit information about Scales.
  externalDocs:
    description: Docs
    url: https://wiki.brapi.org/
  name: Scales
- description: Retrieve and edit information about Ontologies used by a server.
  externalDocs:
    description: Docs
    url: https://wiki.brapi.org/
  name: Ontologies
- description: Retrieve and edit Images and Image meta-data
  externalDocs:
    description: Docs
    url: https://wiki.brapi.org/
  name: Images
- description: Retrieve and edit information about Events. Events can be planned like watering or fertilizing, or unplanned like weather or pests.
  externalDocs:
    description: Docs
    url: https://wiki.brapi.org/
  name: Events