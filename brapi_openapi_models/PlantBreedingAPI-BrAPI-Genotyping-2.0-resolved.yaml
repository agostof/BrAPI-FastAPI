---
openapi: 3.0.0
info:
  title: BrAPI-Genotyping
  description: "The Breeding API (BrAPI) is a Standardized REST ful Web Service API Specification for communicating Plant Breeding Data. BrAPI allows for easy data sharing between databases and tools involved in plant breeding.\n<div class=\"brapi-section\">\n<h2 class=\"brapi-section-title\">General Reference Documentation</h2>\n<div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/URL_Structure.md\">URL Structure</a></div>\n<div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Response_Structure.md\">Response Structure</a></div>\n<div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Date_Time_Encoding.md\">Date/Time Encoding</a></div>\n<div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Location_Encoding.md\">Location Encoding</a></div>\n<div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Error_Handling.md\">Error Handling</a></div>\n<div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Search_Services.md\">Search Services</a></div>\n</div>\n\n<div class=\"brapi-section\">\n<h2 class=\"brapi-section-title\">BrAPI Core</h2>\n<div class=\"brapi-section-description\">The BrAPI Core module contains high level entities used for organization and management. This includes Programs, Trials, Studies, Locations, People, and Lists</div>\n<div class=\"version-number\">V2.0</div>\n<div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Core\">GitHub</a></div>\n<div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Core\">SwaggerHub</a></div>\n<div class=\"link-btn\"><a href=\"https://brapicore.docs.apiary.io\">Apiary</a></div>\n<div class=\"stop-float\"></div>\n</div>\n\n<div class=\"brapi-section\">\n<h2 class=\"brapi-section-title\">BrAPI Phenotyping</h2>\n<div class=\"brapi-section-description\">The BrAPI Phenotyping module contains entities related to phenotypic observations. This includes Observation Units, Observations, Observation Variables, Traits, Scales, Methods, and Images</div>\n<div class=\"version-number\">V2.0</div>\n<div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Phenotyping\">GitHub</a></div>\n<div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Phenotyping\">SwaggerHub</a></div>\n<div class=\"link-btn\"><a href=\"https://brapiphenotyping.docs.apiary.io\">Apiary</a></div>\n<div class=\"stop-float\"></div>\n</div>\n\n<div class=\"current-brapi-section brapi-section\">\n<h2 class=\"brapi-section-title\">BrAPI Genotyping</h2>\n<div class=\"brapi-section-description\">The BrAPI Genotyping module contains entities related to genotyping analysis. This includes Samples, Markers, Variant Sets, Variants, Call Sets, Calls, References, Reads, and Vendor Orders</div>\n<div class=\"version-number\">V2.0</div>\n<div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Genotyping\">GitHub</a></div>\n<div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Genotyping\">SwaggerHub</a></div>\n<div class=\"link-btn\"><a href=\"https://brapigenotyping.docs.apiary.io\">Apiary</a></div>\n<div class=\"stop-float\"></div>\n</div>\n\n<div class=\"brapi-section\">\n<h2 class=\"brapi-section-title\">BrAPI Germplasm</h2>\n<div class=\"brapi-section-description\">The BrAPI Germplasm module contains entities related to germplasm management. This includes Germplasm, Germplasm Attributes, Seed Lots, Crosses, Pedigree, and Progeny</div>\n<div class=\"version-number\">V2.0</div>\n<div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Germplasm\">GitHub</a></div>\n<div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Germplasm\">SwaggerHub</a></div>\n<div class=\"link-btn\"><a href=\"https://brapigermplasm.docs.apiary.io\">Apiary</a></div>\n<div class=\"stop-float\"></div>\n</div>\n\n<style>\n.link-btn{\nfloat: left; \nmargin: 2px 10px 0 0; \npadding: 0 5px; \nborder-radius: 5px; \nbackground-color: #ddd;\n}\n.stop-float{\n  clear: both;\n}\n.version-number{\n  float: left; \n  margin: 5px 10px 0 5px;\n}\n.brapi-section-title{\n  margin: 0 10px 0 0;\n  font-size: 20px;\n}\n.current-brapi-section{\n  font-weight: bolder;\n  border-radius: 5px; \n  background-color: #ddd;\n}\n.brapi-section{\n  padding: 5px 5px; \n}\n.brapi-section-description{\n  margin: 5px 0 0 5px;\n}\n</style>"
  version: "2.0"
servers:
- url: https://test-server.brapi.org/brapi/v2
security:
- AuthorizationToken: []
tags:
- name: Calls
  description: Individual genotype allele calls
  externalDocs:
    description: Docs
    url: https://wiki.brapi.org/
- name: Call Sets
  description: Each Call Set is related to one physical sample
  externalDocs:
    description: Docs
    url: https://wiki.brapi.org/
- name: Variants
  description: Information about Variants, also called Markers
  externalDocs:
    description: Docs
    url: https://wiki.brapi.org/
- name: Variant Sets
  description: Information about Variant Sets, also called Data Sets or Allele Matrices
  externalDocs:
    description: Docs
    url: https://wiki.brapi.org/
- name: Samples
  description: Information about physical samples
  externalDocs:
    description: Docs
    url: https://wiki.brapi.org/
- name: References
  description: Genetic sequences used for reference
  externalDocs:
    description: Docs
    url: https://wiki.brapi.org/
- name: Reference Sets
  description: Collections of references
  externalDocs:
    description: Docs
    url: https://wiki.brapi.org/
- name: Genome Maps
  description: Information about physical and genetic maps
  externalDocs:
    description: Docs
    url: https://wiki.brapi.org/
- name: Vendor
  description: This interface is specific to facilities that performs an external analysis, such as genotyping facilities. The interface should be implemented by that facility''s server. The breeding database is the client of this interface.
  externalDocs:
    description: Docs
    url: https://wiki.brapi.org/
paths:
  /calls:
    get:
      tags:
      - Calls
      summary: Gets a filtered list of `Calls`
      description: |-
        Gets a filtered list of `Call` JSON objects.

        ** THIS ENDPOINT USES TOKEN BASED PAGING **
      parameters:
      - name: callSetDbId
        in: query
        description: The ID of the `CallSet` to be retrieved.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: variantDbId
        in: query
        description: The ID of the `Variant` to be retrieved.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: variantSetDbId
        in: query
        description: The ID of the `VariantSet` to be retrieved.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: expandHomozygotes
        in: query
        description: Should homozygotes be expanded (true) or collapsed into a single occurrence (false)
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: unknownString
        in: query
        description: The string to use as a representation for missing data
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: sepPhased
        in: query
        description: The string to use as a separator for phased allele calls
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: sepUnphased
        in: query
        description: The string to use as a separator for unphased allele calls
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: pageToken
        in: query
        description: "Used to request a specific page of data to be returned.\n\nTokenized pages are for large data sets which can not be efficiently broken into indexed pages. Use the nextPageToken and prevPageToken from a prior response to construct a query and move to the next or previous page respectively. "
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: 33c27874
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 1000
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallsListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /callsets:
    get:
      tags:
      - Call Sets
      summary: Gets a filtered list of `CallSet` JSON objects.
      description: Gets a filtered list of `CallSet` JSON objects.
      parameters:
      - name: callSetDbId
        in: query
        description: The ID of the `CallSet` to be retrieved.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: callSetName
        in: query
        description: The human readable name of the `CallSet` to be retrieved.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: variantSetDbId
        in: query
        description: The ID of the `VariantSet` to be retrieved.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: sampleDbId
        in: query
        description: The ID of the `VariantSet` to be retrieved.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: germplasmDbId
        in: query
        description: Return only call sets generated from the Sample of this Germplasm
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: page
        in: query
        description: |-
          Used to request a specific page of data to be returned.

          The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: "0"
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 1000
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallSetsListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /callsets/{callSetDbId}:
    get:
      tags:
      - Call Sets
      summary: Gets a `CallSet` by ID.
      description: Gets a `CallSet` by ID.
      parameters:
      - name: callSetDbId
        in: path
        description: The ID of the `CallSet` to be retrieved.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/callSetResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found
  /callsets/{callSetDbId}/calls:
    get:
      tags:
      - Call Sets
      summary: Gets a list of `Calls` associated with a `CallSet`.
      description: |-
        Gets a list of `Calls` associated with a `CallSet`.

        ** THIS ENDPOINT USES TOKEN BASED PAGING **
      parameters:
      - name: callSetDbId
        in: path
        description: The ID of the `CallSet` to be retrieved.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: expandHomozygotes
        in: query
        description: Should homozygotes be expanded (true) or collapsed into a single occurrence (false)
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: unknownString
        in: query
        description: The string to use as a representation for missing data
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: sepPhased
        in: query
        description: The string to use as a separator for phased allele calls
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: sepUnphased
        in: query
        description: The string to use as a separator for unphased allele calls
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: pageToken
        in: query
        description: "Used to request a specific page of data to be returned.\n\nTokenized pages are for large data sets which can not be efficiently broken into indexed pages. Use the nextPageToken and prevPageToken from a prior response to construct a query and move to the next or previous page respectively. "
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: 33c27874
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 1000
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallsListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /maps:
    get:
      tags:
      - Genome Maps
      summary: Get the Genomic Maps
      description: Get list of maps
      parameters:
      - name: commonCropName
        in: query
        description: The common name of the crop
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: mapDbId
        in: query
        description: The primary DbId for this genomic map
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: mapPUI
        in: query
        description: The DOI or other permanent identifier for this genomic map
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: scientificName
        in: query
        description: Full scientific binomial format name. This includes Genus, Species, and Sub-species
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: type
        in: query
        description: Type of map
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - physical
          - genomic
      - name: programDbId
        in: query
        description: Unique Id to filter by Program
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: trialDbId
        in: query
        description: Unique Id to filter by Trial
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: studyDbId
        in: query
        description: Unique Id to filter by Study
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: page
        in: query
        description: |-
          Used to request a specific page of data to be returned.

          The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: "0"
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 1000
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenomeMapListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /maps/{mapDbId}:
    get:
      tags:
      - Genome Maps
      summary: Get the details of a specific Genomic Map
      description: Provides the number of markers on each linkageGroup and the max position on the linkageGroup
      parameters:
      - name: mapDbId
        in: path
        description: The internal db id of a selected map
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenomeMapSingleResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found
  /maps/{mapDbId}/linkagegroups:
    get:
      tags:
      - Genome Maps
      summary: Get the Linkage Groups of a specific Genomic Map
      description: Get the Linkage Groups of a specific Genomic Map. A Linkage Group is the BrAPI generic term for a named section of a map. A Linkage Group can represent a Chromosome, Scaffold, or Linkage Group.
      parameters:
      - name: mapDbId
        in: path
        description: The internal db id of a selected map
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: page
        in: query
        description: |-
          Used to request a specific page of data to be returned.

          The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: "0"
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 1000
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkageGroupListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found
  /markerpositions:
    get:
      tags:
      - Genome Maps
      summary: Get marker position info
      description: Get marker position information, based on Map, Linkage Group, and Marker ID
      parameters:
      - name: mapDbId
        in: query
        description: unique id of a map
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: linkageGroupName
        in: query
        description: The chromosome identifier or the generic linkage group identifier if the chromosome is not applicable.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: variantDbId
        in: query
        description: The unique id for a marker
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: minPosition
        in: query
        description: The minimum position
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: maxPosition
        in: query
        description: The maximum position
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: page
        in: query
        description: |-
          Used to request a specific page of data to be returned.

          The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: "0"
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 1000
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MarkerPositionListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /references:
    get:
      tags:
      - References
      summary: Gets a filtered list of `Reference` objects.
      description: '`GET /references` will return a filtered list of `Reference` JSON objects.'
      parameters:
      - name: referenceDbId
        in: query
        description: The ID of the `Reference` to be retrieved.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: referenceSetDbId
        in: query
        description: The ID of the `ReferenceSet` to be retrieved.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: accession
        in: query
        description: If set, return the reference sets for which the `accession` matches this string (case-sensitive, exact match).
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: md5checksum
        in: query
        description: If specified, return the references for which the `md5checksum` matches this string (case-sensitive, exact match).
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: isDerived
        in: query
        description: If the reference is derived from a source sequence
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: minLength
        in: query
        description: The minimum length of the reference sequences to be retrieved.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: maxLength
        in: query
        description: The maximum length of the reference sequences to be retrieved.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: page
        in: query
        description: |-
          Used to request a specific page of data to be returned.

          The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: "0"
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 1000
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReferencesListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /references/{referenceDbId}:
    get:
      tags:
      - References
      summary: Gets a `Reference` by ID.
      description: |-
        `GET /references/{reference_id}` will return a JSON version of
        `Reference`.
      parameters:
      - name: referenceDbId
        in: path
        description: The ID of the `Reference` to be retrieved.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReferenceSingleResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found
  /references/{referenceDbId}/bases:
    get:
      tags:
      - References
      summary: Lists `Reference` bases by ID and optional range.
      description: Lists `Reference` bases by ID and optional range.
      parameters:
      - name: referenceDbId
        in: path
        description: The ID of the `Reference` to be retrieved.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: start
        in: query
        description: |-
          The start position (0-based) of this query. Defaults to 0.
          Genomic positions are non-negative integers less than reference length.
          Requests spanning the join of circular genomes are represented as
          two requests one on each side of the join (position 0).
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: end
        in: query
        description: The end position (0-based, exclusive) of this query. Defaults to the length of this `Reference`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: pageToken
        in: query
        description: |-
          The continuation token, which is used to page through large result sets.
          To get the next page of results, set this parameter to the value of
          `next_page_token` from the previous response.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReferenceBasesResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found
  /referencesets:
    get:
      tags:
      - Reference Sets
      summary: Gets a list of `ReferenceSets`.
      description: Gets a filtered list of `ReferenceSets`.
      parameters:
      - name: referenceSetDbId
        in: query
        description: The ID of the `ReferenceSet` to be retrieved.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: accession
        in: query
        description: If set, return the reference sets for which the `accession` matches this string (case-sensitive, exact match).
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: assemblyPUI
        in: query
        description: If set, return the reference sets for which the `assemblyId` matches this string (case-sensitive, exact match).
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: md5checksum
        in: query
        description: If set, return the reference sets for which the `md5checksum` matches this string (case-sensitive, exact match).
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: page
        in: query
        description: |-
          Used to request a specific page of data to be returned.

          The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: "0"
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 1000
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReferenceSetsListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /referencesets/{referenceSetDbId}:
    get:
      tags:
      - Reference Sets
      summary: Gets a `ReferenceSet` by ID.
      description: Gets a `ReferenceSet` by ID.
      parameters:
      - name: referenceSetDbId
        in: path
        description: The ID of the `ReferenceSet` to be retrieved.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReferenceSetsSingleResponse'
  /samples:
    get:
      tags:
      - Samples
      summary: Get the Samples
      description: Used to retrieve list of Samples from a Sample Tracking system based on some search criteria.
      parameters:
      - name: sampleDbId
        in: query
        description: the internal DB id for a sample
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: observationUnitDbId
        in: query
        description: the internal DB id for an observation unit where a sample was taken from
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: plateDbId
        in: query
        description: the internal DB id for a plate of samples
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: germplasmDbId
        in: query
        description: the internal DB id for a germplasm
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: studyDbId
        in: query
        description: Filter by study DbId
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: externalReferenceID
        in: query
        description: An external reference ID. Could be a simple string or a URI. (use with `externalReferenceSource` parameter)
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: externalReferenceSource
        in: query
        description: An identifier for the source system or database of an external reference (use with `externalReferenceID` parameter)
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: page
        in: query
        description: |-
          Used to request a specific page of data to be returned.

          The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: "0"
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 1000
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SampleListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
    post:
      tags:
      - Samples
      summary: Add new Samples
      description: Call to register the event of a sample being taken. Sample ID is assigned as a result of the operation and returned in response.
      parameters:
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/SampleNewRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SampleListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /samples/{sampleDbId}:
    get:
      tags:
      - Samples
      summary: Get the details of a specific Sample
      description: Used to retrieve the details of a single Sample from a Sample Tracking system.
      parameters:
      - name: sampleDbId
        in: path
        description: the internal DB id for a sample
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SampleSingleResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found
    put:
      tags:
      - Samples
      summary: Update the details of an existing Sample
      description: Update the details of an existing Sample
      parameters:
      - name: sampleDbId
        in: path
        description: the internal DB id for a sample
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SampleNewRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SampleSingleResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found
  /search/calls:
    post:
      tags:
      - Calls
      summary: Submit a search request for `Calls`
      description: |-
        Submit a search request for `Calls`

        ** THIS ENDPOINT USES TOKEN BASED PAGING **
      parameters:
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        description: Study Search request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CallsSearchRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallsListResponse'
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/202AcceptedSearchResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /search/calls/{searchResultsDbId}:
    get:
      tags:
      - Calls
      summary: Returns a filtered list of `Call` JSON objects.
      description: |-
        Returns a filtered list of `Call` JSON objects.

        See Search Services for additional implementation details.

        ** THIS ENDPOINT USES TOKEN BASED PAGING **
      parameters:
      - name: searchResultsDbId
        in: path
        description: Unique identifier which references the search results
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pageToken
        in: query
        description: "Used to request a specific page of data to be returned.\n\nTokenized pages are for large data sets which can not be efficiently broken into indexed pages. Use the nextPageToken and prevPageToken from a prior response to construct a query and move to the next or previous page respectively. "
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: 33c27874
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 1000
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallsListResponse'
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/202AcceptedSearchResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /search/callsets:
    post:
      tags:
      - Call Sets
      summary: Gets a list of call sets matching the search criteria.
      description: Gets a list of call sets matching the search criteria.
      parameters:
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        description: Study Search request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/callSetsSearchRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallSetsListResponse'
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/202AcceptedSearchResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /search/callsets/{searchResultsDbId}:
    get:
      tags:
      - Call Sets
      summary: Gets a list of call sets matching the search criteria.
      description: Gets a list of call sets matching the search criteria.
      parameters:
      - name: searchResultsDbId
        in: path
        description: Unique identifier which references the search results
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: page
        in: query
        description: |-
          Used to request a specific page of data to be returned.

          The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: "0"
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 1000
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallSetsListResponse'
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/202AcceptedSearchResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /search/markerpositions:
    post:
      tags:
      - Genome Maps
      summary: Get marker position info
      description: Get marker position information, based on Map, Linkage Group, and Marker ID
      parameters:
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MarkerPositionSearchRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MarkerPositionListResponse'
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/202AcceptedSearchResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /search/markerpositions/{searchResultsDbId}:
    get:
      tags:
      - Genome Maps
      summary: Get marker position info
      description: Get marker position information, based on Map, Linkage Group, and Marker ID
      parameters:
      - name: searchResultsDbId
        in: path
        description: Unique identifier which references the search results
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: page
        in: query
        description: |-
          Used to request a specific page of data to be returned.

          The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: "0"
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 1000
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MarkerPositionListResponse'
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/202AcceptedSearchResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /search/references:
    post:
      tags:
      - References
      summary: Gets a list of `Reference` matching the search criteria.
      description: |-
        `POST /references/search` must accept a JSON version of
        `SearchReferencesRequest` as the post body and will return a JSON
        version of `SearchReferencesResponse`.
      parameters:
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        description: References Search request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReferencesSearchRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReferencesListResponse'
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/202AcceptedSearchResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /search/references/{searchResultsDbId}:
    get:
      tags:
      - References
      summary: Gets a list of `Reference` matching the search criteria.
      description: |-
        `POST /references/search` must accept a JSON version of
        `SearchReferencesRequest` as the post body and will return a JSON
        version of `SearchReferencesResponse`.
      parameters:
      - name: searchResultsDbId
        in: path
        description: Unique identifier which references the search results
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: page
        in: query
        description: |-
          Used to request a specific page of data to be returned.

          The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: "0"
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 1000
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReferencesListResponse'
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/202AcceptedSearchResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /search/referencesets:
    post:
      tags:
      - Reference Sets
      summary: Gets a list of `ReferenceSet` matching the search criteria.
      description: Gets a list of `ReferenceSet` matching the search criteria.
      parameters:
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReferenceSetsSearchRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReferenceSetsListResponse'
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/202AcceptedSearchResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /search/referencesets/{searchResultsDbId}:
    get:
      tags:
      - Reference Sets
      summary: Gets a list of `ReferenceSet` matching the search criteria.
      description: Gets a list of `ReferenceSet` matching the search criteria.
      parameters:
      - name: searchResultsDbId
        in: path
        description: Unique identifier which references the search results
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: page
        in: query
        description: |-
          Used to request a specific page of data to be returned.

          The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: "0"
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 1000
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReferenceSetsListResponse'
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/202AcceptedSearchResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /search/samples:
    post:
      tags:
      - Samples
      summary: Submit a search request for Samples
      description: |-
        Used to retrieve list of Samples from a Sample Tracking system based on some search criteria.

        See Search Services for additional implementation details.
      parameters:
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SampleSearchRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SampleListResponse'
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/202AcceptedSearchResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /search/samples/{searchResultsDbId}:
    get:
      tags:
      - Samples
      summary: Get the results of a Samples search request
      description: |-
        Used to retrieve list of Samples from a Sample Tracking system based on some search criteria.

        See Search Services for additional implementation details.
      parameters:
      - name: searchResultsDbId
        in: path
        description: Unique identifier which references the search results
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: page
        in: query
        description: |-
          Used to request a specific page of data to be returned.

          The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: "0"
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 1000
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SampleListResponse'
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/202AcceptedSearchResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found
  /search/variants:
    post:
      tags:
      - Variants
      summary: Gets a list of `Variant` matching the search criteria.
      description: |-
        Gets a list of `Variant` matching the search criteria.

        ** THIS ENDPOINT USES TOKEN BASED PAGING **
      parameters:
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        description: Study Search request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/variantsSearchRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VariantsListResponse'
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/202AcceptedSearchResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /search/variants/{searchResultsDbId}:
    get:
      tags:
      - Variants
      summary: Gets a list of `Variant` matching the search criteria.
      description: |-
        Gets a list of `Variant` matching the search criteria.

        ** THIS ENDPOINT USES TOKEN BASED PAGING **
      parameters:
      - name: searchResultsDbId
        in: path
        description: Unique identifier which references the search results
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pageToken
        in: query
        description: "Used to request a specific page of data to be returned.\n\nTokenized pages are for large data sets which can not be efficiently broken into indexed pages. Use the nextPageToken and prevPageToken from a prior response to construct a query and move to the next or previous page respectively. "
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: 33c27874
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 1000
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VariantsListResponse'
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/202AcceptedSearchResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /search/variantsets:
    post:
      tags:
      - Variant Sets
      summary: Gets a list of `VariantSet` matching the search criteria.
      description: Gets a list of `VariantSet` matching the search criteria.
      parameters:
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        description: Study Search request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VariantSetsSearchRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VariantSetsListResponse'
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/202AcceptedSearchResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /search/variantsets/{searchResultsDbId}:
    get:
      tags:
      - Variant Sets
      summary: Gets a list of `VariantSet` matching the search criteria.
      description: Gets a list of `VariantSet` matching the search criteria.
      parameters:
      - name: searchResultsDbId
        in: path
        description: Unique identifier which references the search results
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: page
        in: query
        description: |-
          Used to request a specific page of data to be returned.

          The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: "0"
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 1000
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VariantSetsListResponse'
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/202AcceptedSearchResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /variants:
    get:
      tags:
      - Variants
      summary: Gets a filtered list of `Variants`.
      description: |-
        Gets a filtered list of `Variants`.

        ** THIS ENDPOINT USES TOKEN BASED PAGING **
      parameters:
      - name: variantDbId
        in: query
        description: The ID of the `Variant` to be retrieved.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: variantSetDbId
        in: query
        description: The ID of the `VariantSet` to be retrieved.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: pageToken
        in: query
        description: "Used to request a specific page of data to be returned.\n\nTokenized pages are for large data sets which can not be efficiently broken into indexed pages. Use the nextPageToken and prevPageToken from a prior response to construct a query and move to the next or previous page respectively. "
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: 33c27874
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 1000
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VariantsListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /variants/{variantDbId}:
    get:
      tags:
      - Variants
      summary: Gets a `Variant` by ID.
      description: '`GET /variants/{id}` will return a JSON version of `Variant`.'
      parameters:
      - name: variantDbId
        in: path
        description: The ID of the `Variant` to be retrieved.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VariantSingleResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found
  /variants/{variantDbId}/calls:
    get:
      tags:
      - Variants
      summary: Gets a list of `Calls` associated with a `Variant`.
      description: |-
        The variant calls for this particular variant. Each one represents the determination of genotype with respect to this variant. `Calls` in this array are implicitly associated with this `Variant`.

        ** THIS ENDPOINT USES TOKEN BASED PAGING **
      parameters:
      - name: variantDbId
        in: path
        description: The ID of the `Variant` to be retrieved.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: expandHomozygotes
        in: query
        description: Should homozygotes be expanded (true) or collapsed into a single occurrence (false)
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: unknownString
        in: query
        description: The string to use as a representation for missing data
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: sepPhased
        in: query
        description: The string to use as a separator for phased allele calls
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: sepUnphased
        in: query
        description: The string to use as a separator for unphased allele calls
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: pageToken
        in: query
        description: "Used to request a specific page of data to be returned.\n\nTokenized pages are for large data sets which can not be efficiently broken into indexed pages. Use the nextPageToken and prevPageToken from a prior response to construct a query and move to the next or previous page respectively. "
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: 33c27874
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 1000
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallsListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /variantsets:
    get:
      tags:
      - Variant Sets
      summary: Gets a filtered list of `VariantSets`.
      description: Will return a filtered list of `VariantSet`.
      parameters:
      - name: variantSetDbId
        in: query
        description: The ID of the `VariantSet` to be retrieved.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: variantDbId
        in: query
        description: The ID of the `Variant` to be retrieved.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: callSetDbId
        in: query
        description: The ID of the `CallSet` to be retrieved.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: studyDbId
        in: query
        description: Filter by study DbId
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: studyName
        in: query
        description: Filter by study name
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: page
        in: query
        description: |-
          Used to request a specific page of data to be returned.

          The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: "0"
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 1000
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VariantSetsListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /variantsets/extract:
    post:
      tags:
      - Variant Sets
      summary: Create new `VariantSet` based on search results
      description: Will perform a search for `Calls` which match the search criteria in `variantSetsExtractRequest`. The results of the search will be used to create a new `VariantSet` on the server. The new `VariantSet` will be returned.
      parameters:
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        description: Study Search request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VariantSetsExtractRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/variantSetResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found
  /variantsets/{variantSetDbId}:
    get:
      tags:
      - Variant Sets
      summary: Gets a `VariantSet` by ID.
      description: This call will return a JSON version of a `VariantSet`.
      parameters:
      - name: variantSetDbId
        in: path
        description: The ID of the `Variant` to be retrieved.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/variantSetResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found
  /variantsets/{variantSetDbId}/calls:
    get:
      tags:
      - Variant Sets
      summary: Gets a list of `Calls` associated with a `VariantSet`.
      description: |-
        Gets a list of `Calls` associated with a `VariantSet`.

        ** THIS ENDPOINT USES TOKEN BASED PAGING **
      parameters:
      - name: variantSetDbId
        in: path
        description: The ID of the `VariantSet` to be retrieved.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: expandHomozygotes
        in: query
        description: Should homozygotes be expanded (true) or collapsed into a single occurrence (false)
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: unknownString
        in: query
        description: The string to use as a representation for missing data
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: sepPhased
        in: query
        description: The string to use as a separator for phased allele calls
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: sepUnphased
        in: query
        description: The string to use as a separator for unphased allele calls
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: pageToken
        in: query
        description: "Used to request a specific page of data to be returned.\n\nTokenized pages are for large data sets which can not be efficiently broken into indexed pages. Use the nextPageToken and prevPageToken from a prior response to construct a query and move to the next or previous page respectively. "
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: 33c27874
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 1000
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallsListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /variantsets/{variantSetDbId}/callsets:
    get:
      tags:
      - Variant Sets
      summary: Gets a list of `CallSets` associated with a `VariantSet`.
      description: Gets a list of `CallSets` associated with a `VariantSet`.
      parameters:
      - name: callSetDbId
        in: query
        description: The ID of the `CallSet` to be retrieved.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: callSetName
        in: query
        description: The human readable name of the `CallSet` to be retrieved.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: variantSetDbId
        in: path
        description: The ID of the `VariantSet` to be retrieved.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: page
        in: query
        description: |-
          Used to request a specific page of data to be returned.

          The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: "0"
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 1000
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallSetsListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /variantsets/{variantSetDbId}/variants:
    get:
      tags:
      - Variant Sets
      summary: Gets a `Variants` for a given `VariantSet`.
      description: |-
        This call will return an array of `Variants`.

        ** THIS ENDPOINT USES TOKEN BASED PAGING **
      parameters:
      - name: variantDbId
        in: query
        description: The ID of the `Variant` to be retrieved.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: variantSetDbId
        in: path
        description: The ID of the `VariantSet` to be retrieved.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pageToken
        in: query
        description: "Used to request a specific page of data to be returned.\n\nTokenized pages are for large data sets which can not be efficiently broken into indexed pages. Use the nextPageToken and prevPageToken from a prior response to construct a query and move to the next or previous page respectively. "
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: 33c27874
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 1000
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VariantsListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /vendor/orders:
    get:
      tags:
      - Vendor
      summary: List current available orders
      description: List current available orders
      parameters:
      - name: orderId
        in: query
        description: The order id returned by the vendor when the order was successfully submitted. From response of "POST /vendor/orders"
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: submissionId
        in: query
        description: The submission id returned by the vendor when a set of plates was successfully submitted. From response of "POST /vendor/plates"
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: page
        in: query
        description: |-
          Used to request a specific page of data to be returned.

          The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: "0"
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 1000
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VendorOrderListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
    post:
      tags:
      - Vendor
      summary: Submit New Order
      description: Submit a new order to a vendor
      parameters:
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VendorOrderSubmissionRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VendorOrderSubmissionSingleResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /vendor/orders/{orderId}/plates:
    get:
      tags:
      - Vendor
      summary: Get the Plates for a specific Order
      description: Retrieve the plate and sample details of an order being processed
      parameters:
      - name: orderId
        in: path
        description: The order id returned by the vendor when the order was successfully submitted.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: page
        in: query
        description: |-
          Used to request a specific page of data to be returned.

          The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: "0"
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 1000
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VendorPlateListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found
  /vendor/orders/{orderId}/results:
    get:
      tags:
      - Vendor
      summary: Get the results of a specific Order
      description: Retrieve the data files generated by the vendors analysis
      parameters:
      - name: orderId
        in: path
        description: The order id returned by the vendor when the order was successfully submitted.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: page
        in: query
        description: |-
          Used to request a specific page of data to be returned.

          The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: "0"
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 1000
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VendorResultFileListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found
  /vendor/orders/{orderId}/status:
    get:
      tags:
      - Vendor
      summary: Get the status of a specific Order
      description: Retrieve the current status of an order being processed
      parameters:
      - name: orderId
        in: path
        description: The order id returned by the vendor when the order was successfully submitted.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VendorOrderStatusResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found
  /vendor/plates:
    post:
      tags:
      - Vendor
      summary: Submit a new set of Sample data
      description: Submit a new set of Sample data
      parameters:
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VendorPlateSubmissionRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VendorPlateSubmissionIdSingleResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /vendor/plates/{submissionId}:
    get:
      tags:
      - Vendor
      summary: Get the data for a submitted set of plates
      description: Get data for a submitted set of plates
      parameters:
      - name: submissionId
        in: path
        description: The submission id returned by the vendor when a set of plates was successfully submitted. From response of "POST /vendor/plates"
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VendorPlateSubmissionSingleResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found
  /vendor/specifications:
    get:
      tags:
      - Vendor
      summary: Get the Vendor Specifications
      description: Defines the plate format specification for the vendor.
      parameters:
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VendorSpecificationSingleResponse'
components:
  schemas:
    Analysis:
      type: object
      properties:
        analysisDbId:
          type: string
          description: Unique identifier for this analysis description
          example: 6191a6bd
        analysisName:
          type: string
          description: A human readable name for this analysis
          example: Standard QC
        created:
          type: string
          description: The time at which this record was created, in ISO 8601 format.
          format: date-time
        description:
          type: string
          description: A human readable description of the analysis
          example: This is a formal description of a QC methodology. Blah blah blah ...
        software:
          type: array
          description: The software run to generate this analysis.
          example:
          - https://github.com/genotyping/QC
          items:
            type: string
        type:
          type: string
          description: The type of analysis.
          example: QC
        updated:
          type: string
          description: The time at which this record was last updated, in ISO 8601 format.
          format: date-time
      description: An analysis contains an interpretation of one or several experiments. (e.g. SNVs, copy number variations, methylation status) together with information about the methodology used.
    Call:
      type: object
      properties:
        additionalInfo:
          type: object
          additionalProperties:
            type: string
          description: Additional arbitrary info
        callSetDbId:
          type: string
          description: |-
            The ID of the call set this variant call belongs to.

            If this field is not present, the ordering of the call sets from a `SearchCallSetsRequest` over this `VariantSet` is guaranteed to match the ordering of the calls on this `Variant`. The number of results will also be the same.
          example: 16466f55
        callSetName:
          type: string
          description: The name of the call set this variant call belongs to. If this field is not present, the ordering of the call sets from a `SearchCallSetsRequest` over this `VariantSet` is guaranteed to match the ordering of the calls on this `Variant`. The number of results will also be the same.
          example: Sample_123_DNA_Run_456
        genotype:
          $ref: '#/components/schemas/ListValue'
        genotype_likelihood:
          type: array
          description: The genotype likelihood for this variant call. Each array entry represents how likely a specific genotype is for this call as log10(P(data | genotype)), analogous to the GL tag in the VCF spec. The value ordering is defined by the GL tag in the VCF spec.
          example:
          - 1.0
          items:
            type: number
            format: double
        phaseSet:
          type: string
          description: If this field is populated, this variant call's genotype ordering implies the phase of the bases and is consistent with any other variant calls on the same contig which have the same phase set string.
          example: 6410afc5
        variantDbId:
          type: string
          description: The ID of the variant this call belongs to.
          example: 538c8ecf
        variantName:
          type: string
          description: The name of the variant this call belongs to.
          example: Marker A
      description: |-
        A `Call` represents the determination of genotype with respect to a particular `Variant`.

        It may include associated information such as quality and phasing. For example, a call might assign a probability of 0.32 to the occurrence of a SNP named RS_1234 in a call set with the name NA_12345.
    CallSet:
      type: object
      properties:
        additionalInfo:
          type: object
          additionalProperties:
            type: string
          description: Additional arbitrary info
        callSetDbId:
          type: string
          description: The call set ID.
          example: eb2bfd3d
        callSetName:
          type: string
          description: The call set name.
          example: Sample_123_DNA_Run_456
        created:
          type: string
          description: The date this call set was created
          format: date-time
        sampleDbId:
          type: string
          description: The Biosample entity the call set data was generated from.
          example: 5e50e11d
        studyDbId:
          type: string
          description: The ID which uniquely identifies a study within the given database server
          example: 708149c1
        updated:
          type: string
          description: The time at which this call set was last updated
          format: date-time
        variantSetDbIds:
          type: array
          description: The IDs of the variant sets this call set has calls in.
          example:
          - cfd3d60f
          - a4e8bfe9
          items:
            type: string
      description: A CallSet is a collection of calls that were generated by the same analysis of the same sample.
    CallsSearchRequest:
      allOf:
      - $ref: '#/components/schemas/SearchRequestParametersTokenPaging'
      - type: object
        properties:
          callSetDbIds:
            type: array
            description: The CallSet to search.
            example:
            - a03202ec
            - 274e4f63
            items:
              type: string
          expandHomozygotes:
            type: boolean
            description: Should homozygotes be expanded (true) or collapsed into a single occurrence (false)
            example: true
          sepPhased:
            type: string
            description: The string used as a separator for phased allele calls.
            example: ~
          sepUnphased:
            type: string
            description: The string used as a separator for unphased allele calls.
            example: '|'
          unknownString:
            type: string
            description: The string used as a representation for missing data.
            example: "-"
          variantDbIds:
            type: array
            description: The Variant to search.
            example:
            - bba0b258
            - ff97d4f0
            items:
              type: string
          variantSetDbIds:
            type: array
            description: The VariantSet to search.
            example:
            - 407c0508
            - 49e24dfc
            items:
              type: string
    Context:
      title: context
      type: array
      description: "The JSON-LD Context is used to provide JSON-LD definitions to each field in a JSON object. By providing an array of context file urls, a BrAPI response object becomes JSON-LD compatible.  \n\nFor more information, see https://w3c.github.io/json-ld-syntax/#the-context"
      example:
      - https://brapi.org/jsonld/context/metadata.jsonld
      items:
        type: string
        format: uri
    ExternalReferences:
      title: ExternalReferences
      type: array
      description: An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.
      example:
      - referenceID: doi:10.155454/12341234
        referenceSource: DOI
      - referenceID: http://purl.obolibrary.org/obo/ro.owl
        referenceSource: OBO Library
      - referenceID: 75a50e76
        referenceSource: Remote Data Collection Upload Tool
      items:
        $ref: '#/components/schemas/ExternalReferences_inner'
    GenomeMap:
      required:
      - commonCropName
      - mapDbId
      - type
      type: object
      properties:
        additionalInfo:
          type: object
          additionalProperties:
            type: string
          description: Additional arbitrary info
        comments:
          type: string
          description: Additional comments
          example: Comments about this map
        commonCropName:
          type: string
          description: The common name of the crop
          example: Paw Paw
        documentationURL:
          type: string
          description: A URL to the human readable documentation of this object
          format: uri
          example: https://brapi.org
        linkageGroupCount:
          type: integer
          description: The number of linkage groups present in this genomic map
          example: 5
        mapDbId:
          type: string
          description: The ID which uniquely identifies this genomic map
          example: 142cffd5
        mapName:
          type: string
          description: A human readable name for this genomic map
          example: Genome Map 1
        mapPUI:
          type: string
          description: The DOI or other permanent identifier for this genomic map
          example: doi:10.3207/2959859860
        markerCount:
          type: integer
          description: The number of markers present in this genomic map
          example: 1100
        publishedDate:
          type: string
          description: The date this genome was published
          format: date-time
        scientificName:
          type: string
          description: Full scientific binomial format name. This includes Genus, Species, and Sub-species
          example: Zea mays
        type:
          type: string
          description: The type of map this represents, usually "Genetic"
          example: Genetic
        unit:
          type: string
          description: The units used to describe the data in this map
          example: cM
    LinkageGroup:
      type: object
      properties:
        additionalInfo:
          type: object
          additionalProperties:
            type: string
          description: Additional arbitrary info
        linkageGroupName:
          type: string
          description: The Uniquely Identifiable name of this linkage group
          example: Chromosome 3
        markerCount:
          type: integer
          description: The number of markers associated with this linkage group
          example: 150
        maxPosition:
          type: integer
          description: The maximum position of a marker within this linkage group
          example: 2500
      description: a Linkage Group is the BrAPI generic term for a named section of a map. A Linkage Group can represent a Chromosome, Scaffold, or Linkage Group.
    ListValue:
      type: object
      properties:
        values:
          type: array
          description: Repeated field of dynamically typed values.
          example:
          - AA
          items:
            oneOf:
            - type: boolean
              description: Represents a boolean value.
              format: boolean
            - type: number
              description: Represents a double value.
              format: double
            - type: string
              description: Represents a string value.
      description: |-
        `ListValue` is a wrapper around a repeated field of values.

        The JSON representation for `ListValue` is JSON array.
    MarkerPosition:
      type: object
      properties:
        additionalInfo:
          type: object
          additionalProperties:
            type: string
          description: Additional arbitrary info
        linkageGroupName:
          type: string
          description: The Uniquely Identifiable name of this linkage group
          example: Chromosome 3
        mapDbId:
          type: string
          description: The unique ID of the map
          example: 3d52bdf3
        mapName:
          type: string
          description: The human readable name of the map
          example: Genome Map 1
        position:
          type: integer
          description: The position of a marker within a linkage group
          example: 2390
        variantDbId:
          type: string
          description: Internal db identifier
          example: a1eb250a
        variantName:
          type: string
          description: The human readable name for a marker
          example: Marker_2390
    MarkerPositionSearchRequest:
      allOf:
      - $ref: '#/components/schemas/SearchRequestParametersPaging'
      - type: object
        properties:
          linkageGroupNames:
            type: array
            description: The Uniquely Identifiable name of this linkage group
            example:
            - Chromosome 2
            - Chromosome 3
            items:
              type: string
          mapDbIds:
            type: array
            description: The unique ID of the map
            example:
            - 7e6fa8aa
            - bedc418c
            items:
              type: string
          maxPosition:
            type: integer
            description: The maximum position
            example: 4000
          minPosition:
            type: integer
            description: The minimum position
            example: 250
          variantDbIds:
            type: array
            description: Internal db identifier
            example:
            - a0caa928
            - f8894a26
            items:
              type: string
    Measurement:
      type: object
      properties:
        units:
          type: string
          description: 'Units (example: "ng/ul")'
          example: ng/ul
        value:
          type: number
          description: 'Value (example: "2.3")'
          example: 2.3
      description: A value with units
    MethodBaseClass:
      type: object
      properties:
        additionalInfo:
          type: object
          additionalProperties:
            type: string
          description: Additional arbitrary info
        bibliographicalReference:
          type: string
          description: |-
            Bibliographical reference describing the method.

            MIAPPE V1.1 (DM-91) Reference associated to the method - URI/DOI of reference describing the method.
          example: Smith, 1893, Really Cool Paper, Popular Journal
        description:
          type: string
          description: |-
            Method description

            MIAPPE V1.1 (DM-90) Method description - Textual description of the method, which may extend a method defined in an external reference with specific parameters, e.g. growth stage, inoculation precise organ (leaf number)
          example: A measuring tape was used
        externalReferences:
          $ref: '#/components/schemas/ExternalReferences'
        formula:
          type: string
          description: For computational methods i.e., when the method consists in assessing the trait by computing measurements, write the generic formula used for the calculation
          example: a^2 + b^2 = c^2
        methodClass:
          type: string
          description: 'Method class (examples: "Measurement", "Counting", "Estimation", "Computation", etc.)'
          example: Measurement
        methodName:
          type: string
          description: |-
            Human readable name for the method

            MIAPPE V1.1 (DM-88) Method  Name of the method of observation
          example: Measuring Tape
        ontologyReference:
          $ref: '#/components/schemas/OntologyReference'
    ObservationUnitHierarchyLevel:
      title: ObservationUnitHierarchyLevel
      type: object
      properties:
        levelName:
          type: string
          description: A name for this level
          example: plot
          enum:
          - study
          - field
          - entry
          - rep
          - block
          - sub-block
          - plot
          - sub-plot
          - plant
          - pot
          - sample
        levelOrder:
          type: integer
          description: '`levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`''s lower numbers are at the top of the hierarchy (ie field -> 1) and higher numbers are at the bottom of the hierarchy (ie plant -> 9).'
          example: 2
      description: 'Observation levels indicate the granularity level at which the measurements are taken. `levelName` defines the level, `levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`s lower numbers are at the top of the hierarchy (ie field > 0) and higher numbers are at the bottom of the hierarchy (ie plant > 6). '
    OntologyReference:
      required:
      - ontologyDbId
      - ontologyName
      type: object
      properties:
        documentationLinks:
          type: array
          description: links to various ontology documentation
          items:
            $ref: '#/components/schemas/OntologyReference_documentationLinks'
        ontologyDbId:
          type: string
          description: Ontology database unique identifier
          example: 6b071868
        ontologyName:
          type: string
          description: Ontology name
          example: The Crop Ontology
        version:
          type: string
          description: Ontology version (no specific format)
          example: 7.2.3
      description: |-
        MIAPPE V1.1

        (DM-85) Variable accession number - Accession number of the variable in the Crop Ontology

        (DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).

        (DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).

        (DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology).
    OntologyTerm:
      type: object
      properties:
        term:
          type: string
          description: Ontology term - the label of the ontology term the termId is pointing to.
          example: sonic hedgehog
        termURI:
          type: string
          description: Ontology term identifier - the CURIE for an ontology term. It differs from the standard GA4GH schema's :ref:`id ` in that it is a CURIE pointing to an information resource outside of the scope of the schema or its resource implementation.
          example: MGI:MGI:98297
      description: An ontology term describing an attribute.
    PlateFormat:
      type: string
      description: Enum for plate formats, usually "PLATE_96" for a 96 well plate or "TUBES" for plateless format
      example: PLATE_96
      enum:
      - PLATE_96
      - TUBES
    Reference:
      type: object
      properties:
        additionalInfo:
          type: object
          additionalProperties:
            type: string
          description: Additional arbitrary info
        isDerived:
          type: boolean
          description: A sequence X is said to be derived from source sequence Y, if X and Y are of the same length and the per-base sequence divergence at A/C/G/T bases is sufficiently small. Two sequences derived from the same official sequence share the same coordinates and annotations, and can be replaced with the official sequence for certain use cases.
          format: boolean
          example: false
        length:
          type: integer
          description: The length of this reference's sequence.
          example: 50000000
        md5checksum:
          type: string
          description: The MD5 checksum uniquely representing this `Reference` as a lower-case hexadecimal string, calculated as the MD5 of the upper-case sequence excluding all whitespace characters (this is equivalent to SQ:M5 in SAM).
          example: c2365e900c81a89cf74d83dab60df146
        referenceDbId:
          type: string
          description: The reference ID. Unique within the repository.
          example: fc0a81d0
        referenceName:
          type: string
          description: The unique name of this reference within the Reference Set.
          example: Chromosome 2
        referenceSetDbId:
          type: string
          description: The reference ID. Unique within the repository.
          example: c1ecfef1
        sourceAccessions:
          type: array
          description: All known corresponding accession IDs in INSDC (GenBank/ENA/DDBJ) which must include a version number, e.g. `GCF_000001405.26`.
          example:
          - GCF_000001405.26
          items:
            type: string
        sourceDivergence:
          type: number
          description: The `sourceDivergence` is the fraction of non-indel bases that do not match the reference this message was derived from.
          format: float
          example: 0.01
        sourceURI:
          type: string
          description: The URI from which the sequence was obtained. Specifies a FASTA format file/string with one name, sequence pair. In most cases, clients should call the `getReferenceBases()` method to obtain sequence bases for a `Reference` instead of attempting to retrieve this URI.
          example: https://wiki.brapi.org/files/demo.fast
        species:
          $ref: '#/components/schemas/OntologyTerm'
      description: A `Reference` is a canonical assembled contig, intended to act as a reference coordinate space for other genomic annotations. A single `Reference` might represent the human chromosome 1, for instance. `References` are designed to be immutable.
    ReferenceBases:
      type: object
      properties:
        nextPageToken:
          type: string
          description: The continuation token, which is used to page through large result sets. Provide this value in a subsequent request to return the next page of results. This field will be empty if there are not any additional results.
          example: 3a3d658a
        offset:
          type: integer
          description: The offset position (0-based) of the given sequence from the start of this `Reference`. This value will differ for each page in a request.
          example: 20000
        sequence:
          type: string
          description: A sub-string of the bases that make up this reference. Bases are represented as IUPAC-IUB codes; this string matches the regular expression `[ACGTMRWSYKVHDBN]*`.
          example: TAGGATTGAGCTCTATATTAGGATTGAGCTCTATATTAGGATTGAGCTCTATATTAGGATTGAGCTCTATATTAGGATTGAGCTCTATATTAGGATTGAGCTCTATATTAGGATTGAGCTCTATATTAGGATTGAGCTCTATATTAGGATTGAGCTCTATAT
      description: A string representation of the reference base alleles.
    ReferenceSet:
      type: object
      properties:
        additionalInfo:
          type: object
          additionalProperties:
            type: string
          description: Additional arbitrary info
        assemblyPUI:
          type: string
          description: The remaining information is about the source of the sequences Public id of this reference set, such as `GRCH_37`.
          example: doi://10.12345/fake/9876
        description:
          type: string
          description: Optional free text description of this reference set.
          example: This is an example description for an assembly
        isDerived:
          type: boolean
          description: A reference set may be derived from a source if it contains additional sequences, or some of the sequences within it are derived (see the definition of `isDerived` in `Reference`).
          format: boolean
        md5checksum:
          type: string
          description: |-
            Order-independent MD5 checksum which identifies this `ReferenceSet`.

            To compute this checksum, make a list of `Reference.md5checksum` for all
            `Reference` s in this set. Then sort that list, and take the MD5 hash of
            all the strings concatenated together. Express the hash as a lower-case
            hexadecimal string.
          example: c2365e900c81a89cf74d83dab60df146
        referenceSetDbId:
          type: string
          description: The reference set ID. Unique in the repository.
          example: 7e029a84
        referenceSetName:
          type: string
          description: The reference set name.
          example: The Best Assembly Ever
        sourceAccessions:
          type: array
          description: All known corresponding accession IDs in INSDC (GenBank/ENA/DDBJ) ideally with a version number, e.g. `NC_000001.11`.
          example:
          - A0000002
          - A0009393
          items:
            type: string
        sourceURI:
          type: string
          description: Specifies a FASTA format file/string.
          example: https://wiki.brapi.org/files/demo.fast
        species:
          $ref: '#/components/schemas/OntologyTerm'
      description: A `ReferenceSet` is a set of `Reference` s which typically comprise a reference assembly, such as `GRCH_38`. A `ReferenceSet` defines a common coordinate space for comparing reference-aligned experimental data.
    ReferenceSetsSearchRequest:
      allOf:
      - $ref: '#/components/schemas/SearchRequestParametersPaging'
      - type: object
        properties:
          accessions:
            type: array
            description: If set, return the reference sets for which the `accession` matches this string (case-sensitive, exact match).
            example:
            - A0009283
            - A0006657
            items:
              type: string
          assemblyPUIs:
            type: array
            description: If set, return the reference sets for which the `assemblyId` matches this string (case-sensitive, exact match).
            example:
            - doi:10.15454/312953986E3
            - doi:10.15454/312953986E3
            items:
              type: string
          md5checksums:
            type: array
            description: If set, return the reference sets for which the `md5checksum` matches this string (case-sensitive, exact match).
            example:
            - c2365e900c81a89cf74d83dab60df146
            items:
              type: string
          referenceSetDbIds:
            type: array
            description: The `ReferenceSets` to search.
            example:
            - 32a19dd7
            - 2c182c18
            items:
              type: string
    ReferencesSearchRequest:
      allOf:
      - $ref: '#/components/schemas/SearchRequestParametersPaging'
      - type: object
        properties:
          accessions:
            type: array
            description: If specified, return the references for which the `accession` matches this string (case-sensitive, exact match).
            example:
            - A0009283
            - A0006657
            items:
              type: string
          isDerived:
            type: boolean
            description: A sequence X is said to be derived from source sequence Y, if X and Y are of the same length and the per-base sequence divergence at A/C/G/T bases is sufficiently small. Two sequences derived from the same official sequence share the same coordinates and annotations, and can be replaced with the official sequence for certain use cases.
            format: boolean
          maxLength:
            type: integer
            description: The minimum length of this reference's sequence.
            example: 90000
          md5checksums:
            type: array
            description: If specified, return the references for which the `md5checksum` matches this string (case-sensitive, exact match).
            example:
            - c2365e900c81a89cf74d83dab60df146
            items:
              type: string
          minLength:
            type: integer
            description: The minimum length of this reference's sequence.
            example: 4000
          referenceDbIds:
            type: array
            description: The `References` to search.
            example:
            - 04c83ea7
            - d0998a34
            items:
              type: string
          referenceSetDbIds:
            type: array
            description: The `ReferenceSets` to search.
            example:
            - 32a19dd7
            - 2c182c18
            items:
              type: string
    Sample:
      allOf:
      - $ref: '#/components/schemas/SampleNewRequest'
      - type: object
        properties:
          sampleDbId:
            type: string
            description: |-
              The ID which uniquely identifies a sample

              MIAPPE V1.1 (DM-76) Sample ID - Unique identifier for the sample.
            example: cd06a61d
    SampleNewRequest:
      type: object
      properties:
        additionalInfo:
          type: object
          additionalProperties:
            type: string
          description: Additional arbitrary info
        column:
          maximum: 12
          minimum: 1
          type: integer
          description: The Column identifier for this samples location in the plate
          example: 6
        externalReferences:
          $ref: '#/components/schemas/ExternalReferences'
        germplasmDbId:
          type: string
          description: The ID which uniquely identifies a germplasm
          example: 7e08d538
        observationUnitDbId:
          type: string
          description: The ID which uniquely identifies an observation unit
          example: 073a3ce5
        plateDbId:
          type: string
          description: The ID which uniquely identifies a plate of samples
          example: 2dce16d1
        plateName:
          type: string
          description: The human readable name of a plate
          example: Plate_alpha_20191022
        programDbId:
          type: string
          description: The ID which uniquely identifies a program within the given database server
          example: bd748e00
        row:
          type: string
          description: The Row identifier for this samples location in the plate
          example: B
        sampleBarcode:
          type: string
          description: A unique identifier physically attached to the sample
          example: 3a027b59
        sampleDescription:
          type: string
          description: |-
            Description of a sample

            MIAPPE V1.1 (DM-79) Sample description - Any information not captured by the other sample fields, including quantification, sample treatments and processing.
          example: This sample was taken from the root of a tree
        sampleGroupDbId:
          type: string
          description: The ID which uniquely identifies a group of samples
          example: 8524b436
        sampleName:
          type: string
          description: The name of the sample
          example: Sample_alpha_20191022
        samplePUI:
          type: string
          description: "A permanent unique identifier for the sample (DOI, URL, UUID, etc)\n\nMIAPPE V1.1 (DM-81) External ID - An identifier for the sample in a persistent repository, comprising the name of the repository and the accession number of the observation unit therein. Submission to the EBI Biosamples repository is recommended. URI are recommended when possible. "
          example: doi:10.15454/312953986E3
        sampleTimestamp:
          type: string
          description: |-
            The date and time a sample was collected from the field

            MIAPPE V1.1 (DM-80) Collection date - The date and time when the sample was collected / harvested
          format: date-time
        sampleType:
          type: string
          description: The type of sample taken. ex. 'DNA', 'RNA', 'Tissue', etc
          example: Tissue
        studyDbId:
          type: string
          description: The ID which uniquely identifies a study within the given database server
          example: 64bd6bf9
        takenBy:
          type: string
          description: The name or identifier of the entity which took the sample from the field
          example: Bob
        tissueType:
          type: string
          description: |-
            The type of tissue sampled. ex. 'Leaf', 'Root', etc.

            MIAPPE V1.1 (DM-78) Plant anatomical entity - A description of  the plant part (e.g. leaf) or the plant product (e.g. resin) from which the sample was taken, in the form of an accession number to a suitable controlled vocabulary (Plant Ontology).
          example: Root
        trialDbId:
          type: string
          description: The ID which uniquely identifies a trial within the given database server
          example: d34c5349
        well:
          type: string
          description: The Well identifier for this samples location in the plate. Usually a concatenation of Row and Column, or just a number if the samples are not part of an ordered plate.
          example: B6
    SampleSearchRequest:
      allOf:
      - $ref: '#/components/schemas/SearchRequestParametersPaging'
      - $ref: '#/components/schemas/SearchRequestParametersGermplasm'
      - $ref: '#/components/schemas/SearchRequestParametersStudies'
      - $ref: '#/components/schemas/SearchRequestParametersExternalReferences'
      - type: object
        properties:
          observationUnitDbIds:
            type: array
            description: The ID which uniquely identifies an observation unit
            example:
            - 3cd0ca36
            - 983f3b14
            items:
              type: string
          plateDbIds:
            type: array
            description: The ID which uniquely identifies a plate of samples
            example:
            - 0cac98b8
            - b96125fb
            items:
              type: string
          sampleDbIds:
            type: array
            description: The ID which uniquely identifies a sample
            example:
            - 3bece2ca
            - dd286cc6
            items:
              type: string
    ScaleBaseClass:
      required:
      - scaleName
      type: object
      properties:
        additionalInfo:
          type: object
          additionalProperties:
            type: string
          description: Additional arbitrary info
        dataType:
          $ref: '#/components/schemas/TraitDataType'
        decimalPlaces:
          type: integer
          description: For numerical, number of decimal places to be reported
          example: 2
        externalReferences:
          $ref: '#/components/schemas/ExternalReferences'
        ontologyReference:
          $ref: '#/components/schemas/OntologyReference'
        scaleName:
          type: string
          description: |-
            Name of the scale

            MIAPPE V1.1 (DM-92) Scale Name of the scale associated with the variable
          example: Meters
        validValues:
          $ref: '#/components/schemas/ScaleBaseClass_validValues'
      description: Scale metadata
    SearchRequestParametersCommonCropNames:
      type: object
      properties:
        commonCropNames:
          type: array
          description: Common name for the crop which this program is for
          example:
          - Tomatillo
          - Paw Paw
          items:
            type: string
    SearchRequestParametersExternalReferences:
      type: object
      properties:
        externalReferenceIDs:
          type: array
          description: List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)
          example:
          - http://purl.obolibrary.org/obo/ro.owl
          - 14a19841
          items:
            type: string
        externalReferenceSources:
          type: array
          description: List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)
          example:
          - OBO Library
          - Field App Name
          items:
            type: string
    SearchRequestParametersGermplasm:
      type: object
      properties:
        germplasmDbIds:
          type: array
          description: List of IDs which uniquely identify germplasm to search for
          example:
          - e9c6edd7
          - 1b1df4a6
          items:
            type: string
        germplasmNames:
          type: array
          description: List of human readable names to identify germplasm to search for
          example:
          - A0000003
          - A0000477
          items:
            type: string
    SearchRequestParametersLocations:
      type: object
      properties:
        locationDbIds:
          type: array
          description: The location ids to search for
          example:
          - b28911cf
          - 5071d1e4
          items:
            type: string
        locationNames:
          type: array
          description: A human readable names to search for
          example:
          - Location Alpha
          - The Large Hadron Collider
          items:
            type: string
    SearchRequestParametersObservationVariables:
      type: object
      properties:
        observationVariableDbIds:
          type: array
          description: The DbIds of Variables to search for
          example:
          - a646187d
          - 6d23513b
          items:
            type: string
        observationVariableNames:
          type: array
          description: The names of Variables to search for
          example:
          - Plant Height in meters
          - Wheat rust score 1-5
          items:
            type: string
    SearchRequestParametersPaging:
      type: object
      properties:
        page:
          type: integer
          description: Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
          example: 0
        pageSize:
          type: integer
          description: The size of the pages to be returned. Default is `1000`.
          example: 1000
    SearchRequestParametersPrograms:
      type: object
      properties:
        programDbIds:
          type: array
          description: A program identifier to search for
          example:
          - 8f5de35b
          - 0e2d4a13
          items:
            type: string
        programNames:
          type: array
          description: A name of a program to search for
          example:
          - Better Breeding Program
          - Best Breeding Program
          items:
            type: string
    SearchRequestParametersStudies:
      type: object
      properties:
        studyDbIds:
          type: array
          description: List of study identifiers to search for
          example:
          - cf6c4bd4
          - 691e69d6
          items:
            type: string
        studyNames:
          type: array
          description: List of study names to filter search results
          example:
          - The First Bob Study 2017
          - Wheat Yield Trial 246
          items:
            type: string
    SearchRequestParametersTokenPaging:
      type: object
      properties:
        pageSize:
          type: integer
          description: The size of the pages to be returned. Default is `1000`.
          example: 1000
        pageToken:
          type: string
          description: "Used to request a specific page of data to be returned.\n\nTokenized pages are for large data sets which can not be efficiently broken into indexed pages. Use the nextPageToken and prevPageToken from a prior response to construct a query and move to the next or previous page respectively. "
          example: 33c27874
    SearchRequestParametersTrials:
      type: object
      properties:
        trialDbIds:
          type: array
          description: The ID which uniquely identifies a trial to search for
          example:
          - d2593dc2
          - 9431a731
          items:
            type: string
        trialNames:
          type: array
          description: The human readable name of a trial to search for
          example:
          - All Yield Trials 2016
          - Disease Resistance Study Comparison Group
          items:
            type: string
    TraitBaseClass:
      type: object
      properties:
        additionalInfo:
          type: object
          additionalProperties:
            type: string
          description: Additional arbitrary info
        alternativeAbbreviations:
          type: array
          description: Other frequent abbreviations of the trait, if any. These abbreviations do not have to follow a convention
          example:
          - H
          - PH
          - H1
          items:
            type: string
        attribute:
          type: string
          description: A trait can be decomposed as "Trait" = "Entity" + "Attribute", the attribute is the observed feature (or characteristic) of the entity e.g., for "grain colour", attribute = "colour"
          example: height
        entity:
          type: string
          description: A trait can be decomposed as "Trait" = "Entity" + "Attribute", the entity is the part of the plant that the trait refers to e.g., for "grain colour", entity = "grain"
          example: Stalk
        externalReferences:
          $ref: '#/components/schemas/ExternalReferences'
        mainAbbreviation:
          type: string
          description: 'Main abbreviation for trait name. (examples: "Carotenoid content" => "CC")'
          example: PH
        ontologyReference:
          $ref: '#/components/schemas/OntologyReference'
        status:
          type: string
          description: 'Trait status (examples: "recommended", "obsolete", "legacy", etc.)'
          example: recommended
        synonyms:
          type: array
          description: Other trait names
          example:
          - Height
          - Plant Height
          - Stalk Height
          - Canopy Height
          items:
            type: string
        traitClass:
          type: string
          description: 'Trait class. (examples: "morphological", "phenological", "agronomical", "physiological", "abiotic stress", "biotic stress", "biochemical", "quality traits", "fertility", etc.)'
          example: phenological
        traitDescription:
          type: string
          description: The description of a trait
          example: The height of the plant
        traitName:
          type: string
          description: |-
            The human readable name of a trait

            MIAPPE V1.1 (DM-86) Trait - Name of the (plant or environmental) trait under observation
          example: Height
    TraitDataType:
      type: string
      description: |-
        <p>Class of the scale, entries can be</p>
        <p>"Code" -  This scale class is exceptionally used to express complex traits. Code is a nominal scale that combines the expressions of the different traits composing the complex trait. For example a severity trait might be expressed by a 2 digit and 2 character code. The first 2 digits are the percentage of the plant covered by a fungus and the 2 characters refer to the delay in development, e.g. "75VD" means "75 %" of the plant is infected and the plant is very delayed.</p>
        <p>"Date" - The date class is for events expressed in a time format, See ISO 8601</p>
        <p>"Duration" - The Duration class is for time elapsed between two events expressed in a time format, e.g. days, hours, months</p>
        <p>"Nominal" - Categorical scale that can take one of a limited and fixed number of categories. There is no intrinsic ordering to the categories</p>
        <p>"Numerical" - Numerical scales express the trait with real numbers. The numerical scale defines the unit e.g. centimeter, ton per hectare, branches</p>
        <p>"Ordinal" - Ordinal scales are scales composed of ordered categories</p>
        <p>"Text" - A free text is used to express the trait.</p>
      example: Numerical
      enum:
      - Code
      - Date
      - Duration
      - Nominal
      - Numerical
      - Ordinal
      - Text
    VariableBaseClass:
      required:
      - method
      - scale
      - trait
      type: object
      properties:
        additionalInfo:
          type: object
          additionalProperties:
            type: string
          description: Additional arbitrary info
        commonCropName:
          type: string
          description: 'Crop name (examples: "Maize", "Wheat")'
          example: Maize
        contextOfUse:
          type: array
          description: 'Indication of how trait is routinely used. (examples: ["Trial evaluation", "Nursery evaluation"])'
          example:
          - Trial evaluation
          - Nursery evaluation
          items:
            type: string
        defaultValue:
          type: string
          description: 'Variable default value. (examples: "red", "2.3", etc.)'
          example: "2.0"
        documentationURL:
          type: string
          description: A URL to the human readable documentation of this object
          format: uri
          example: https://wiki.brapi.org/documentation.html
        externalReferences:
          $ref: '#/components/schemas/ExternalReferences'
        growthStage:
          type: string
          description: 'Growth stage at which measurement is made (examples: "flowering")'
          example: flowering
        institution:
          type: string
          description: Name of institution submitting the variable
          example: The BrAPI Institute
        language:
          type: string
          description: 2 letter ISO 639-1 code for the language of submission of the variable.
          example: en
        method:
          allOf:
          - $ref: '#/components/schemas/MethodBaseClass'
          - type: object
            properties:
              methodDbId:
                type: string
                description: Method unique identifier
                example: 0adb2764
        ontologyReference:
          $ref: '#/components/schemas/OntologyReference'
        scale:
          allOf:
          - $ref: '#/components/schemas/ScaleBaseClass'
          - required:
            - scaleDbId
            type: object
            properties:
              scaleDbId:
                type: string
                description: Unique identifier of the scale. If left blank, the upload system will automatically generate a scale ID.
                example: af730171
            description: Scale metadata
        scientist:
          type: string
          description: Name of scientist submitting the variable.
          example: Dr. Bob Robertson
        status:
          type: string
          description: 'Variable status. (examples: "recommended", "obsolete", "legacy", etc.)'
          example: recommended
        submissionTimestamp:
          type: string
          description: Timestamp when the Variable was added (ISO 8601)
          format: date-time
        synonyms:
          type: array
          description: Other variable names
          example:
          - Maize Height
          - Stalk Height
          - Corn Height
          items:
            type: string
        trait:
          allOf:
          - $ref: '#/components/schemas/TraitBaseClass'
          - type: object
            properties:
              traitDbId:
                type: string
                description: The ID which uniquely identifies a trait
                example: 9b2e34f5
    Variant:
      type: object
      properties:
        additionalInfo:
          type: object
          additionalProperties:
            type: string
          description: Additional arbitrary info
        alternate_bases:
          type: array
          description: The bases that appear instead of the reference bases. Multiple alternate alleles are possible.
          example:
          - TAGGATTGAGCTCTATAT
          items:
            type: string
        ciend:
          type: array
          description: Similar to "cipos", but for the variant's end position (which is derived from start + svlen).
          example:
          - -1000
          - 0
          items:
            type: integer
        cipos:
          type: array
          description: |-
            In the case of structural variants, start and end of the variant may not
            be known with an exact base position. "cipos" provides an interval with
            high confidence for the start position. The interval is provided by 0 or
            2 signed integers which are added to the start position.
            Based on the use in VCF v4.2
          example:
          - -12000
          - 1000
          items:
            type: integer
        created:
          type: string
          description: The timestamp when this variant was created.
          format: date-time
        end:
          type: integer
          description: "This field is optional and may be ignored if there is no relevant map or reference to be associated with.\n\nThe end position (exclusive), resulting in [start, end) closed-open interval. This is typically calculated \nby `start + referenceBases.length`."
          example: 518
        filtersApplied:
          type: boolean
          description: True if filters were applied for this variant. VCF column 7 "FILTER" any value other than the missing value.
          format: boolean
          example: true
        filtersFailed:
          type: array
          description: Zero or more filters that failed for this variant. VCF column 7 "FILTER" shared across all alleles in the same VCF record.
          example:
          - d629a669
          - 3f14f578
          items:
            type: string
        filtersPassed:
          type: boolean
          description: True if all filters for this variant passed. VCF column 7 "FILTER" value PASS.
          format: boolean
          example: true
        referenceBases:
          type: string
          description: The reference bases for this variant. They start at the given start position.
          example: TAGGATTGAGCTCTATAT
        referenceName:
          type: string
          description: The reference on which this variant occurs. (e.g. `chr_20` or `X`)
          example: chr_20
        start:
          type: integer
          description: "This field is optional and may be ignored if there is no relevant map or reference to be associated with.\n\nThe start position at which this variant occurs (0-based). This corresponds to the first base of the string \nof reference bases. Genomic positions are non-negative integers less than reference length. Variants spanning \nthe join of circular genomes are represented as two variants one on each side of the join (position 0)."
          example: 500
        svlen:
          type: integer
          description: Length of the - if labeled as such in variant_type - structural variation. Based on the use in VCF v4.2
          example: 1500
        updated:
          type: string
          description: The time at which this variant was last updated.
          format: date-time
        variantDbId:
          type: string
          description: The variant ID.
          example: 628e89c5
        variantNames:
          type: array
          description: Names for the variant, for example a RefSNP ID.
          example:
          - RefSNP_ID_1
          - 06ea312e
          items:
            type: string
        variantSetDbId:
          type: array
          description: An array of `VariantSet` IDs this variant belongs to. This also defines the `ReferenceSet` against which the `Variant` is to be interpreted.
          example:
          - c8ae400b
          - ef2c204b
          items:
            type: string
        variantType:
          type: string
          description: |-
            The "variant_type" is used to denote e.g. structural variants.
            Examples:
              DUP  : duplication of sequence following "start"
              DEL  : deletion of sequence following "start"
          example: DUP
      description: |-
        A `Variant` represents a change in DNA sequence relative to some reference.
        For example, a variant could represent a SNP or an insertion.
        Variants belong to a `VariantSet`.
        This is equivalent to a row in VCF.
    VariantSet:
      type: object
      properties:
        additionalInfo:
          type: object
          additionalProperties:
            type: string
          description: Additional arbitrary info
        analysis:
          type: array
          description: Set of Analysis descriptors for this VariantSet
          items:
            $ref: '#/components/schemas/Analysis'
        availableFormats:
          type: array
          description: "When the data for a VariantSet is retrieved, it can be retrieved in a variety of data formats and file formats. \n\ndataFormat defines the structure of the data within a file (ie DartSeq, VCF, Hapmap, tabular, etc)\n\nfileFormat defines the MIME type of the file (ie text/csv, application/excel, application/zip). This should also be reflected in the Accept and ContentType HTTP headers for every relevant request and response."
          example:
          - dataFormat: VCF
            fileFormat: application/excel
            fileURL: https://brapi.org/example/VCF_1.xlsx
          - dataFormat: VCF
            fileFormat: text/csv
            fileURL: https://brapi.org/example/VCF_2.csv
          items:
            $ref: '#/components/schemas/VariantSet_availableFormats'
        callSetCount:
          type: integer
          description: The number of CallSets included in this VariantSet
          example: 341
        referenceSetDbId:
          type: string
          description: The ID of the reference set that describes the sequences used by the variants in this set.
          example: 57eae639
        studyDbId:
          type: string
          description: The ID of the dataset this variant set belongs to.
          example: 2fc3b034
        variantCount:
          type: integer
          description: The number of Variants included in this VariantSet
          example: 250
        variantSetDbId:
          type: string
          description: The variant set ID.
          example: 87a6ac1e
        variantSetName:
          type: string
          description: The variant set name.
          example: Maize QC DataSet 002334
      description: A VariantSet is a collection of variants and variant calls intended to be analyzed together.
    VariantSetsExtractRequest:
      allOf:
      - $ref: '#/components/schemas/SearchRequestParametersStudies'
      - type: object
        properties:
          callSetDbIds:
            type: array
            description: The CallSet to search.
            example:
            - 9569cfc4
            - da1e888c
            items:
              type: string
          expandHomozygotes:
            type: boolean
            description: Should homozygotes be expanded (true) or collapsed into a single occurrence (false)
            example: true
          sepPhased:
            type: string
            description: The string used as a separator for phased allele calls.
            example: ~
          sepUnphased:
            type: string
            description: The string used as a separator for unphased allele calls.
            example: '|'
          unknownString:
            type: string
            description: The string used as a representation for missing data.
            example: "-"
          variantDbIds:
            type: array
            description: The Variant to search.
            example:
            - c80f068b
            - eb7c5f50
            items:
              type: string
          variantSetDbIds:
            type: array
            description: The VariantSet to search.
            example:
            - b2903842
            - dcbb8558
            items:
              type: string
        description: Request object for extracting data subsets as new Variant Sets
    VariantSetsSearchRequest:
      allOf:
      - $ref: '#/components/schemas/SearchRequestParametersPaging'
      - $ref: '#/components/schemas/SearchRequestParametersStudies'
      - type: object
        properties:
          callSetDbIds:
            type: array
            description: The CallSet to search.
            example:
            - 9569cfc4
            - da1e888c
            items:
              type: string
          variantDbIds:
            type: array
            description: The Variant to search.
            example:
            - c80f068b
            - eb7c5f50
            items:
              type: string
          variantSetDbIds:
            type: array
            description: The VariantSet to search.
            example:
            - b2903842
            - dcbb8558
            items:
              type: string
    VendorContact:
      required:
      - vendorName
      type: object
      properties:
        vendorAddress:
          type: string
          description: The street address of the vendor
          example: 123 Main Street
        vendorCity:
          type: string
          description: The name of the city where the vendor is located
          example: Townsville
        vendorContactName:
          type: string
          description: The name or identifier of the primary vendor contact
          example: Bob Robertson
        vendorCountry:
          type: string
          description: The name of the country where the vendor is located
          example: USA
        vendorDescription:
          type: string
          description: A description of the vendor
          example: This is a sequencing vendor. Sequencing happens here.
        vendorEmail:
          type: string
          description: The primary email address used to contact the vendor
          example: bob@bob.org
        vendorName:
          type: string
          description: The human readable name of the vendor
          example: The Example Vendor Lab
        vendorPhone:
          type: string
          description: The primary phone number used to contact the vendor
          example: +1-800-555-5555
        vendorURL:
          type: string
          description: The primary URL for the vendor
          example: https://sequencing.org/vendor
    VendorOrder:
      required:
      - clientId
      - numberOfSamples
      - orderId
      - serviceIds
      type: object
      properties:
        clientId:
          type: string
          description: A unique, alpha-numeric ID which identifies the client to the vendor. Used to connect the order to the correct billing and contact info.
          example: 7b51ad15
        numberOfSamples:
          type: integer
          description: The total number of samples contained in this request. Used for billing and basic validation of the request.
          example: 180
        orderId:
          type: string
          description: The order id returned by the vendor when the order was successfully submitted.
          example: 96ba0ca3
        requiredServiceInfo:
          type: object
          additionalProperties:
            type: string
          description: A map of additional data required by the requested service. This includes things like Volume and Concentration.
          example:
            extractDNA: "true"
            genus: Zea
            species: mays
            volumePerWell: 2.3 ml
        serviceIds:
          type: array
          description: "A list of unique, alpha-numeric ID which identify the requested services to be applied to this order. \nA Vendor Service defines what platform, technology, and markers will be used. \nA list of available service IDs can be retrieved from the Vendor Specs."
          example:
          - e8f60f64
          - 05bd925a
          - b698fb5e
          items:
            type: string
      description: The details of a vendor order
    VendorOrderSubmission:
      required:
      - orderId
      type: object
      properties:
        orderId:
          type: string
          description: A unique, alpha-numeric ID which identifies the order
          example: b5144468
        shipmentForms:
          type: array
          description: Array of paper forms which need to be printed and included with the physical shipment
          items:
            $ref: '#/components/schemas/ShipmentForm'
      description: Response to an order request
    VendorOrderSubmissionRequest:
      allOf:
      - $ref: '#/components/schemas/VendorPlateSubmissionRequest'
      - required:
        - serviceIds
        type: object
        properties:
          requiredServiceInfo:
            type: object
            additionalProperties:
              type: string
            description: A map of additional data required by the requested service. This includes things like Volume and Concentration.
            example:
              extractDNA: true
              genus: Zea
              species: mays
              volumePerWell: 2.3 ml
          serviceIds:
            type: array
            description: "A list of unique, alpha-numeric ID which identify the requested services to be applied to this order. \nA Vendor Service defines what platform, technology, and markers will be used. \nA list of available service IDs can be retrieved from the Vendor Specs."
            example:
            - e8f60f64
            - 05bd925a
            - b698fb5e
            items:
              type: string
        description: Request object structure to submit plate data to a vendor
    VendorPlate:
      type: object
      properties:
        clientPlateBarcode:
          type: string
          description: (Optional) The value of the bar code attached to this plate
          example: 31dd5787
        clientPlateId:
          type: string
          description: The ID which uniquely identifies this plate to the client making the request
          example: 0ad6c0ef
        sampleSubmissionFormat:
          $ref: '#/components/schemas/PlateFormat'
        samples:
          type: array
          items:
            $ref: '#/components/schemas/VendorSample'
    VendorPlateSubmission:
      required:
      - clientId
      - numberOfSamples
      - plates
      type: object
      properties:
        clientId:
          type: string
          description: A unique, alpha-numeric ID which identifies the client to the vendor. Used to connect the order to the contract, billing, and contact info.
          example: e470ae0d
        numberOfSamples:
          type: integer
          description: The total number of samples contained in this request. Used for billing and basic validation of the request.
          example: 180
        plates:
          type: array
          description: Array of new plates to be submitted to a vendor
          items:
            $ref: '#/components/schemas/VendorPlateSubmission_plates'
      description: Response of a plate submission
    VendorPlateSubmissionId:
      required:
      - submissionId
      type: object
      properties:
        submissionId:
          type: string
          description: A unique, alpha-numeric ID which identifies a set of plates which have been successfully submitted.
          example: f8f409e0
      description: Response to an order request
    VendorPlateSubmissionRequest:
      required:
      - clientId
      - numberOfSamples
      - plates
      - sampleType
      type: object
      properties:
        clientId:
          type: string
          description: A unique, alpha-numeric ID which identifies the client to the vendor. Used to connect the order to the contract, billing, and contact info.
          example: b8aac350
        numberOfSamples:
          type: integer
          description: The total number of samples contained in this request. Used for billing and basic validation of the request.
          example: 180
        plates:
          type: array
          description: Array of new plates to be submitted to a vendor
          items:
            $ref: '#/components/schemas/VendorPlateSubmissionRequest_plates'
        sampleType:
          type: string
          description: The type of Samples being submitted
          example: Tissue
          enum:
          - DNA
          - RNA
          - Tissue
      description: Request object structure to submit plate data to a vendor
    VendorResultFile:
      required:
      - clientSampleIds
      - fileName
      - fileType
      - fileURL
      type: object
      properties:
        additionalInfo:
          type: object
          additionalProperties:
            type: string
          description: Additional arbitrary info
        clientSampleIds:
          type: array
          description: The list of sampleDbIds included in the file
          example:
          - 3968733e
          - e0de6391
          - "66854172"
          items:
            type: string
        fileName:
          type: string
          description: Name of the file
          example: sequence_data_ce640bd3.csv
        fileType:
          type: string
          description: Format of the file
          example: text/csv
        fileURL:
          type: string
          description: The URL to a file with the results of a vendor analysis
          format: uri
          example: https://vendor.org/data/sequence_data_ce640bd3.csv
        md5sum:
          type: string
          description: MD5 Hash Check Sum for the file to confirm download without error
          example: c2365e900c81a89cf74d83dab60df146
    VendorSample:
      required:
      - clientSampleId
      type: object
      properties:
        clientSampleBarCode:
          type: string
          description: (Optional) The value of the bar code attached to this sample
          example: 7c07e527
        clientSampleId:
          type: string
          description: The ID which uniquely identifies this sample to the client making the request
          example: bd96bd69
        column:
          maximum: 12
          minimum: 1
          type: integer
          description: The Column identifier for this samples location in the plate
          example: 6
        comments:
          type: string
          description: Generic comments about this sample for the vendor
          example: This is my favorite sample, please be extra careful with it.
        concentration:
          $ref: '#/components/schemas/Measurement'
        organismName:
          type: string
          description: Scientific organism name
          example: Aspergillus fructus
        row:
          type: string
          description: The Row identifier for this samples location in the plate
          example: B
        speciesName:
          type: string
          description: Scientific species name
          example: Aspergillus fructus
        taxonomyOntologyReference:
          $ref: '#/components/schemas/OntologyReference'
        tissueType:
          type: string
          description: The type of tissue in this sample. List of accepted tissue types can be found in the Vendor Specs.
          example: Root
        tissueTypeOntologyReference:
          $ref: '#/components/schemas/OntologyReference'
        volume:
          $ref: '#/components/schemas/Measurement'
        well:
          type: string
          description: The Well identifier for this samples location in the plate. Usually a concatenation of Row and Column, or just a number if the samples are not part of an ordered plate.
          example: B6
    VendorSpecification:
      type: object
      properties:
        additionalInfo:
          type: object
          additionalProperties:
            type: object
          description: Additional arbitrary information specific to a particular Vendor. Look for the Vendors specific API documentation for more details
        services:
          type: array
          description: List of platform specifications available at the vendor
          items:
            $ref: '#/components/schemas/VendorSpecificationService'
        vendorContact:
          $ref: '#/components/schemas/VendorContact'
    VendorSpecificationService:
      required:
      - serviceId
      - serviceName
      type: object
      properties:
        serviceDescription:
          type: string
          description: Description of the vendor platform
          example: A combined DNA extract and Sequencing process using technology and science. Lots of automated pipet machines.
        serviceId:
          type: string
          description: Unique identifier for this service
          example: 085d298f
        serviceName:
          type: string
          description: The human readable name of a platform
          example: The Deluxe Service
        servicePlatformMarkerType:
          type: string
          description: The type of markers used in this services platform
          example: FIXED
          enum:
          - FIXED
          - DISCOVERABLE
        servicePlatformName:
          type: string
          description: The technology platform used by this service
          example: RNA-seq
        specificRequirements:
          type: array
          description: Additional arbitrary requirements for a particular platform
          example:
          - description: The genus of the samples
            key: genus
          - description: The species of the samples
            key: species
          - description: Approximate volume of each sample (ex 2.3 ml)
            key: volumePerWell
          - description: Does DNA extraction need to happen before sequencing (ex true)
            key: extractDNA
          items:
            $ref: '#/components/schemas/VendorSpecificationService_specificRequirements'
    WSMIMEDataTypes:
      type: string
      enum:
      - application/json
      - text/csv
      - text/tsv
      - application/flapjack
    basePagination:
      required:
      - pageSize
      type: object
      properties:
        pageSize:
          type: integer
          description: The number of data elements returned, aka the size of the current page. If the requested page does not have enough elements to fill a page at the requested page size, this field should indicate the actual number of elements returned.
          example: 1000
          default: 1000
        totalCount:
          type: integer
          description: The total number of elements that are available on the server and match the requested query parameters.
          example: 10
        totalPages:
          type: integer
          description: "The total number of pages of elements available on the server. This should be calculated with the following formula. \n\ntotalPages = CEILING( totalCount / requested_page_size)"
          example: 1
    callSetsSearchRequest:
      allOf:
      - $ref: '#/components/schemas/SearchRequestParametersPaging'
      - $ref: '#/components/schemas/SearchRequestParametersGermplasm'
      - type: object
        properties:
          callSetDbIds:
            type: array
            description: Only return call sets with these DbIds (case-sensitive, exact match).
            example:
            - 6c7486b2
            - 49c36a73
            items:
              type: string
          callSetNames:
            type: array
            description: Only return call sets with these names (case-sensitive, exact match).
            example:
            - Sample_123_DNA_Run_456
            - Sample_789_DNA_Run_101
            items:
              type: string
          sampleDbIds:
            type: array
            description: Return only call sets generated from the provided Biosample IDs.
            example:
            - 758d3f6d
            - 39c0a3f7
            items:
              type: string
          sampleNames:
            type: array
            description: Return only call sets generated from the provided Biosample human readable names.
            example:
            - Sample_123
            - Sample_789
            items:
              type: string
          variantSetDbIds:
            type: array
            description: The VariantSet to search.
            example:
            - 8a9a8972
            - 32a2649a
            items:
              type: string
    dataFile:
      required:
      - fileURL
      type: object
      properties:
        fileDescription:
          type: string
          description: A human readable description of the file contents
          example: This is an Excel data file
        fileMD5Hash:
          type: string
          description: The MD5 Hash of the file contents to be used as a check sum
          example: c2365e900c81a89cf74d83dab60df146
        fileName:
          type: string
          description: The name of the file
          example: datafile.xlsx
        fileSize:
          type: integer
          description: The size of the file in bytes
          example: 4398
        fileType:
          type: string
          description: The type or format of the file. Preferably MIME Type.
          example: application/vnd.ms-excel
        fileURL:
          type: string
          description: The absolute URL where the file is located
          format: uri
          example: https://wiki.brapi.org/examples/datafile.xlsx
      description: A dataFile contains a URL and the relevant file metadata to represent a file
    geoJSON:
      title: GeoJSON
      type: object
      properties:
        geometry:
          title: GeoJSON Geometry
          type: object
          description: A geometry as defined by GeoJSON (RFC 7946). In this context, only Point or Polygon geometry are allowed.
          example:
            coordinates:
            - -76.506042
            - 42.417373
            - 123
            type: Point
          discriminator:
            propertyName: type
            mapping:
              Point: '#/components/schemas/pointGeometry'
              Polygon: '#/components/schemas/polygonGeometry'
          oneOf:
          - $ref: '#/components/schemas/pointGeometry'
          - $ref: '#/components/schemas/polygonGeometry'
        type:
          type: string
          description: The literal string "Feature"
          example: Feature
          default: Feature
      description: |-
        One geometry as defined by GeoJSON (RFC 7946). All coordinates are decimal values on the WGS84 geographic coordinate reference system.

        Copied from RFC 7946 Section 3.1.1

        A position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or
        easting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.
    geoJSONSearchArea:
      allOf:
      - $ref: '#/components/schemas/geoJSON'
      - title: GeoJSONSearchArea
        type: object
        properties: {}
        description: "A GeoJSON Polygon which describes an area to search for other GeoJSON objects. All contained Points and intersecting Polygons should be returned as search results. \n\nAll coordinates are decimal values on the WGS84 geographic coordinate reference system."
        example:
          geometry:
            coordinates:
            - - - -77.456654
                - 42.241133
              - - -75.414133
                - 41.508282
              - - -76.506042
                - 42.417373
              - - -77.456654
                - 42.241133
            type: Polygon
          type: Feature
    indexPagination:
      allOf:
      - $ref: '#/components/schemas/basePagination'
      - required:
        - currentPage
        type: object
        properties:
          currentPage:
            type: integer
            description: The index number for the returned page of data. This should always match the requested page number or the default page (0).
            example: 0
            default: 0
        description: "The pagination object is applicable only when the payload contains a \"data\" key. It describes the pagination of the data contained in the \"data\" array, as a way to identify which subset of data is being returned. \n\nPages are zero indexed, so the first page will be page 0 (zero)."
    linearRing:
      minItems: 4
      type: array
      description: An array of at least four positions where the first equals the last
      example:
      - - -77.456654
        - 42.241133
        - 494
      - - -75.414133
        - 41.508282
        - 571
      - - -76.506042
        - 42.417373
        - 123
      - - -77.456654
        - 42.241133
        - 346
      items:
        $ref: '#/components/schemas/position'
    metadata:
      allOf:
      - $ref: '#/components/schemas/metadataBase'
      - type: object
        properties:
          pagination:
            $ref: '#/components/schemas/indexPagination'
    metadataBase:
      type: object
      properties:
        datafiles:
          type: array
          description: "The datafiles contains a list of file URLs and metadata. \nThese files contain additional information related to the returned object and can be retrieved by a subsequent call. \nThis could be a supplementary data file, an informational file, the uploaded file where the data originated from, a generated file representing the whole dataset in a particular format, or any other related file. "
          items:
            $ref: '#/components/schemas/dataFile'
        status:
          type: array
          description: "The status field contains a list of informational status messages from the server. \nIf no status is reported, an empty list should be returned. See Error Reporting for more information."
          items:
            $ref: '#/components/schemas/status'
    metadataTokenPagination:
      allOf:
      - $ref: '#/components/schemas/metadataBase'
      - type: object
        properties:
          pagination:
            $ref: '#/components/schemas/tokenPagination'
    pointGeometry:
      type: object
      properties:
        coordinates:
          $ref: '#/components/schemas/position'
        type:
          type: string
          description: The literal string "Point"
          example: Point
          default: Point
      description: |-
        Copied from RFC 7946 Section 3.1.1

        A position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or
        easting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.
    polygon:
      type: array
      description: An array of linear rings
      example:
      - - - -77.456654
          - 42.241133
          - 494
        - - -75.414133
          - 41.508282
          - 571
        - - -76.506042
          - 42.417373
          - 123
        - - -77.456654
          - 42.241133
          - 346
      items:
        $ref: '#/components/schemas/linearRing'
    polygonGeometry:
      type: object
      properties:
        coordinates:
          $ref: '#/components/schemas/polygon'
        type:
          type: string
          description: The literal string "Polygon"
          example: Polygon
          default: Polygon
      description: "An array of Linear Rings. Each Linear Ring is an array of Points. \n\nA Point is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element."
    position:
      minItems: 2
      type: array
      description: A single position
      example:
      - -76.506042
      - 42.417373
      - 123
      items:
        type: number
    status:
      required:
      - message
      - messageType
      type: object
      properties:
        message:
          type: string
          description: A short message concerning the status of this request/response
          example: Request accepted, response successful
        messageType:
          type: string
          description: The logging level for the attached message
          example: INFO
          enum:
          - DEBUG
          - ERROR
          - WARNING
          - INFO
      description: An array of status messages to convey technical logging information from the server to the client.
    tokenPagination:
      allOf:
      - $ref: '#/components/schemas/basePagination'
      - required:
        - nextPageToken
        type: object
        properties:
          currentPageToken:
            type: string
            description: The string token used to query the current page of data.
            example: 48bc6ac1
          nextPageToken:
            type: string
            description: The string token used to query the next page of data.
            example: cb668f63
          prevPageToken:
            type: string
            description: The string token used to query the previous page of data.
            example: 9659857e
        description: "The pagination object is applicable only when the payload contains a \"data\" key. It describes the pagination of the data contained in the \"data\" array, as a way to identify which subset of data is being returned. \n\nTokenized pages are for large data sets which can not be efficiently broken into indexed pages. Use the nextPageToken and prevPageToken to construct an additional query and move to the next or previous page respectively.  "
    variantsSearchRequest:
      allOf:
      - $ref: '#/components/schemas/SearchRequestParametersTokenPaging'
      - type: object
        properties:
          callSetDbIds:
            type: array
            description: Only return variant calls which belong to call sets with these IDs. If unspecified, return all variants and no variant call objects.
            example:
            - 4639fe3e
            - b60d900b
            items:
              type: string
          end:
            type: integer
            description: The end of the window (0-based, exclusive) for which overlapping variants should be returned.
            example: 1500
          referenceDbId:
            type: string
            description: Only return variants on this reference.
            example: 120a2d5c
          start:
            type: integer
            description: The beginning of the window (0-based, inclusive) for which overlapping variants should be returned. Genomic positions are non-negative integers less than reference length. Requests spanning the join of circular genomes are represented as two requests one on each side of the join (position 0).
            example: 100
          variantDbIds:
            type: array
            description: The `Variant`s to search.
            example:
            - 3b63d889
            - ab4d174d
            items:
              type: string
          variantSetDbIds:
            type: array
            description: The `VariantSet` to search.
            example:
            - ba63d810
            - 434d1760
            items:
              type: string
    CallsListResponse:
      title: CallsListResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadataTokenPagination'
        result:
          $ref: '#/components/schemas/CallsListResponse_result'
    CallSetsListResponse:
      title: CallSetsListResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/CallSetsListResponseResult'
    callSetResponse:
      title: callSetResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/CallSet'
    GenomeMapListResponse:
      title: GenomeMapListResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/GenomeMapListResponse_result'
    GenomeMapSingleResponse:
      title: GenomeMapSingleResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/GenomeMap'
    LinkageGroupListResponse:
      title: LinkageGroupListResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/LinkageGroupListResponse_result'
    MarkerPositionListResponse:
      title: MarkerPositionListResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/MarkerPositionListResponse_result'
    ReferencesListResponse:
      title: ReferencesListResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/ReferencesListResponseResult'
    ReferenceSingleResponse:
      title: ReferenceSingleResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/Reference'
    ReferenceBasesResponse:
      title: ReferenceBasesResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/ReferenceBases'
    ReferenceSetsListResponse:
      title: ReferenceSetsListResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/ReferenceSetsListResponseResult'
    ReferenceSetsSingleResponse:
      title: ReferenceSetsSingleResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/ReferenceSet'
    SampleListResponse:
      title: SampleListResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/SampleListResponse_result'
    SampleSingleResponse:
      title: SampleSingleResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/Sample'
    "202AcceptedSearchResponse":
      title: 202AcceptedSearchResponse
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/202AcceptedSearchResponse_result'
    VariantsListResponse:
      title: VariantsListResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadataTokenPagination'
        result:
          $ref: '#/components/schemas/VariantsListResponseResult'
    VariantSetsListResponse:
      title: VariantSetsListResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/VariantSetsListResponseResult'
    VariantSingleResponse:
      title: VariantSingleResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/Variant'
    variantSetResponse:
      title: variantSetResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/VariantSet'
    VendorOrderListResponse:
      title: VendorOrderListResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/VendorOrderListResponse_result'
    VendorOrderSubmissionSingleResponse:
      title: VendorOrderSubmissionSingleResponse
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/VendorOrderSubmission'
    VendorPlateListResponse:
      title: VendorPlateListResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/VendorPlateListResponse_result'
    VendorResultFileListResponse:
      title: VendorResultFileListResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/VendorResultFileListResponse_result'
    VendorOrderStatusResponse:
      title: VendorOrderStatusResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/VendorOrderStatusResponse_result'
    VendorPlateSubmissionIdSingleResponse:
      title: VendorPlateSubmissionIdSingleResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/VendorPlateSubmissionId'
    VendorPlateSubmissionSingleResponse:
      title: VendorPlateSubmissionSingleResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/VendorPlateSubmission'
    VendorSpecificationSingleResponse:
      title: VendorSpecificationSingleResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/VendorSpecification'
    ExternalReferences_inner:
      type: object
      properties:
        referenceID:
          type: string
          description: The external reference ID. Could be a simple string or a URI.
        referenceSource:
          type: string
          description: An identifier for the source system or database of this reference
    OntologyReference_documentationLinks:
      type: object
      properties:
        URL:
          type: string
          format: uri
          example: http://purl.obolibrary.org/obo/ro.owl
        type:
          type: string
          example: OBO
          enum:
          - OBO
          - RDF
          - WEBPAGE
    ScaleBaseClass_validValues_categories:
      type: object
      properties:
        label:
          type: string
          description: A text label for a category
        value:
          type: string
          description: The actual value for a category
    ScaleBaseClass_validValues:
      type: object
      properties:
        categories:
          type: array
          description: List of possible values with optional labels
          example:
          - label: low
            value: "0"
          - label: medium
            value: "5"
          - label: high
            value: "10"
          items:
            $ref: '#/components/schemas/ScaleBaseClass_validValues_categories'
        max:
          type: integer
          description: Maximum value (used for field data capture control).
          example: 9999
        min:
          type: integer
          description: Minimum value (used for data capture control) for numerical and date scales
          example: 2
    VariantSet_availableFormats:
      type: object
      properties:
        dataFormat:
          type: string
          description: dataFormat defines the structure of the data within a file (ie DartSeq, VCF, Hapmap, tabular, etc)
          enum:
          - DartSeq
          - VCF
          - Hapmap
          - tabular
          - JSON
        fileFormat:
          type: string
          description: fileFormat defines the MIME type of the file (ie text/csv, application/excel, application/zip). This should also be reflected in the Accept and ContentType HTTP headers for every relevant request and response.
          enum:
          - text/csv
          - text/tsv
          - application/excel
          - application/zip
          - application/json
        fileURL:
          type: string
          description: A URL which indicates the location of the file version of this VariantSet. Could be a static file URL or an API endpoint which generates the file.
          format: uri
      description: Each 'availableFormat' object is a pairing of dataFormat and fileFormat. These must be communicated in pairs because they are not independant parameters and sometimes one influences the other.
    ShipmentForm:
      required:
      - fileURL
      type: object
      properties:
        fileDescription:
          type: string
          description: The human readable long description for this form
          example: This is a shipment manifest form
        fileName:
          type: string
          description: The human readable name for this form
          example: Shipment Manifest
        fileURL:
          type: string
          description: The URL to download this form
          format: uri
          example: https://vendor.org/forms/manifest.pdf
    VendorPlateSubmission_plates:
      type: object
      properties:
        clientPlateBarcode:
          type: string
          description: (Optional) The value of the bar code attached to this plate
          example: bfb33593
        clientPlateId:
          type: string
          description: The ID which uniquely identifies this plate to the client making the request
          example: dae8f49d
        sampleSubmissionFormat:
          $ref: '#/components/schemas/PlateFormat'
        samples:
          type: array
          items:
            $ref: '#/components/schemas/VendorSample'
    VendorPlateSubmissionRequest_plates:
      type: object
      properties:
        clientPlateBarcode:
          type: string
          description: (Optional) The value of the bar code attached to this plate
          example: 6ebf3f25
        clientPlateId:
          type: string
          description: The ID which uniquely identifies this plate to the client making the request
          example: 02a8d6f0
        sampleSubmissionFormat:
          $ref: '#/components/schemas/PlateFormat'
        samples:
          type: array
          items:
            $ref: '#/components/schemas/VendorSample'
    VendorSpecificationService_specificRequirements:
      type: object
      properties:
        description:
          type: string
        key:
          type: string
    CallsListResponse_result:
      required:
      - data
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Call'
        expandHomozygotes:
          type: boolean
          description: Should homozygotes be expanded (true) or collapsed into a single occurrence (false)
          example: true
        sepPhased:
          type: string
          description: The string used as a separator for phased allele calls.
          example: ~
        sepUnphased:
          type: string
          description: The string used as a separator for unphased allele calls.
          example: '|'
        unknownString:
          type: string
          description: The string used as a representation for missing data.
          example: "-"
    CallSetsListResponseResult:
      required:
      - data
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/CallSet'
    GenomeMapListResponse_result:
      required:
      - data
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/GenomeMap'
    LinkageGroupListResponse_result:
      required:
      - data
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/LinkageGroup'
    MarkerPositionListResponse_result:
      required:
      - data
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/MarkerPosition'
    ReferencesListResponseResult:
      required:
      - data
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Reference'
    ReferenceSetsListResponseResult:
      required:
      - data
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ReferenceSet'
    SampleListResponse_result:
      required:
      - data
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Sample'
    "202AcceptedSearchResponse_result":
      type: object
      properties:
        searchResultsDbId:
          type: string
          example: 551ae08c
    VariantsListResponseResult:
      required:
      - data
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Variant'
    VariantSetsListResponseResult:
      required:
      - data
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/VariantSet'
    VendorOrderListResponse_result:
      required:
      - data
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/VendorOrder'
    VendorPlateListResponse_result:
      required:
      - data
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/VendorPlate'
    VendorResultFileListResponse_result:
      required:
      - data
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/VendorResultFile'
    VendorOrderStatusResponse_result:
      type: object
      properties:
        status:
          type: string
          enum:
          - registered
          - received
          - inProgress
          - completed
          - rejected
  responses:
    "202AcceptedSearchResponse":
      description: Accepted
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/202AcceptedSearchResponse'
    "400BadRequest":
      description: Bad Request
      content:
        application/json:
          schema:
            type: string
          example: |-
            ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

            ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

            ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
    "401Unauthorized":
      description: Unauthorized
      content:
        application/json:
          schema:
            type: string
          example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
    "403Forbidden":
      description: Forbidden
      content:
        application/json:
          schema:
            type: string
          example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
    "404NotFound":
      description: Not Found
      content:
        application/json:
          schema:
            type: string
          example: ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found
    CallSetsListResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CallSetsListResponse'
    CallsListResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CallsListResponse'
    MarkerPositionListResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MarkerPositionListResponse'
    ReferenceSetsListResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ReferenceSetsListResponse'
    ReferencesListResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ReferencesListResponse'
    SampleListResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SampleListResponse'
    SampleSingleResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SampleSingleResponse'
    VariantSetsListResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/VariantSetsListResponse'
    VariantsListResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/VariantsListResponse'
  parameters:
    acceptHeader:
      name: Accept
      in: header
      description: The requested content type which should be returned by the server
      required: true
      style: simple
      explode: false
      schema:
        $ref: '#/components/schemas/WSMIMEDataTypes'
      example: application/json
    authorizationHeader:
      name: Authorization
      in: header
      description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
      required: false
      style: simple
      explode: false
      schema:
        pattern: ^Bearer .*$
        type: string
      example: Bearer XXXX
    externalReferenceID:
      name: externalReferenceID
      in: query
      description: An external reference ID. Could be a simple string or a URI. (use with `externalReferenceSource` parameter)
      required: false
      style: form
      explode: true
      schema:
        type: string
    externalReferenceSource:
      name: externalReferenceSource
      in: query
      description: An identifier for the source system or database of an external reference (use with `externalReferenceID` parameter)
      required: false
      style: form
      explode: true
      schema:
        type: string
    page:
      name: page
      in: query
      description: |-
        Used to request a specific page of data to be returned.

        The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
      required: false
      style: form
      explode: true
      schema:
        type: integer
      example: "0"
    pageSize:
      name: pageSize
      in: query
      description: The size of the pages to be returned. Default is `1000`.
      required: false
      style: form
      explode: true
      schema:
        type: integer
      example: 1000
    pageToken:
      name: pageToken
      in: query
      description: "Used to request a specific page of data to be returned.\n\nTokenized pages are for large data sets which can not be efficiently broken into indexed pages. Use the nextPageToken and prevPageToken from a prior response to construct a query and move to the next or previous page respectively. "
      required: false
      style: form
      explode: true
      schema:
        type: string
      example: 33c27874
    searchResultsDbId:
      name: searchResultsDbId
      in: path
      description: Unique identifier which references the search results
      required: true
      style: simple
      explode: false
      schema:
        type: string
  securitySchemes:
    AuthorizationToken:
      type: http
      description: OAuth Bearer Token - A valid Bearer token to prove authorization
      scheme: bearer
      bearerFormat: nonce token or JWT
