---
openapi: 3.0.0
info:
  title: BrAPI-Germplasm
  description: "The Breeding API (BrAPI) is a Standardized REST ful Web Service API Specification for communicating Plant Breeding Data. BrAPI allows for easy data sharing between databases and tools involved in plant breeding.\n<div class=\"brapi-section\">\n<h2 class=\"brapi-section-title\">General Reference Documentation</h2>\n<div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/URL_Structure.md\">URL Structure</a></div>\n<div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Response_Structure.md\">Response Structure</a></div>\n<div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Date_Time_Encoding.md\">Date/Time Encoding</a></div>\n<div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Location_Encoding.md\">Location Encoding</a></div>\n<div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Error_Handling.md\">Error Handling</a></div>\n<div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Search_Services.md\">Search Services</a></div>\n</div>\n\n<div class=\"brapi-section\">\n<h2 class=\"brapi-section-title\">BrAPI Core</h2>\n<div class=\"brapi-section-description\">The BrAPI Core module contains high level entities used for organization and management. This includes Programs, Trials, Studies, Locations, People, and Lists</div>\n<div class=\"version-number\">V2.0</div>\n<div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Core\">GitHub</a></div>\n<div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Core\">SwaggerHub</a></div>\n<div class=\"link-btn\"><a href=\"https://brapicore.docs.apiary.io\">Apiary</a></div>\n<div class=\"stop-float\"></div>\n</div>\n\n<div class=\"brapi-section\">\n<h2 class=\"brapi-section-title\">BrAPI Phenotyping</h2>\n<div class=\"brapi-section-description\">The BrAPI Phenotyping module contains entities related to phenotypic observations. This includes Observation Units, Observations, Observation Variables, Traits, Scales, Methods, and Images</div>\n<div class=\"version-number\">V2.0</div>\n<div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Phenotyping\">GitHub</a></div>\n<div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Phenotyping\">SwaggerHub</a></div>\n<div class=\"link-btn\"><a href=\"https://brapiphenotyping.docs.apiary.io\">Apiary</a></div>\n<div class=\"stop-float\"></div>\n</div>\n\n<div class=\"brapi-section\">\n<h2 class=\"brapi-section-title\">BrAPI Genotyping</h2>\n<div class=\"brapi-section-description\">The BrAPI Genotyping module contains entities related to genotyping analysis. This includes Samples, Markers, Variant Sets, Variants, Call Sets, Calls, References, Reads, and Vendor Orders</div>\n<div class=\"version-number\">V2.0</div>\n<div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Genotyping\">GitHub</a></div>\n<div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Genotyping\">SwaggerHub</a></div>\n<div class=\"link-btn\"><a href=\"https://brapigenotyping.docs.apiary.io\">Apiary</a></div>\n<div class=\"stop-float\"></div>\n</div>\n\n<div class=\"current-brapi-section brapi-section\">\n<h2 class=\"brapi-section-title\">BrAPI Germplasm</h2>\n<div class=\"brapi-section-description\">The BrAPI Germplasm module contains entities related to germplasm management. This includes Germplasm, Germplasm Attributes, Seed Lots, Crosses, Pedigree, and Progeny</div>\n<div class=\"version-number\">V2.0</div>\n<div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Germplasm\">GitHub</a></div>\n<div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Germplasm\">SwaggerHub</a></div>\n<div class=\"link-btn\"><a href=\"https://brapigermplasm.docs.apiary.io\">Apiary</a></div>\n<div class=\"stop-float\"></div>\n</div>\n\n<style>\n.link-btn{\nfloat: left; \nmargin: 2px 10px 0 0; \npadding: 0 5px; \nborder-radius: 5px; \nbackground-color: #ddd;\n}\n.stop-float{\n  clear: both;\n}\n.version-number{\n  float: left; \n  margin: 5px 10px 0 5px;\n}\n.brapi-section-title{\n  margin: 0 10px 0 0;\n  font-size: 20px;\n}\n.current-brapi-section{\n  font-weight: bolder;\n  border-radius: 5px; \n  background-color: #ddd;\n}\n.brapi-section{\n  padding: 5px 5px; \n}\n.brapi-section-description{\n  margin: 5px 0 0 5px;\n}\n</style>"
  version: "2.0"
servers:
- url: https://test-server.brapi.org/brapi/v2
security:
- AuthorizationToken: []
tags:
- name: Germplasm
  description: Information about Germplasm
  externalDocs:
    description: Docs
    url: https://wiki.brapi.org/
- name: Germplasm Attributes
  description: Information about Germplasm Attributes
  externalDocs:
    description: Docs
    url: https://wiki.brapi.org/
- name: Germplasm Attribute Values
  description: Information about Germplasm Attribute Values
  externalDocs:
    description: Docs
    url: https://wiki.brapi.org/
- name: Crossing Projects
  description: Information about Crossing Projects
  externalDocs:
    description: Docs
    url: https://wiki.brapi.org/
- name: Crosses
  description: Information about Crosses
  externalDocs:
    description: Docs
    url: https://wiki.brapi.org/
- name: Seed Lots
  description: Information about Seed Lots
  externalDocs:
    description: Docs
    url: https://wiki.brapi.org/
paths:
  /attributes:
    get:
      tags:
      - Germplasm Attributes
      summary: Get the Germplasm Attributes
      description: List available attributes.
      parameters:
      - name: attributeCategory
        in: query
        description: The general category for the attribute. very similar to Trait class.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: attributeDbId
        in: query
        description: The unique id for an attribute
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: attributeName
        in: query
        description: The human readable name for an attribute
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: germplasmDbId
        in: query
        description: Get all attributes associated with this germplasm
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: externalReferenceID
        in: query
        description: An external reference ID. Could be a simple string or a URI. (use with `externalReferenceSource` parameter)
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: externalReferenceSource
        in: query
        description: An identifier for the source system or database of an external reference (use with `externalReferenceID` parameter)
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: page
        in: query
        description: |-
          Used to request a specific page of data to be returned.

          The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: "0"
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 1000
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GermplasmAttributeListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
    post:
      tags:
      - Germplasm Attributes
      summary: Create new Germplasm Attributes
      description: Create new Germplasm Attributes
      parameters:
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/GermplasmAttributeNewRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GermplasmAttributeListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /attributes/categories:
    get:
      tags:
      - Germplasm Attributes
      summary: Get the Categories of Germplasm Attributes
      description: List all available attribute categories.
      parameters:
      - name: page
        in: query
        description: |-
          Used to request a specific page of data to be returned.

          The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: "0"
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 1000
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GermplasmAttributeCategoryListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /attributes/{attributeDbId}:
    get:
      tags:
      - Germplasm Attributes
      summary: Get the details for a specific Germplasm Attribute
      description: Get the details for a specific Germplasm Attribute
      parameters:
      - name: attributeDbId
        in: path
        description: The unique id for an attribute
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GermplasmAttributeSingleResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
    put:
      tags:
      - Germplasm Attributes
      summary: Update an existing Germplasm Attribute
      description: Update an existing Germplasm Attribute
      parameters:
      - name: attributeDbId
        in: path
        description: The unique id for an attribute
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GermplasmAttributeNewRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GermplasmAttributeSingleResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /attributevalues:
    get:
      tags:
      - Germplasm Attribute Values
      summary: Get the Germplasm Attribute Values
      description: Get the Germplasm Attribute Values
      parameters:
      - name: attributeValueDbId
        in: query
        description: The unique id for an attribute value
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: attributeDbId
        in: query
        description: The unique id for an attribute
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: attributeName
        in: query
        description: The human readable name for an attribute
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: germplasmDbId
        in: query
        description: Get all attributes associated with this germplasm
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: externalReferenceID
        in: query
        description: An external reference ID. Could be a simple string or a URI. (use with `externalReferenceSource` parameter)
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: externalReferenceSource
        in: query
        description: An identifier for the source system or database of an external reference (use with `externalReferenceID` parameter)
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: page
        in: query
        description: |-
          Used to request a specific page of data to be returned.

          The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: "0"
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 1000
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GermplasmAttributeValueListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
    post:
      tags:
      - Germplasm Attribute Values
      summary: Create new Germplasm Attribute Values
      description: Create new Germplasm Attribute Values
      parameters:
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/GermplasmAttributeValueNewRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GermplasmAttributeValueListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /attributevalues/{attributeValueDbId}:
    get:
      tags:
      - Germplasm Attribute Values
      summary: Get the details for a specific Germplasm Attribute
      description: Get the details for a specific Germplasm Attribute
      parameters:
      - name: attributeValueDbId
        in: path
        description: The unique id for an attribute value
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GermplasmAttributeValueSingleResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
    put:
      tags:
      - Germplasm Attribute Values
      summary: Update an existing Germplasm Attribute Value
      description: Update an existing Germplasm Attribute Value
      parameters:
      - name: attributeValueDbId
        in: path
        description: The unique id for an attribute value
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GermplasmAttributeValueNewRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GermplasmAttributeValueSingleResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /breedingmethods:
    get:
      tags:
      - Germplasm
      summary: Get the Breeding Methods
      description: Get the list of germplasm breeding methods available in a system.
      parameters:
      - name: page
        in: query
        description: |-
          Used to request a specific page of data to be returned.

          The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: "0"
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 1000
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BreedingMethodListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /breedingmethods/{breedingMethodDbId}:
    get:
      tags:
      - Germplasm
      summary: Get the details of a specific Breeding Method
      description: Get the details of a specific Breeding Method used to produce Germplasm
      parameters:
      - name: breedingMethodDbId
        in: path
        description: Internal database identifier for a breeding method
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BreedingMethodSingleResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found
  /crosses:
    get:
      tags:
      - Crosses
      summary: Get a filtered list of Cross entities
      description: Get a filtered list of Cross entities.
      parameters:
      - name: crossingProjectDbId
        in: query
        description: Search for Crossing Projects with this unique id
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: crossDbId
        in: query
        description: Search for Cross with this unique id
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: externalReferenceID
        in: query
        description: An external reference ID. Could be a simple string or a URI. (use with `externalReferenceSource` parameter)
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: externalReferenceSource
        in: query
        description: An identifier for the source system or database of an external reference (use with `externalReferenceID` parameter)
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: page
        in: query
        description: |-
          Used to request a specific page of data to be returned.

          The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: "0"
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 1000
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CrossesListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
    put:
      tags:
      - Crosses
      summary: Update existing Cross entities on this server
      description: Update existing Cross entities on this server
      parameters:
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                $ref: '#/components/schemas/CrossNewRequest'
              description: A map of new Cross entities. The key is the crossDbId of the entity to be updated, the value is the Cross object.
              example:
                <crossDbId_1>:
                  additionalInfo: {}
                  crossAttributes:
                  - crossAttributeName: string
                    crossAttributeValue: string
                  crossName: my_Crosses_2018_01
                  crossType: BIPARENTAL
                  crossingProjectDbId: 696d7c92
                  crossingProjectName: my_Crosses_2018
                  parent1:
                    germplasmDbId: d34b10c3
                    germplasmName: TME_419
                    observationUnitDbId: 3f0a1798
                    observationUnitName: my_Plot_9001
                    parentType: FEMALE
                  parent2:
                    germplasmDbId: 776a609c
                    germplasmName: TME_419
                    observationUnitDbId: 2e1926a7
                    observationUnitName: my_Plot_9002
                    parentType: MALE
                  pollinationTimeStamp: 2019-08-15T18:49:00.327Z
                <crossDbId_2>:
                  additionalInfo: {}
                  crossAttributes:
                  - crossAttributeName: string
                    crossAttributeValue: string
                  crossName: my_Crosses_2018_02
                  crossType: BIPARENTAL
                  crossingProjectDbId: 696d7c92
                  crossingProjectName: my_Crosses_2018
                  parent1:
                    germplasmDbId: c43a2fd2
                    germplasmName: TME_419
                    observationUnitDbId: 3f2a37b8
                    observationUnitName: my_Plot_9013
                    parentType: FEMALE
                  parent2:
                    germplasmDbId: 124b10ad
                    germplasmName: TME_419
                    observationUnitDbId: 27194637
                    observationUnitName: my_Plot_9014
                    parentType: MALE
                  pollinationTimeStamp: 2019-08-15T18:49:00.327Z
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CrossesListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
    post:
      tags:
      - Crosses
      summary: Create new Cross entities on this server
      description: Create new Cross entities on this server
      parameters:
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CrossNewRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CrossesListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /crossingprojects:
    get:
      tags:
      - Crossing Projects
      summary: Get a filtered list of Crossing Projects
      description: Get a filtered list of Crossing Projects.
      parameters:
      - name: crossingProjectDbId
        in: query
        description: Search for Crossing Projects with this unique id
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: externalReferenceID
        in: query
        description: An external reference ID. Could be a simple string or a URI. (use with `externalReferenceSource` parameter)
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: externalReferenceSource
        in: query
        description: An identifier for the source system or database of an external reference (use with `externalReferenceID` parameter)
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: page
        in: query
        description: |-
          Used to request a specific page of data to be returned.

          The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: "0"
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 1000
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CrossingProjectsListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
    post:
      tags:
      - Crossing Projects
      summary: Create new Crossing Project entities on this server
      description: Create new Crossing Project entities on this server
      parameters:
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CrossingProjectNewRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CrossingProjectsListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /crossingprojects/{crossingProjectDbId}:
    get:
      tags:
      - Crossing Projects
      summary: Get a filtered list of Crossing Projects
      description: Get a filtered list of Crossing Projects.
      parameters:
      - name: crossingProjectDbId
        in: path
        description: Search for Crossing Projects with this unique id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CrossingProjectsSingleResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
    put:
      tags:
      - Crossing Projects
      summary: Update an existing Crossing Project
      description: Update an existing Crossing Project entity on this server
      parameters:
      - name: crossingProjectDbId
        in: path
        description: Search for Crossing Projects with this unique id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CrossingProjectNewRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CrossingProjectsSingleResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /germplasm:
    get:
      tags:
      - Germplasm
      summary: Get a filtered list of Germplasm
      description: "Addresses these needs\n\n- General germplasm search mechanism that accepts POST for complex queries \n\n- Possibility to search germplasm by more parameters than those allowed by the existing germplasm search \n\n- Possibility to get MCPD details by PUID rather than dbId"
      parameters:
      - name: germplasmPUI
        in: query
        description: Permanent unique identifier (DOI, URI, etc.)
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: germplasmDbId
        in: query
        description: Internal database identifier
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: germplasmName
        in: query
        description: Name of the germplasm
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: commonCropName
        in: query
        description: The common crop name related to this germplasm
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: accessionNumber
        in: query
        description: Unique identifiers for accessions within a genebank
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: collection
        in: query
        description: A specific panel/collection/population name this germplasm belongs to.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: genus
        in: query
        description: Genus name to identify germplasm
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: species
        in: query
        description: Species name to identify germplasm
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: studyDbId
        in: query
        description: Search for Germplasm that are associated with a particular Study
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: synonym
        in: query
        description: Alternative name or ID used to reference this germplasm
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: parentDbId
        in: query
        description: Search for Germplasm with this parent
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: progenyDbId
        in: query
        description: Search for Germplasm with this child
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: externalReferenceID
        in: query
        description: An external reference ID. Could be a simple string or a URI. (use with `externalReferenceSource` parameter)
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: externalReferenceSource
        in: query
        description: An identifier for the source system or database of an external reference (use with `externalReferenceID` parameter)
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: page
        in: query
        description: |-
          Used to request a specific page of data to be returned.

          The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: "0"
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 1000
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GermplasmListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
    post:
      tags:
      - Germplasm
      summary: Create new Germplasm entities on this server
      description: Create new Germplasm entities on this server
      parameters:
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/GermplasmNewRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GermplasmListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /germplasm/{germplasmDbId}:
    get:
      tags:
      - Germplasm
      summary: Get the details of a specific Germplasm
      description: Germplasm Details by germplasmDbId was merged with Germplasm Multi Crop Passport Data. The MCPD fields are optional and marked with the prefix [MCPD].
      parameters:
      - name: germplasmDbId
        in: path
        description: The internal id of the germplasm
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GermplasmSingleResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found
    put:
      tags:
      - Germplasm
      summary: Update the details of an existing Germplasm
      description: Germplasm Details by germplasmDbId was merged with Germplasm Multi Crop Passport Data. The MCPD fields are optional and marked with the prefix [MCPD].
      parameters:
      - name: germplasmDbId
        in: path
        description: The internal id of the germplasm
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GermplasmNewRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GermplasmSingleResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found
  /germplasm/{germplasmDbId}/mcpd:
    get:
      tags:
      - Germplasm
      summary: Get the details of a specific Germplasm in MCPD format
      description: |-
        Get all MCPD details of a germplasm

        <a target="_blank" href="https://www.bioversityInternational.org/fileadmin/user_upload/online_library/publications/pdfs/FAOBIOVERSITY_MULTI-CROP_PASSPORT_DESCRIPTORS_V.2.1_2015_2020.pdf"> MCPD v2.1 spec can be found here </a>

        Implementation Notes

        - When the MCPD spec identifies a field which can have multiple values returned, the JSON response should be an array instead of a semi-colon separated string.
      parameters:
      - name: germplasmDbId
        in: path
        description: the internal id of the germplasm
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GermplasmMCPDResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found
  /germplasm/{germplasmDbId}/pedigree:
    get:
      tags:
      - Germplasm
      summary: Get the pedigree details of a specific Germplasm
      description: Get the parentage information of a specific Germplasm
      parameters:
      - name: germplasmDbId
        in: path
        description: the internal id of the germplasm
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: notation
        in: query
        description: text representation of the pedigree
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: includeSiblings
        in: query
        description: include array of siblings in response
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GermplasmPedigreeResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found
  /germplasm/{germplasmDbId}/progeny:
    get:
      tags:
      - Germplasm
      summary: Get the progeny details of a specific Germplasm
      description: |-
        Get the germplasmDbIds for all the Progeny of a particular germplasm.

        Implementation Notes

        - Regarding the ''parentType'' field in the progeny object. Given a germplasm A having a progeny B and C, ''parentType'' for progeny B refers to the ''parentType'' of A toward B.
      parameters:
      - name: germplasmDbId
        in: path
        description: the internal id of the germplasm
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GermplasmProgenyResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found
  /plannedcrosses:
    get:
      tags:
      - Crosses
      summary: Get a filtered list of Planned Cross entities
      description: Get a filtered list of Planned Cross entities.
      parameters:
      - name: crossingProjectDbId
        in: query
        description: Search for Crossing Projects with this unique id
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: plannedCrossDbId
        in: query
        description: Search for Planned Cross with this unique id
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: externalReferenceID
        in: query
        description: An external reference ID. Could be a simple string or a URI. (use with `externalReferenceSource` parameter)
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: externalReferenceSource
        in: query
        description: An identifier for the source system or database of an external reference (use with `externalReferenceID` parameter)
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: page
        in: query
        description: |-
          Used to request a specific page of data to be returned.

          The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: "0"
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 1000
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlannedCrossesListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
    put:
      tags:
      - Crosses
      summary: Update existing Planned Cross entities on this server
      description: Update existing Planned Cross entities on this server
      parameters:
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                $ref: '#/components/schemas/PlannedCrossNewRequest'
              description: A map of new Planned Cross entities. The key is the plannedCrossDbId of the entity to be updated, the value is the Planned Cross object.
              example:
                <plannedCrossDbId_1>:
                  additionalInfo: {}
                  crossAttributes:
                  - crossAttributeName: string
                    crossAttributeValue: string
                  crossType: BIPARENTAL
                  crossingProjectDbId: 696d7c92
                  crossingProjectName: my_Crosses_2018
                  parent1:
                    germplasmDbId: d34b10c3
                    germplasmName: TME_419
                    observationUnitDbId: 3f0a1798
                    observationUnitName: my_Plot_9001
                    parentType: FEMALE
                  parent2:
                    germplasmDbId: 776a609c
                    germplasmName: TME_419
                    observationUnitDbId: 2e1926a7
                    observationUnitName: my_Plot_9002
                    parentType: MALE
                  plannedCrossName: my_Crosses_2018_01
                  pollinationTimeStamp: 2019-08-15T18:49:00.327Z
                <plannedCrossDbId_2>:
                  additionalInfo: {}
                  crossAttributes:
                  - crossAttributeName: string
                    crossAttributeValue: string
                  crossType: BIPARENTAL
                  crossingProjectDbId: 696d7c92
                  crossingProjectName: my_Crosses_2018
                  parent1:
                    germplasmDbId: c43a2fd2
                    germplasmName: TME_419
                    observationUnitDbId: 3f2a37b8
                    observationUnitName: my_Plot_9013
                    parentType: FEMALE
                  parent2:
                    germplasmDbId: 124b10ad
                    germplasmName: TME_419
                    observationUnitDbId: 27194637
                    observationUnitName: my_Plot_9014
                    parentType: MALE
                  plannedCrossName: my_Crosses_2018_02
                  pollinationTimeStamp: 2019-08-15T18:49:00.327Z
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlannedCrossesListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
    post:
      tags:
      - Crosses
      summary: Create new Planned Cross entities on this server
      description: Create new Planned Cross entities on this server
      parameters:
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/PlannedCrossNewRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlannedCrossesListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /search/attributes:
    post:
      tags:
      - Germplasm Attributes
      summary: Submit a search request for Germplasm Attributes
      description: "Search for a set of Germplasm Attributes based on some criteria\n        \nSee Search Services for additional implementation details."
      parameters:
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GermplasmAttributeSearchRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GermplasmAttributeListResponse'
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/202AcceptedSearchResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /search/attributes/{searchResultsDbId}:
    get:
      tags:
      - Germplasm Attributes
      summary: Get the results of a Germplasm Attributes search request
      description: |-
        Get the results of a Germplasm Attributes search request

        See Search Services for additional implementation details.
      parameters:
      - name: searchResultsDbId
        in: path
        description: Unique identifier which references the search results
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: page
        in: query
        description: |-
          Used to request a specific page of data to be returned.

          The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: "0"
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 1000
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GermplasmAttributeListResponse'
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/202AcceptedSearchResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found
  /search/attributevalues:
    post:
      tags:
      - Germplasm Attribute Values
      summary: Submit a search request for Germplasm Attribute Values
      description: "Search for a set of Germplasm Attribute Values based on some criteria\n        \nSee Search Services for additional implementation details."
      parameters:
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GermplasmAttributeValueSearchRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GermplasmAttributeValueListResponse'
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/202AcceptedSearchResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /search/attributevalues/{searchResultsDbId}:
    get:
      tags:
      - Germplasm Attribute Values
      summary: Get the results of a Germplasm Attribute Values search request
      description: |-
        Get the results of a Germplasm Attribute Values search request

        See Search Services for additional implementation details.
      parameters:
      - name: searchResultsDbId
        in: path
        description: Unique identifier which references the search results
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: page
        in: query
        description: |-
          Used to request a specific page of data to be returned.

          The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: "0"
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 1000
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GermplasmAttributeValueListResponse'
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/202AcceptedSearchResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found
  /search/germplasm:
    post:
      tags:
      - Germplasm
      summary: Submit a search request for Germplasm
      description: "Search for a set of germplasm based on some criteria\n\nAddresses these needs \n\n- General germplasm search mechanism that accepts POST for complex queries \n\n- Possibility to search germplasm by more parameters than those allowed by the existing germplasm search \n\n- Possibility to get MCPD details by PUID rather than dbId\n\nSee Search Services for additional implementation details."
      parameters:
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GermplasmSearchRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GermplasmListResponse'
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/202AcceptedSearchResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /search/germplasm/{searchResultsDbId}:
    get:
      tags:
      - Germplasm
      summary: Get the results of a Germplasm search request
      description: "See Search Services for additional implementation details.\n\nAddresses these needs: \n\n1. General germplasm search mechanism that accepts POST for complex queries \n\n2. possibility to search germplasm by more parameters than those allowed by the existing germplasm search \n\n3. possibility to get MCPD details by PUID rather than dbId"
      parameters:
      - name: searchResultsDbId
        in: path
        description: Unique identifier which references the search results
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: page
        in: query
        description: |-
          Used to request a specific page of data to be returned.

          The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: "0"
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 1000
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GermplasmListResponse'
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/202AcceptedSearchResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found
  /seedlots:
    get:
      tags:
      - Seed Lots
      summary: Get a filtered list of Seed Lot descriptions
      description: Get a filtered list of Seed Lot descriptions available in a system.
      parameters:
      - name: seedLotDbId
        in: query
        description: Unique id for a seed lot on this server
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: germplasmDbId
        in: query
        description: The internal id of the germplasm
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: externalReferenceID
        in: query
        description: An external reference ID. Could be a simple string or a URI. (use with `externalReferenceSource` parameter)
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: externalReferenceSource
        in: query
        description: An identifier for the source system or database of an external reference (use with `externalReferenceID` parameter)
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: page
        in: query
        description: |-
          Used to request a specific page of data to be returned.

          The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: "0"
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 1000
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SeedLotListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
    post:
      tags:
      - Seed Lots
      summary: Add new Seed Lot descriptions to a server
      description: Add new Seed Lot descriptions to a server
      parameters:
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/SeedLotNewRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SeedLotListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /seedlots/transactions:
    get:
      tags:
      - Seed Lots
      summary: Get a filtered list of Seed Lot Transactions
      description: Get a filtered list of Seed Lot Transactions
      parameters:
      - name: transactionDbId
        in: query
        description: Unique id for a transaction on this server
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: seedLotDbId
        in: query
        description: Unique id for a seed lot on this server
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: germplasmDbId
        in: query
        description: The internal id of the germplasm
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: externalReferenceID
        in: query
        description: An external reference ID. Could be a simple string or a URI. (use with `externalReferenceSource` parameter)
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: externalReferenceSource
        in: query
        description: An identifier for the source system or database of an external reference (use with `externalReferenceID` parameter)
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: page
        in: query
        description: |-
          Used to request a specific page of data to be returned.

          The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: "0"
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 1000
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SeedLotTransactionListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
    post:
      tags:
      - Seed Lots
      summary: Add new Seed Lot Transaction to be recorded
      description: Add new Seed Lot Transaction to be recorded
      parameters:
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/SeedLotNewTransactionRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SeedLotTransactionListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /seedlots/{seedLotDbId}:
    get:
      tags:
      - Seed Lots
      summary: Get a specific Seed Lot
      description: Get a specific Seed Lot by seedLotDbId
      parameters:
      - name: seedLotDbId
        in: path
        description: Unique id for a seed lot on this server
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SeedLotSingleResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found
    put:
      tags:
      - Seed Lots
      summary: Update an existing Seed Lot
      description: Update an existing Seed Lot
      parameters:
      - name: seedLotDbId
        in: path
        description: Unique id for a seed lot on this server
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SeedLotNewRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SeedLotSingleResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found
  /seedlots/{seedLotDbId}/transactions:
    get:
      tags:
      - Seed Lots
      summary: Get all Transactions related to a specific Seed Lot
      description: Get all Transactions related to a specific Seed Lot
      parameters:
      - name: seedLotDbId
        in: path
        description: Unique id for a seed lot on this server
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: transactionDbId
        in: query
        description: Unique id for a Transaction that has occurred
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: transactionDirection
        in: query
        description: Filter results to only include transactions directed to the specific Seed Lot (TO), away from the specific Seed Lot (FROM), or both (BOTH). The default value for this parameter is BOTH
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - TO
          - FROM
          - BOTH
      - name: page
        in: query
        description: |-
          Used to request a specific page of data to be returned.

          The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: "0"
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 1000
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SeedLotTransactionListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found
components:
  schemas:
    BreedingMethod:
      required:
      - breedingMethodDbId
      type: object
      properties:
        abbreviation:
          type: string
          description: an abbreviation for the name of this breeding method
          example: MB
        breedingMethodDbId:
          type: string
          description: the unique identifier for this breeding method
          example: ffcce7ef
        breedingMethodName:
          type: string
          description: human readable name of the breeding method
          example: Male Backcross
        description:
          type: string
          description: human readable description of the breeding method
          example: Backcross to recover a specific gene.
    Context:
      title: context
      type: array
      description: "The JSON-LD Context is used to provide JSON-LD definitions to each field in a JSON object. By providing an array of context file urls, a BrAPI response object becomes JSON-LD compatible.  \n\nFor more information, see https://w3c.github.io/json-ld-syntax/#the-context"
      example:
      - https://brapi.org/jsonld/context/metadata.jsonld
      items:
        type: string
        format: uri
    Cross:
      allOf:
      - $ref: '#/components/schemas/CrossNewRequest'
      - type: object
        properties:
          crossDbId:
            type: string
            description: the unique identifier for a cross
            example: d105fd6f
    CrossNewRequest:
      type: object
      properties:
        additionalInfo:
          type: object
          additionalProperties:
            type: string
          description: Additional arbitrary info
        crossAttributes:
          type: array
          description: Set of custom attributes associated with a cross
          items:
            $ref: '#/components/schemas/CrossNewRequest_crossAttributes'
        crossName:
          type: string
          description: the human readable name for a cross
          example: my_Crosses_2018_01
        crossType:
          type: string
          description: the type of cross
          example: BIPARENTAL
          enum:
          - BIPARENTAL
          - SELF
          - OPEN_POLLINATED
          - BULK
          - BULK_SELFED
          - BULK_OPEN_POLLINATED
          - DOUBLE_HAPLOID
        crossingProjectDbId:
          type: string
          description: the unique identifier for a crossing project
          example: 696d7c92
        crossingProjectName:
          type: string
          description: the human readable name for a crossing project
          example: my_Crosses_2018
        externalReferences:
          $ref: '#/components/schemas/ExternalReferences'
        parent1:
          $ref: '#/components/schemas/CrossParent'
        parent2:
          $ref: '#/components/schemas/CrossParent'
        pollinationTimeStamp:
          type: string
          description: the timestamp when the pollination took place
          format: date-time
    CrossParent:
      type: object
      properties:
        germplasmDbId:
          type: string
          description: the unique identifier for a germplasm
          example: d34b10c3
        germplasmName:
          type: string
          description: the human readable name for a germplasm
          example: TME_419
        observationUnitDbId:
          type: string
          description: the unique identifier for an observation unit
          example: 2e1926a7
        observationUnitName:
          type: string
          description: the human readable name for an observation unit
          example: my_Plot_9001
        parentType:
          type: string
          description: The type of parent ex. 'MALE', 'FEMALE', 'SELF', 'POPULATION', etc.
          example: MALE
          enum:
          - MALE
          - FEMALE
          - SELF
          - POPULATION
    CrossingProject:
      allOf:
      - $ref: '#/components/schemas/CrossingProjectNewRequest'
      - type: object
        properties:
          crossingProjectDbId:
            type: string
            description: the unique identifier for a crossing project
            example: ce0e1c29
    CrossingProjectNewRequest:
      type: object
      properties:
        additionalInfo:
          type: object
          additionalProperties:
            type: string
          description: Additional arbitrary info
        commonCropName:
          type: string
          description: the common name of a crop (for multi-crop systems)
          example: Cassava
        crossingProjectDescription:
          type: string
          description: the description for a crossing project
          example: Crosses between germplasm X and germplasm Y in male nursery study X_2018 and female nursery study Y_2018
        crossingProjectName:
          type: string
          description: the human readable name for a crossing project
          example: Crosses_2018
        externalReferences:
          $ref: '#/components/schemas/ExternalReferences'
        programDbId:
          type: string
          description: the unique identifier for a program
          example: a088176c
        programName:
          type: string
          description: the human readable name for a program
          example: IITA Cassava
    ExternalReferences:
      title: ExternalReferences
      type: array
      description: An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.
      example:
      - referenceID: doi:10.155454/12341234
        referenceSource: DOI
      - referenceID: http://purl.obolibrary.org/obo/ro.owl
        referenceSource: OBO Library
      - referenceID: 75a50e76
        referenceSource: Remote Data Collection Upload Tool
      items:
        $ref: '#/components/schemas/ExternalReferences_inner'
    Germplasm:
      allOf:
      - $ref: '#/components/schemas/GermplasmNewRequest'
      - required:
        - germplasmDbId
        type: object
        properties:
          germplasmDbId:
            type: string
            description: |-
              The ID which uniquely identifies a germplasm within the given database server

              MIAPPE V1.1 (DM-41) Biological material ID - Code used to identify the biological material in the data file. Should be unique within the Investigation. Can correspond to experimental plant ID, seed lot ID, etc. This material identification is different from a BiosampleID which corresponds to Observation Unit or Samples sections below.
            example: d4076594
    GermplasmAttribute:
      allOf:
      - $ref: '#/components/schemas/GermplasmAttributeNewRequest'
      - required:
        - attributeDbId
        type: object
        properties:
          attributeDbId:
            type: string
            description: The ID which uniquely identifies this attribute within the given database server
            example: 2f08b902
    GermplasmAttributeNewRequest:
      allOf:
      - $ref: '#/components/schemas/VariableBaseClass'
      - required:
        - attributeName
        type: object
        properties:
          attributeCategory:
            type: string
            description: General category for the attribute. very similar to Trait class.
            example: Morphological
          attributeDescription:
            type: string
            description: A human readable description of this attribute
            example: Height of the plant measured in meters by a tape
          attributeName:
            type: string
            description: A human readable name for this attribute
            example: Plant Height 1
    GermplasmAttributeSearchRequest:
      allOf:
      - $ref: '#/components/schemas/SearchRequestParametersPaging'
      - $ref: '#/components/schemas/SearchRequestParametersExternalReferences'
      - type: object
        properties:
          attributeDbIds:
            type: array
            description: List of Germplasm Attribute IDs to search for
            example:
            - 2ef15c9f
            - 318e7f7d
            items:
              type: string
          attributeNames:
            type: array
            description: List of human readable Germplasm Attribute names to search for
            example:
            - Plant Height 1
            - Root Color
            items:
              type: string
          dataTypes:
            type: array
            description: List of scale data types to filter search results
            example:
            - Numerical
            - Ordinal
            - Text
            items:
              $ref: '#/components/schemas/TraitDataType'
          methodDbIds:
            type: array
            description: List of methods to filter search results
            example:
            - 07e34f83
            - d3d5517a
            items:
              type: string
          ontologyDbIds:
            type: array
            description: List of ontology IDs to search for
            example:
            - f44f7b23
            - a26b576e
            items:
              type: string
          scaleDbIds:
            type: array
            description: List of scales to filter search results
            example:
            - a13ecffa
            - 7e1afe4f
            items:
              type: string
          studyDbId:
            type: array
            description: The unique ID of a studies to filter on
            example:
            - 5bcac0ae
            - 7f48e22d
            items:
              type: string
          traitClasses:
            type: array
            description: List of trait classes to filter search results
            example:
            - morphological
            - phenological
            - agronomical
            items:
              type: string
          traitDbIds:
            type: array
            description: List of trait unique ID to filter search results
            example:
            - ef81147b
            - 78d82fad
            items:
              type: string
    GermplasmAttributeValue:
      allOf:
      - $ref: '#/components/schemas/GermplasmAttributeValueNewRequest'
      - required:
        - attributeValueDbId
        type: object
        properties:
          attributeValueDbId:
            type: string
            description: The ID which uniquely identifies this attribute value within the given database server
            example: 33edbab7
    GermplasmAttributeValueNewRequest:
      required:
      - attributeName
      type: object
      properties:
        additionalInfo:
          type: object
          additionalProperties:
            type: string
          description: Additional arbitrary info
        attributeDbId:
          type: string
          description: The ID which uniquely identifies this attribute within the given database server
          example: e529dd5a
        attributeName:
          type: string
          description: A human readable name for this attribute
          example: Weevil Resistance
        determinedDate:
          type: string
          description: The date the value of this attribute was determined for a given germplasm
          format: date-time
        externalReferences:
          $ref: '#/components/schemas/ExternalReferences'
        germplasmDbId:
          type: string
          description: The ID which uniquely identifies a germplasm within the given database server
          example: d4076594
        germplasmName:
          type: string
          description: Name of the germplasm. It can be the preferred name and does not have to be unique.
          example: A0000003
        value:
          type: string
          description: The value of this attribute for a given germplasm
          example: Present
    GermplasmAttributeValueSearchRequest:
      allOf:
      - $ref: '#/components/schemas/SearchRequestParametersPaging'
      - $ref: '#/components/schemas/SearchRequestParametersGermplasm'
      - $ref: '#/components/schemas/SearchRequestParametersExternalReferences'
      - type: object
        properties:
          attributeDbIds:
            type: array
            description: List of Germplasm Attribute IDs to search for
            example:
            - 2ef15c9f
            - 318e7f7d
            items:
              type: string
          attributeNames:
            type: array
            description: List of human readable Germplasm Attribute names to search for
            example:
            - Plant Height 1
            - Root Color
            items:
              type: string
          attributeValueDbIds:
            type: array
            description: List of Germplasm Attribute Value IDs to search for
            example:
            - ca4636d0
            - c8a92409
            items:
              type: string
          dataTypes:
            type: array
            description: List of scale data types to filter search results
            example:
            - Numerical
            - Ordinal
            - Text
            items:
              $ref: '#/components/schemas/TraitDataType'
          methodDbIds:
            type: array
            description: List of methods to filter search results
            example:
            - 07e34f83
            - d3d5517a
            items:
              type: string
          ontologyDbIds:
            type: array
            description: List of ontology IDs to search for
            example:
            - f44f7b23
            - a26b576e
            items:
              type: string
          scaleDbIds:
            type: array
            description: List of scales to filter search results
            example:
            - a13ecffa
            - 7e1afe4f
            items:
              type: string
          traitClasses:
            type: array
            description: List of trait classes to filter search results
            example:
            - morphological
            - phenological
            - agronomical
            items:
              type: string
          traitDbIds:
            type: array
            description: List of trait unique ID to filter search results
            example:
            - ef81147b
            - 78d82fad
            items:
              type: string
    GermplasmMCPD:
      type: object
      properties:
        accessionNames:
          type: array
          description: MCPD (v2.1) (ACCENAME) 11. Either a registered or other designation given to the material received, other than the donors accession number (23) or collecting number (3). First letter uppercase. Multiple names are separated by a semicolon without space.
          example:
          - Symphony
          - Emma
          items:
            type: string
        accessionNumber:
          type: string
          description: MCPD (v2.1) (ACCENUMB) 2. This is the unique identifier for accessions within a genebank, and is assigned when a sample is entered into the genebank collection (e.g. "PI 113869").
          example: A0000003
        acquisitionDate:
          type: string
          description: MCPD (v2.1) (ACQDATE) 12. Date on which the accession entered the collection [YYYYMMDD] where YYYY is the year, MM is the month and DD is the day. Missing data (MM or DD) should be indicated with hyphens or "00" [double zero].
          format: date
        acquisitionSourceCode:
          type: string
          description: "MCPD (v2.1) (COLLSRC) 21. The coding scheme proposed can be used at 2 different levels of detail: either by using the general codes (in bold-face) such as 10, 20, 30, 40, etc., or by using the more specific codes, such as 11, 12, etc. \n\n10) Wild habitat \n11) Forest or woodland \n12) Shrubland \n13) Grassland \n14) Desert or tundra \n15) Aquatic habitat \n20) Farm or cultivated habitat \n21) Field \n22) Orchard \n23) Backyard, kitchen or home garden (urban, peri-urban or rural) \n24) Fallow land \n25) Pasture \n26) Farm store \n27) Threshing floor \n28) Park \n30) Market or shop \n40) Institute, Experimental station, Research organization, Genebank \n50) Seed company \n60) Weedy, disturbed or ruderal habitat \n61) Roadside \n62) Field margin \n99) Other (Elaborate in REMARKS field)"
          example: "26"
          enum:
          - "10"
          - "11"
          - "12"
          - "13"
          - "14"
          - "15"
          - "20"
          - "21"
          - "22"
          - "23"
          - "24"
          - "25"
          - "26"
          - "27"
          - "28"
          - "30"
          - "40"
          - "50"
          - "60"
          - "61"
          - "62"
          - "99"
        alternateIDs:
          type: array
          description: 'MCPD (v2.1) (OTHERNUMB) 24. Any other identifiers known to exist in other collections for this accession. Use the following format: INSTCODE:ACCENUMB;INSTCODE:identifier;INSTCODE and identifier are separated by a colon without space. Pairs of INSTCODE and identifier are separated by a semicolon without space. When the institute is not known, the identifier should be preceded by a colon. '
          example:
          - "3"
          - http://pui.per/accession/A0000003
          - A0000003
          items:
            type: string
        ancestralData:
          type: string
          description: MCPD (v2.1) (ANCEST) 20. Information about either pedigree or other description of ancestral information (e.g. parent variety in case of mutant or selection). For example a pedigree 'Hanna/7*Atlas//Turk/8*Atlas' or a description 'mutation found in Hanna', 'selection from Irene' or 'cross involving amongst others Hanna and Irene'.
          example: A0000001/A0000002
        biologicalStatusOfAccessionCode:
          type: string
          description: "MCPD (v2.1) (SAMPSTAT) 19. The coding scheme proposed can be used at 3 different levels of detail: either by using the general codes such as 100, 200, 300, 400, or by using the more specific codes such as 110, 120, etc. \n\n100) Wild \n110) Natural \n120) Semi-natural/wild \n130) Semi-natural/sown \n200) Weedy \n300) Traditional cultivar/landrace \n400) Breeding/research material \n410) Breeders line \n411) Synthetic population \n412) Hybrid \n413) Founder stock/base population \n414) Inbred line (parent of hybrid cultivar) \n415) Segregating population \n416) Clonal selection \n420) Genetic stock \n421) Mutant (e.g. induced/insertion mutants, tilling populations) \n422) Cytogenetic stocks (e.g. chromosome addition/substitution, aneuploids,  amphiploids) \n423) Other genetic stocks (e.g. mapping populations) \n500) Advanced or improved cultivar (conventional breeding methods) \n600) GMO (by genetic engineering) \n999) Other (Elaborate in REMARKS field)"
          example: "421"
          enum:
          - "100"
          - "110"
          - "120"
          - "130"
          - "200"
          - "300"
          - "400"
          - "410"
          - "411"
          - "412"
          - "413"
          - "414"
          - "415"
          - "416"
          - "420"
          - "421"
          - "422"
          - "423"
          - "500"
          - "600"
          - "999"
        breedingInstitutes:
          type: array
          items:
            $ref: '#/components/schemas/GermplasmMCPD_breedingInstitutes'
        collectingInfo:
          $ref: '#/components/schemas/GermplasmMCPD_collectingInfo'
        commonCropName:
          type: string
          description: 'MCPD (v2.1) (CROPNAME) 10. Common name of the crop. Example: "malting barley", "mas". '
          example: malting barley
        countryOfOrigin:
          type: string
          description: 'MCPD (v2.1) (ORIGCTY) 13. 3-letter ISO 3166-1 code of the country in which the sample was originally collected (e.g. landrace, crop wild relative, farmers" variety), bred or selected (breeding lines, GMOs, segregating populations, hybrids, modern cultivars, etc.). Note: Descriptors 14 to 16 below should be completed accordingly only if it was "collected".'
          example: Peru
        donorInfo:
          $ref: '#/components/schemas/GermplasmMCPD_donorInfo'
        genus:
          type: string
          description: MCPD (v2.1) (GENUS) 5. Genus name for taxon. Initial uppercase letter required.
          example: Aspergillus
        germplasmDbId:
          type: string
          description: A unique identifier which identifies a germplasm in this database
          example: 31c4efbc
        germplasmPUI:
          type: string
          description: MCPD (v2.1) (PUID) 0. Any persistent, unique identifier assigned to the accession so it can be unambiguously referenced at the global level and the information associated with it harvested through automated means. Report one PUID for each accession. The Secretariat of the International Treaty on Plant Genetic Resources for Food and Agriculture (PGRFA) is facilitating the assignment of a persistent unique identifier (PUID), in the form of a DOI, to PGRFA at the accession level. Genebanks not applying a true PUID to their accessions should use, and request recipients to use, the concatenation of INSTCODE, ACCENUMB, and GENUS as a globally unique identifier similar in most respects to the PUID whenever they exchange information on accessions with third parties.
          example: http://pui.per/accession/A0403652
        instituteCode:
          type: string
          description: MCPD (v2.1) (INSTCODE) 1. FAO WIEWS code of the institute where the accession is maintained. The codes consist of the 3-letter ISO 3166 country code of the country where the institute is located plus a number (e.g. PER001). The current set of institute codes is available from http://www.fao.org/wiews. For those institutes not yet having an FAO Code, or for those with "obsolete" codes, see "Common formatting rules (v)".
          example: PER001
        mlsStatus:
          type: string
          description: MCPD (v2.1) (MLSSTAT) 27. The status of an accession with regards to the Multilateral System (MLS) of the International Treaty on Plant Genetic Resources for Food and Agriculture. Leave the value empty if the status is not known 0 No (not included) 1 Yes (included) 99 Other (elaborate in REMARKS field, e.g. "under development")
          example: "0"
          enum:
          - ""
          - "0"
          - "1"
          - "99"
        remarks:
          type: string
          description: MCPD (v2.1) (REMARKS) 28. The remarks field is used to add notes or to elaborate on descriptors with value 99 or 999 (= Other). Prefix remarks with the field name they refer to and a colon (:) without space (e.g. COLLSRC:riverside). Distinct remarks referring to different fields are separated by semi-colons without space.
          example: This is an example remark to demonstrate that any notable information can be put here
        safetyDuplicateInstitutes:
          type: array
          items:
            $ref: '#/components/schemas/GermplasmMCPD_safetyDuplicateInstitutes'
        species:
          type: string
          description: 'MCPD (v2.1) (SPECIES) 6. Specific epithet portion of the scientific name in lowercase letters. Only the following abbreviation is allowed: "sp." '
          example: fructus
        speciesAuthority:
          type: string
          description: MCPD (v2.1) (SPAUTHOR) 7. Provide the authority for the species name.
          example: Smith, 1822
        storageTypeCodes:
          type: array
          description: MCPD (v2.1) (STORAGE) 26. If germplasm is maintained under different types of storage, multiple choices are allowed, separated by a semicolon (e.g. 20;30). (Refer to FAO/IPGRI Genebank Standards 1994 for details on storage type.) 10) Seed collection 11) Short term 12) Medium term 13) Long term 20) Field collection 30) In vitro collection 40) Cryo-preserved collection 50) DNA collection 99) Other (elaborate in REMARKS field)
          example:
          - "11"
          - "13"
          items:
            type: string
            enum:
            - "10"
            - "11"
            - "12"
            - "13"
            - "20"
            - "30"
            - "40"
            - "50"
            - "99"
        subtaxon:
          type: string
          description: 'MCPD (v2.1) (SUBTAXA) 8. Subtaxon can be used to store any additional taxonomic identifier. The following abbreviations are allowed: "subsp." (for subspecies); "convar." (for convariety); "var." (for variety); "f." (for form); "Group" (for "cultivar group").'
          example: Aspergillus fructus A
        subtaxonAuthority:
          type: string
          description: MCPD (v2.1) (SUBTAUTHOR) 9. Provide the subtaxon authority at the most detailed taxonomic level.
          example: Smith, 1822
    GermplasmNewRequest:
      required:
      - commonCropName
      - germplasmName
      - germplasmPUI
      type: object
      properties:
        accessionNumber:
          type: string
          description: |-
            This is the unique identifier for accessions within a genebank, and is assigned when a sample is entered into the genebank collection

            MCPD (v2.1) (ACCENUMB) 2. This is the unique identifier for accessions within a genebank, and is assigned when a sample is entered into the genebank collection (e.g. "PI 113869").
          example: A0000003
        acquisitionDate:
          type: string
          description: "The date this germplasm was acquired by the genebank \n\nMCPD (v2.1) (ACQDATE) 12. Date on which the accession entered the collection [YYYYMMDD] where YYYY is the year, MM is the month and DD is the day. Missing data (MM or DD) should be indicated with hyphens or \"00\" [double zero]."
          format: date
        additionalInfo:
          type: object
          additionalProperties:
            type: string
          description: Additional arbitrary info
        biologicalStatusOfAccessionCode:
          type: string
          description: "MCPD (v2.1) (SAMPSTAT) 19. The coding scheme proposed can be used at 3 different levels of detail: either by using the general codes such as 100, 200, 300, 400, or by using the more specific codes such as 110, 120, etc. \n\n100) Wild \n110) Natural \n120) Semi-natural/wild \n130) Semi-natural/sown \n200) Weedy \n300) Traditional cultivar/landrace \n400) Breeding/research material \n410) Breeders line \n411) Synthetic population \n412) Hybrid \n413) Founder stock/base population \n414) Inbred line (parent of hybrid cultivar) \n415) Segregating population \n416) Clonal selection \n420) Genetic stock \n421) Mutant (e.g. induced/insertion mutants, tilling populations) \n422) Cytogenetic stocks (e.g. chromosome addition/substitution, aneuploids,  amphiploids) \n423) Other genetic stocks (e.g. mapping populations) \n500) Advanced or improved cultivar (conventional breeding methods) \n600) GMO (by genetic engineering) \n999) Other (Elaborate in REMARKS field)"
          example: "420"
          enum:
          - "100"
          - "110"
          - "120"
          - "130"
          - "200"
          - "300"
          - "400"
          - "410"
          - "411"
          - "412"
          - "413"
          - "414"
          - "415"
          - "416"
          - "420"
          - "421"
          - "422"
          - "423"
          - "500"
          - "600"
          - "999"
        biologicalStatusOfAccessionDescription:
          type: string
          description: Supplemental text description for 'biologicalStatusOfAccessionCode'
          example: Genetic stock
        breedingMethodDbId:
          type: string
          description: The unique identifier for the breeding method used to create this germplasm
          example: ffcce7ef
        collection:
          type: string
          description: A specific panel/collection/population name this germplasm belongs to.
          example: Rice Diversity Panel 1 (RDP1)
        commonCropName:
          type: string
          description: "Common name for the crop \n\nMCPD (v2.1) (CROPNAME) 10. Common name of the crop. Example: \"malting barley\", \"mas\"."
          example: Maize
        countryOfOriginCode:
          type: string
          description: "3-letter ISO 3166-1 code of the country in which the sample was originally collected \n\nMCPD (v2.1) (ORIGCTY) 13. 3-letter ISO 3166-1 code of the country in which the sample was originally collected (e.g. landrace, crop wild relative, farmers variety), bred or selected (breeding lines, GMOs, segregating populations, hybrids, modern cultivars, etc.). Note- Descriptors 14 to 16 below should be completed accordingly only if it was \"collected\"."
          example: BES
        defaultDisplayName:
          type: string
          description: Human readable name used for display purposes
          example: A0000003
        documentationURL:
          type: string
          description: A URL to the human readable documentation of this object
          format: uri
          example: https://wiki.brapi.org
        donors:
          type: array
          description: List of donor institutes
          items:
            $ref: '#/components/schemas/GermplasmNewRequest_donors'
        externalReferences:
          $ref: '#/components/schemas/ExternalReferences'
        genus:
          type: string
          description: |-
            Genus name for taxon. Initial uppercase letter required.

            MCPD (v2.1) (GENUS) 5. Genus name for taxon. Initial uppercase letter required.

            MIAPPE V1.1 (DM-43) Genus - Genus name for the organism under study, according to standard scientific nomenclature.
          example: Aspergillus
        germplasmName:
          type: string
          description: |-
            Name of the germplasm. It can be the preferred name and does not have to be unique.

            MCPD (v2.1) (ACCENAME) 11. Either a registered or other designation given to the material received, other than the donors accession number (23) or collecting number (3). First letter uppercase. Multiple names are separated by a semicolon without space.
          example: A0000003
        germplasmOrigin:
          type: array
          description: Information for material (orchard, natural sites, ...). Geographic identification of the plants from which seeds or cutting have been taken to produce that germplasm.
          items:
            $ref: '#/components/schemas/GermplasmOrigin'
        germplasmPUI:
          type: string
          description: |-
            The Permanent Unique Identifier which represents a germplasm

            MIAPPE V1.1 (DM-41) Biological material ID - Code used to identify the biological material in the data file. Should be unique within the Investigation. Can correspond to experimental plant ID, seed lot ID, etc This material identification is different from a BiosampleID which corresponds to Observation Unit or Samples sections below.

            MCPD (v2.1) (PUID) 0. Any persistent, unique identifier assigned to the accession so it can be unambiguously referenced at the global level and the information associated with it harvested through automated means. Report one PUID for each accession. The Secretariat of the International Treaty on Plant Genetic Resources for Food and Agriculture (PGRFA) is facilitating the assignment of a persistent unique identifier (PUID), in the form of a DOI, to PGRFA at the accession level. Genebanks not applying a true PUID to their accessions should use, and request recipients to use, the concatenation of INSTCODE, ACCENUMB, and GENUS as a globally unique identifier similar in most respects to the PUID whenever they exchange information on accessions with third parties.
          example: http://pui.per/accession/A0000003
        germplasmPreprocessing:
          type: string
          description: Description of any process or treatment applied uniformly to the germplasm, prior to the study itself. Can be provided as free text or as an accession number from a suitable controlled vocabulary.
          example: 'EO:0007210; transplanted from study 2351 observation unit ID: pot:894'
        instituteCode:
          type: string
          description: "The code for the institute that maintains the material. \n\nMCPD (v2.1) (INSTCODE) 1. FAO WIEWS code of the institute where the accession is maintained. The codes consist of the 3-letter ISO 3166 country code of the country where the institute is located plus a number (e.g. PER001). The current set of institute codes is available from http://www.fao.org/wiews. For those institutes not yet having an FAO Code, or for those with \"obsolete\" codes, see \"Common formatting rules (v)\"."
          example: PER001
        instituteName:
          type: string
          description: The name of the institute that maintains the material
          example: The BrAPI Institute
        pedigree:
          type: string
          description: |-
            The cross name and optional selection history.

            MCPD (v2.1) (ANCEST) 20. Information about either pedigree or other description of ancestral information (e.g. parent variety in case of mutant or selection). For example a pedigree 'Hanna/7*Atlas//Turk/8*Atlas' or a description 'mutation found in Hanna', 'selection from Irene' or 'cross involving amongst others Hanna and Irene'.
          example: A0000001/A0000002
        seedSource:
          type: string
          description: 'The source of the seed '
          example: A0000001/A0000002
        seedSourceDescription:
          type: string
          description: |-
            Description of the material source

            MIAPPE V1.1 (DM-56) Material source description - Description of the material source
          example: Branches were collected from a 10-year-old tree growing in a progeny trial established in a loamy brown earth soil.
        species:
          type: string
          description: "Specific epithet portion of the scientific name in lowercase letters.\n\nMCPD (v2.1) (SPECIES) 6. Specific epithet portion of the scientific name in lowercase letters. Only the following abbreviation is allowed: \"sp.\" \n\nMIAPPE V1.1 (DM-44) Species - Species name (formally: specific epithet) for the organism under study, according to standard scientific nomenclature."
          example: fructus
        speciesAuthority:
          type: string
          description: "The authority organization responsible for tracking and maintaining the species name \n\nMCPD (v2.1) (SPAUTHOR) 7. Provide the authority for the species name."
          example: Smith, 1822
        storageTypes:
          type: array
          description: The type of storage this germplasm is kept in at a genebank.
          example:
          - code: "20"
            description: Field collection
          - code: "11"
            description: Short term
          items:
            $ref: '#/components/schemas/GermplasmNewRequest_storageTypes'
        subtaxa:
          type: string
          description: |-
            Subtaxon can be used to store any additional taxonomic identifier.

            MCPD (v2.1) (SUBTAXA) 8. Subtaxon can be used to store any additional taxonomic identifier. The following abbreviations are allowed: "subsp." (for subspecies); "convar." (for convariety); "var." (for variety); "f." (for form); "Group" (for "cultivar group").

            MIAPPE V1.1 (DM-44) Infraspecific name - Name of any subtaxa level, including variety, crossing name, etc. It can be used to store any additional taxonomic identifier. Either free text description or key-value pair list format (the key is the name of the rank and the value is the value of  the rank). Ranks can be among the following terms: subspecies, cultivar, variety, subvariety, convariety, group, subgroup, hybrid, line, form, subform. For MCPD compliance, the following abbreviations are allowed: subsp. (subspecies); convar. (convariety); var. (variety); f. (form); Group (cultivar group).
          example: Aspergillus fructus A
        subtaxaAuthority:
          type: string
          description: |-
            The authority organization responsible for tracking and maintaining the subtaxon information

            MCPD (v2.1) (SUBTAUTHOR) 9. Provide the subtaxon authority at the most detailed taxonomic level.
          example: Smith, 1822
        synonyms:
          type: array
          description: |-
            List of alternative names or IDs used to reference this germplasm

            MCPD (v2.1) (OTHERNUMB) 24. Any other identifiers known to exist in other collections for this accession. Use the following format: INSTCODE:ACCENUMB;INSTCODE:identifier;INSTCODE and identifier are separated by a colon without space. Pairs of INSTCODE and identifier are separated by a semicolon without space. When the institute is not known, the identifier should be preceded by a colon.
          items:
            $ref: '#/components/schemas/GermplasmNewRequest_synonyms'
        taxonIds:
          type: array
          description: |-
            The list of IDs for this SPECIES from different sources. If present, NCBI Taxon should be always listed as "ncbiTaxon" preferably with a purl. The rank of this ID should be species.

            MIAPPE V1.1 (DM-42) Organism - An identifier for the organism at the species level. Use of the NCBI taxon ID is recommended.
          items:
            $ref: '#/components/schemas/TaxonID'
    GermplasmOrigin:
      type: object
      properties:
        coordinateUncertainty:
          type: string
          description: Uncertainty associated with the coordinates in meters. Leave the value empty if the uncertainty is unknown.
          example: "20"
        coordinates:
          $ref: '#/components/schemas/geoJSON'
      description: "MIAPPE V1.1 (DM-52) \n\nMIAPPE V1.1 (DM-53) \n\nMIAPPE V1.1 (DM-54) \n\nMIAPPE V1.1 (DM-55)\n\nMCPD (v2.1) (COORDUNCERT) 15.5 \n\nMCPD (v2.1) (ELEVATION) 16. \n\nMCPD (v2.1) (GEOREFMETH) 15.7 \n\nMCPD (v2.1) (DECLATITUDE) 15.1 \n\nMCPD (v2.1) (DECLONGITUDE) 15.3 "
    GermplasmSearchRequest:
      allOf:
      - $ref: '#/components/schemas/SearchRequestParametersPaging'
      - $ref: '#/components/schemas/SearchRequestParametersCommonCropNames'
      - $ref: '#/components/schemas/SearchRequestParametersGermplasm'
      - $ref: '#/components/schemas/SearchRequestParametersStudies'
      - $ref: '#/components/schemas/SearchRequestParametersExternalReferences'
      - type: object
        properties:
          accessionNumbers:
            type: array
            description: List unique identifiers for accessions within a genebank
            example:
            - A0000003
            - A0000477
            items:
              type: string
          collections:
            type: array
            description: A specific panel/collection/population name this germplasm belongs to.
            example:
            - RDP1
            - MDP1
            items:
              type: string
          genus:
            type: array
            description: List of Genus names to identify germplasm
            example:
            - Aspergillus
            - Zea
            items:
              type: string
          germplasmPUIs:
            type: array
            description: List of Permanent Unique Identifiers to identify germplasm
            example:
            - http://pui.per/accession/A0000003
            - http://pui.per/accession/A0000477
            items:
              type: string
          parentDbIds:
            type: array
            description: Search for Germplasm with these parents
            example:
            - 72c1001f
            - 7346c553
            items:
              type: string
          progenyDbIds:
            type: array
            description: Search for Germplasm with these children
            example:
            - 16e16a7e
            - ce06cf9e
            items:
              type: string
          species:
            type: array
            description: List of Species names to identify germplasm
            example:
            - fructus
            - mays
            items:
              type: string
          synonyms:
            type: array
            description: List of alternative names or IDs used to reference this germplasm
            example:
            - variety_1
            - 2c38f9b6
            items:
              type: string
    Method:
      allOf:
      - $ref: '#/components/schemas/MethodBaseClass'
      - type: object
        properties:
          methodDbId:
            type: string
            description: Method unique identifier
            example: 0adb2764
    MethodBaseClass:
      type: object
      properties:
        additionalInfo:
          type: object
          additionalProperties:
            type: string
          description: Additional arbitrary info
        bibliographicalReference:
          type: string
          description: |-
            Bibliographical reference describing the method.

            MIAPPE V1.1 (DM-91) Reference associated to the method - URI/DOI of reference describing the method.
          example: Smith, 1893, Really Cool Paper, Popular Journal
        description:
          type: string
          description: |-
            Method description

            MIAPPE V1.1 (DM-90) Method description - Textual description of the method, which may extend a method defined in an external reference with specific parameters, e.g. growth stage, inoculation precise organ (leaf number)
          example: A measuring tape was used
        externalReferences:
          $ref: '#/components/schemas/ExternalReferences'
        formula:
          type: string
          description: For computational methods i.e., when the method consists in assessing the trait by computing measurements, write the generic formula used for the calculation
          example: a^2 + b^2 = c^2
        methodClass:
          type: string
          description: 'Method class (examples: "Measurement", "Counting", "Estimation", "Computation", etc.)'
          example: Measurement
        methodName:
          type: string
          description: |-
            Human readable name for the method

            MIAPPE V1.1 (DM-88) Method  Name of the method of observation
          example: Measuring Tape
        ontologyReference:
          $ref: '#/components/schemas/OntologyReference'
    ObservationUnitHierarchyLevel:
      title: ObservationUnitHierarchyLevel
      type: object
      properties:
        levelName:
          type: string
          description: A name for this level
          example: plot
          enum:
          - study
          - field
          - entry
          - rep
          - block
          - sub-block
          - plot
          - sub-plot
          - plant
          - pot
          - sample
        levelOrder:
          type: integer
          description: '`levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`''s lower numbers are at the top of the hierarchy (ie field -> 1) and higher numbers are at the bottom of the hierarchy (ie plant -> 9).'
          example: 2
      description: 'Observation levels indicate the granularity level at which the measurements are taken. `levelName` defines the level, `levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`s lower numbers are at the top of the hierarchy (ie field > 0) and higher numbers are at the bottom of the hierarchy (ie plant > 6). '
    OntologyReference:
      required:
      - ontologyDbId
      - ontologyName
      type: object
      properties:
        documentationLinks:
          type: array
          description: links to various ontology documentation
          items:
            $ref: '#/components/schemas/OntologyReference_documentationLinks'
        ontologyDbId:
          type: string
          description: Ontology database unique identifier
          example: 6b071868
        ontologyName:
          type: string
          description: Ontology name
          example: The Crop Ontology
        version:
          type: string
          description: Ontology version (no specific format)
          example: 7.2.3
      description: |-
        MIAPPE V1.1

        (DM-85) Variable accession number - Accession number of the variable in the Crop Ontology

        (DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).

        (DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).

        (DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology).
    PedigreeNode:
      required:
      - germplasmDbId
      type: object
      properties:
        crossingProjectDbId:
          type: string
          description: The crossing project used to generate this germplasm
          example: 625e745a
        crossingYear:
          type: integer
          description: The year the parents were originally crossed
          example: 2005
        familyCode:
          type: string
          description: The code representing the family
          example: F0000203
        germplasmDbId:
          type: string
          description: The ID which uniquely identifies a germplasm
          example: 1098ebaf
        germplasmName:
          type: string
          description: A human readable name for a germplasm
          example: A0021004
        parents:
          type: array
          description: List of parent nodes in the pedigree tree.
          example:
          - germplasmDbId: b66958de
            germplasmName: A0000592
            parentType: MALE
          - germplasmDbId: a55847ed
            germplasmName: A0000592
            parentType: FEMALE
          items:
            $ref: '#/components/schemas/PedigreeNode_parents'
        pedigree:
          type: string
          description: The string representation of the pedigree.
          example: A0000001/A0000002
        siblings:
          type: array
          description: List of sibling germplasm
          example:
          - germplasmDbId: 334f53a3
            germplasmName: A0021005
          - germplasmDbId: 7bbbda8c
            germplasmName: A0021006
          - germplasmDbId: ab1d9b26
            germplasmName: A0021007
          items:
            $ref: '#/components/schemas/PedigreeNode_siblings'
    PlannedCross:
      allOf:
      - $ref: '#/components/schemas/PlannedCrossNewRequest'
      - type: object
        properties:
          plannedCrossDbId:
            type: string
            description: the unique identifier for a cross
            example: c8905568
    PlannedCrossNewRequest:
      type: object
      properties:
        additionalInfo:
          type: object
          additionalProperties:
            type: string
          description: Additional arbitrary info
        crossType:
          type: string
          description: the type of cross
          example: BIPARENTAL
          enum:
          - BIPARENTAL
          - SELF
          - OPEN_POLLINATED
          - BULK
          - BULK_SELFED
          - BULK_OPEN_POLLINATED
          - DOUBLE_HAPLOID
        crossingProjectDbId:
          type: string
          description: the unique identifier for a crossing project
          example: 696d7c92
        crossingProjectName:
          type: string
          description: the human readable name for a crossing project
          example: my_Crosses_2018
        externalReferences:
          $ref: '#/components/schemas/ExternalReferences'
        parent1:
          $ref: '#/components/schemas/CrossParent'
        parent2:
          $ref: '#/components/schemas/CrossParent'
        plannedCrossName:
          type: string
          description: the human readable name for a cross
          example: my_Crosses_2018_01
    ProgenyNode:
      required:
      - germplasmDbId
      - progeny
      type: object
      properties:
        germplasmDbId:
          type: string
          description: The ID which uniquely identifies a germplasm
          example: 01b974dc
        germplasmName:
          type: string
          description: A human readable name for a germplasm
          example: A0021004
        progeny:
          type: array
          description: List of germplasm entities which are direct children of this germplasm
          example:
          - germplasmDbId: e8d5dad7
            germplasmName: A0021011
            parentType: FEMALE
          - germplasmDbId: ac07fbd8
            germplasmName: A0021012
            parentType: FEMALE
          - germplasmDbId: 07f45f67
            germplasmName: A0021013
            parentType: FEMALE
          items:
            $ref: '#/components/schemas/ProgenyNode_progeny'
    Scale:
      allOf:
      - $ref: '#/components/schemas/ScaleBaseClass'
      - required:
        - scaleDbId
        type: object
        properties:
          scaleDbId:
            type: string
            description: Unique identifier of the scale. If left blank, the upload system will automatically generate a scale ID.
            example: af730171
        description: Scale metadata
    ScaleBaseClass:
      required:
      - scaleName
      type: object
      properties:
        additionalInfo:
          type: object
          additionalProperties:
            type: string
          description: Additional arbitrary info
        dataType:
          $ref: '#/components/schemas/TraitDataType'
        decimalPlaces:
          type: integer
          description: For numerical, number of decimal places to be reported
          example: 2
        externalReferences:
          $ref: '#/components/schemas/ExternalReferences'
        ontologyReference:
          $ref: '#/components/schemas/OntologyReference'
        scaleName:
          type: string
          description: |-
            Name of the scale

            MIAPPE V1.1 (DM-92) Scale Name of the scale associated with the variable
          example: Meters
        validValues:
          $ref: '#/components/schemas/ScaleBaseClass_validValues'
      description: Scale metadata
    SearchRequestParametersCommonCropNames:
      type: object
      properties:
        commonCropNames:
          type: array
          description: Common name for the crop which this program is for
          example:
          - Tomatillo
          - Paw Paw
          items:
            type: string
    SearchRequestParametersExternalReferences:
      type: object
      properties:
        externalReferenceIDs:
          type: array
          description: List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)
          example:
          - http://purl.obolibrary.org/obo/ro.owl
          - 14a19841
          items:
            type: string
        externalReferenceSources:
          type: array
          description: List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)
          example:
          - OBO Library
          - Field App Name
          items:
            type: string
    SearchRequestParametersGermplasm:
      type: object
      properties:
        germplasmDbIds:
          type: array
          description: List of IDs which uniquely identify germplasm to search for
          example:
          - e9c6edd7
          - 1b1df4a6
          items:
            type: string
        germplasmNames:
          type: array
          description: List of human readable names to identify germplasm to search for
          example:
          - A0000003
          - A0000477
          items:
            type: string
    SearchRequestParametersLocations:
      type: object
      properties:
        locationDbIds:
          type: array
          description: The location ids to search for
          example:
          - b28911cf
          - 5071d1e4
          items:
            type: string
        locationNames:
          type: array
          description: A human readable names to search for
          example:
          - Location Alpha
          - The Large Hadron Collider
          items:
            type: string
    SearchRequestParametersObservationVariables:
      type: object
      properties:
        observationVariableDbIds:
          type: array
          description: The DbIds of Variables to search for
          example:
          - a646187d
          - 6d23513b
          items:
            type: string
        observationVariableNames:
          type: array
          description: The names of Variables to search for
          example:
          - Plant Height in meters
          - Wheat rust score 1-5
          items:
            type: string
    SearchRequestParametersPaging:
      type: object
      properties:
        page:
          type: integer
          description: Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
          example: 0
        pageSize:
          type: integer
          description: The size of the pages to be returned. Default is `1000`.
          example: 1000
    SearchRequestParametersPrograms:
      type: object
      properties:
        programDbIds:
          type: array
          description: A program identifier to search for
          example:
          - 8f5de35b
          - 0e2d4a13
          items:
            type: string
        programNames:
          type: array
          description: A name of a program to search for
          example:
          - Better Breeding Program
          - Best Breeding Program
          items:
            type: string
    SearchRequestParametersStudies:
      type: object
      properties:
        studyDbIds:
          type: array
          description: List of study identifiers to search for
          example:
          - cf6c4bd4
          - 691e69d6
          items:
            type: string
        studyNames:
          type: array
          description: List of study names to filter search results
          example:
          - The First Bob Study 2017
          - Wheat Yield Trial 246
          items:
            type: string
    SearchRequestParametersTokenPaging:
      type: object
      properties:
        pageSize:
          type: integer
          description: The size of the pages to be returned. Default is `1000`.
          example: 1000
        pageToken:
          type: string
          description: "Used to request a specific page of data to be returned.\n\nTokenized pages are for large data sets which can not be efficiently broken into indexed pages. Use the nextPageToken and prevPageToken from a prior response to construct a query and move to the next or previous page respectively. "
          example: 33c27874
    SearchRequestParametersTrials:
      type: object
      properties:
        trialDbIds:
          type: array
          description: The ID which uniquely identifies a trial to search for
          example:
          - d2593dc2
          - 9431a731
          items:
            type: string
        trialNames:
          type: array
          description: The human readable name of a trial to search for
          example:
          - All Yield Trials 2016
          - Disease Resistance Study Comparison Group
          items:
            type: string
    SeedLot:
      allOf:
      - $ref: '#/components/schemas/SeedLotNewRequest'
      - required:
        - seedLotDbId
        type: object
        properties:
          seedLotDbId:
            type: string
            description: Unique DbId for the Seed Lot
            example: 261ecb09
    SeedLotNewRequest:
      type: object
      properties:
        additionalInfo:
          type: object
          additionalProperties:
            type: string
          description: Additional arbitrary info
        amount:
          type: number
          description: Current balance of seeds in this lot. Could be a count (seeds, bulbs, etc) or a weight (kg of seed).
          example: 561
        createdDate:
          type: string
          description: The time stamp for when this seed lot was created
          format: date-time
        externalReferences:
          $ref: '#/components/schemas/ExternalReferences'
        germplasmDbId:
          type: string
          description: Unique DbId of the Germplasm held in this Seed Lot
          example: 029d705d
        lastUpdated:
          type: string
          description: The timestamp for the last update to this Seed Lot (including transactions)
          format: date-time
        locationDbId:
          type: string
          description: DbId of the storage location
          example: 7989c44c
        programDbId:
          type: string
          description: Unique DbId of the breeding Program this Seed Lot belongs to
          example: e972d569
        seedLotDescription:
          type: string
          description: A general description of this Seed Lot
          example: This is a description of a seed lot
        seedLotName:
          type: string
          description: A human readable name for this Seed Lot
          example: Seed Lot Alpha
        sourceCollection:
          type: string
          description: The description of the source where this material was originally collected (wild, nursery, etc)
          example: nursery
        storageLocation:
          type: string
          description: Description the storage location
          example: The storage location is an massive, underground, bunker.
        units:
          type: string
          description: Description of the things being counted in this Seed Lot (seeds, bulbs, kg, tree, etc)
          example: seeds
    SeedLotNewTransactionRequest:
      type: object
      properties:
        additionalInfo:
          type: object
          additionalProperties:
            type: string
          description: Additional arbitrary info
        amount:
          type: number
          description: The amount of units being transfered. Could be a count (seeds, bulbs, etc) or a weight (kg of seed).
          example: 45
        externalReferences:
          $ref: '#/components/schemas/ExternalReferences'
        fromSeedLotDbId:
          type: string
          description: The identifier for the Seed Lot being transfered out of
          example: 11eef13b
        toSeedLotDbId:
          type: string
          description: The identifier for the Seed Lot being transfered into
          example: 59339b90
        transactionDescription:
          type: string
          description: A general description of this Seed Lot Transaction
          example: f9cd88d2
        transactionTimestamp:
          type: string
          description: The time stamp for when the transaction occurred
          format: date-time
        units:
          type: string
          description: Description of the things being transfered in this transaction (seeds, bulbs, kg, etc)
          example: seeds
    SeedLotTransaction:
      allOf:
      - $ref: '#/components/schemas/SeedLotNewTransactionRequest'
      - required:
        - transactionDbId
        type: object
        properties:
          transactionDbId:
            type: string
            description: Unique DbId for the Seed Lot Transaction
            example: 28e46db9
    TaxonID:
      required:
      - sourceName
      - taxonId
      type: object
      properties:
        sourceName:
          type: string
          description: The human readable name of the taxonomy provider
          example: NCBI
        taxonId:
          type: string
          description: The identifier (name, ID, URI) of a particular taxonomy within the source provider
          example: "2026747"
    Trait:
      allOf:
      - $ref: '#/components/schemas/TraitBaseClass'
      - type: object
        properties:
          traitDbId:
            type: string
            description: The ID which uniquely identifies a trait
            example: 9b2e34f5
    TraitBaseClass:
      type: object
      properties:
        additionalInfo:
          type: object
          additionalProperties:
            type: string
          description: Additional arbitrary info
        alternativeAbbreviations:
          type: array
          description: Other frequent abbreviations of the trait, if any. These abbreviations do not have to follow a convention
          example:
          - H
          - PH
          - H1
          items:
            type: string
        attribute:
          type: string
          description: A trait can be decomposed as "Trait" = "Entity" + "Attribute", the attribute is the observed feature (or characteristic) of the entity e.g., for "grain colour", attribute = "colour"
          example: height
        entity:
          type: string
          description: A trait can be decomposed as "Trait" = "Entity" + "Attribute", the entity is the part of the plant that the trait refers to e.g., for "grain colour", entity = "grain"
          example: Stalk
        externalReferences:
          $ref: '#/components/schemas/ExternalReferences'
        mainAbbreviation:
          type: string
          description: 'Main abbreviation for trait name. (examples: "Carotenoid content" => "CC")'
          example: PH
        ontologyReference:
          $ref: '#/components/schemas/OntologyReference'
        status:
          type: string
          description: 'Trait status (examples: "recommended", "obsolete", "legacy", etc.)'
          example: recommended
        synonyms:
          type: array
          description: Other trait names
          example:
          - Height
          - Plant Height
          - Stalk Height
          - Canopy Height
          items:
            type: string
        traitClass:
          type: string
          description: 'Trait class. (examples: "morphological", "phenological", "agronomical", "physiological", "abiotic stress", "biotic stress", "biochemical", "quality traits", "fertility", etc.)'
          example: phenological
        traitDescription:
          type: string
          description: The description of a trait
          example: The height of the plant
        traitName:
          type: string
          description: |-
            The human readable name of a trait

            MIAPPE V1.1 (DM-86) Trait - Name of the (plant or environmental) trait under observation
          example: Height
    TraitDataType:
      type: string
      description: |-
        <p>Class of the scale, entries can be</p>
        <p>"Code" -  This scale class is exceptionally used to express complex traits. Code is a nominal scale that combines the expressions of the different traits composing the complex trait. For example a severity trait might be expressed by a 2 digit and 2 character code. The first 2 digits are the percentage of the plant covered by a fungus and the 2 characters refer to the delay in development, e.g. "75VD" means "75 %" of the plant is infected and the plant is very delayed.</p>
        <p>"Date" - The date class is for events expressed in a time format, See ISO 8601</p>
        <p>"Duration" - The Duration class is for time elapsed between two events expressed in a time format, e.g. days, hours, months</p>
        <p>"Nominal" - Categorical scale that can take one of a limited and fixed number of categories. There is no intrinsic ordering to the categories</p>
        <p>"Numerical" - Numerical scales express the trait with real numbers. The numerical scale defines the unit e.g. centimeter, ton per hectare, branches</p>
        <p>"Ordinal" - Ordinal scales are scales composed of ordered categories</p>
        <p>"Text" - A free text is used to express the trait.</p>
      example: Numerical
      enum:
      - Code
      - Date
      - Duration
      - Nominal
      - Numerical
      - Ordinal
      - Text
    VariableBaseClass:
      required:
      - method
      - scale
      - trait
      type: object
      properties:
        additionalInfo:
          type: object
          additionalProperties:
            type: string
          description: Additional arbitrary info
        commonCropName:
          type: string
          description: 'Crop name (examples: "Maize", "Wheat")'
          example: Maize
        contextOfUse:
          type: array
          description: 'Indication of how trait is routinely used. (examples: ["Trial evaluation", "Nursery evaluation"])'
          example:
          - Trial evaluation
          - Nursery evaluation
          items:
            type: string
        defaultValue:
          type: string
          description: 'Variable default value. (examples: "red", "2.3", etc.)'
          example: "2.0"
        documentationURL:
          type: string
          description: A URL to the human readable documentation of this object
          format: uri
          example: https://wiki.brapi.org/documentation.html
        externalReferences:
          $ref: '#/components/schemas/ExternalReferences'
        growthStage:
          type: string
          description: 'Growth stage at which measurement is made (examples: "flowering")'
          example: flowering
        institution:
          type: string
          description: Name of institution submitting the variable
          example: The BrAPI Institute
        language:
          type: string
          description: 2 letter ISO 639-1 code for the language of submission of the variable.
          example: en
        method:
          allOf:
          - $ref: '#/components/schemas/MethodBaseClass'
          - type: object
            properties:
              methodDbId:
                type: string
                description: Method unique identifier
                example: 0adb2764
        ontologyReference:
          $ref: '#/components/schemas/OntologyReference'
        scale:
          allOf:
          - $ref: '#/components/schemas/ScaleBaseClass'
          - required:
            - scaleDbId
            type: object
            properties:
              scaleDbId:
                type: string
                description: Unique identifier of the scale. If left blank, the upload system will automatically generate a scale ID.
                example: af730171
            description: Scale metadata
        scientist:
          type: string
          description: Name of scientist submitting the variable.
          example: Dr. Bob Robertson
        status:
          type: string
          description: 'Variable status. (examples: "recommended", "obsolete", "legacy", etc.)'
          example: recommended
        submissionTimestamp:
          type: string
          description: Timestamp when the Variable was added (ISO 8601)
          format: date-time
        synonyms:
          type: array
          description: Other variable names
          example:
          - Maize Height
          - Stalk Height
          - Corn Height
          items:
            type: string
        trait:
          allOf:
          - $ref: '#/components/schemas/TraitBaseClass'
          - type: object
            properties:
              traitDbId:
                type: string
                description: The ID which uniquely identifies a trait
                example: 9b2e34f5
    WSMIMEDataTypes:
      type: string
      enum:
      - application/json
      - text/csv
      - text/tsv
      - application/flapjack
    basePagination:
      required:
      - pageSize
      type: object
      properties:
        pageSize:
          type: integer
          description: The number of data elements returned, aka the size of the current page. If the requested page does not have enough elements to fill a page at the requested page size, this field should indicate the actual number of elements returned.
          example: 1000
          default: 1000
        totalCount:
          type: integer
          description: The total number of elements that are available on the server and match the requested query parameters.
          example: 10
        totalPages:
          type: integer
          description: "The total number of pages of elements available on the server. This should be calculated with the following formula. \n\ntotalPages = CEILING( totalCount / requested_page_size)"
          example: 1
    dataFile:
      required:
      - fileURL
      type: object
      properties:
        fileDescription:
          type: string
          description: A human readable description of the file contents
          example: This is an Excel data file
        fileMD5Hash:
          type: string
          description: The MD5 Hash of the file contents to be used as a check sum
          example: c2365e900c81a89cf74d83dab60df146
        fileName:
          type: string
          description: The name of the file
          example: datafile.xlsx
        fileSize:
          type: integer
          description: The size of the file in bytes
          example: 4398
        fileType:
          type: string
          description: The type or format of the file. Preferably MIME Type.
          example: application/vnd.ms-excel
        fileURL:
          type: string
          description: The absolute URL where the file is located
          format: uri
          example: https://wiki.brapi.org/examples/datafile.xlsx
      description: A dataFile contains a URL and the relevant file metadata to represent a file
    geoJSON:
      title: GeoJSON
      type: object
      properties:
        geometry:
          title: GeoJSON Geometry
          type: object
          description: A geometry as defined by GeoJSON (RFC 7946). In this context, only Point or Polygon geometry are allowed.
          example:
            coordinates:
            - -76.506042
            - 42.417373
            - 123
            type: Point
          discriminator:
            propertyName: type
            mapping:
              Point: '#/components/schemas/pointGeometry'
              Polygon: '#/components/schemas/polygonGeometry'
          oneOf:
          - $ref: '#/components/schemas/pointGeometry'
          - $ref: '#/components/schemas/polygonGeometry'
        type:
          type: string
          description: The literal string "Feature"
          example: Feature
          default: Feature
      description: |-
        One geometry as defined by GeoJSON (RFC 7946). All coordinates are decimal values on the WGS84 geographic coordinate reference system.

        Copied from RFC 7946 Section 3.1.1

        A position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or
        easting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.
    geoJSONSearchArea:
      allOf:
      - $ref: '#/components/schemas/geoJSON'
      - title: GeoJSONSearchArea
        type: object
        properties: {}
        description: "A GeoJSON Polygon which describes an area to search for other GeoJSON objects. All contained Points and intersecting Polygons should be returned as search results. \n\nAll coordinates are decimal values on the WGS84 geographic coordinate reference system."
        example:
          geometry:
            coordinates:
            - - - -77.456654
                - 42.241133
              - - -75.414133
                - 41.508282
              - - -76.506042
                - 42.417373
              - - -77.456654
                - 42.241133
            type: Polygon
          type: Feature
    indexPagination:
      allOf:
      - $ref: '#/components/schemas/basePagination'
      - required:
        - currentPage
        type: object
        properties:
          currentPage:
            type: integer
            description: The index number for the returned page of data. This should always match the requested page number or the default page (0).
            example: 0
            default: 0
        description: "The pagination object is applicable only when the payload contains a \"data\" key. It describes the pagination of the data contained in the \"data\" array, as a way to identify which subset of data is being returned. \n\nPages are zero indexed, so the first page will be page 0 (zero)."
    linearRing:
      minItems: 4
      type: array
      description: An array of at least four positions where the first equals the last
      example:
      - - -77.456654
        - 42.241133
        - 494
      - - -75.414133
        - 41.508282
        - 571
      - - -76.506042
        - 42.417373
        - 123
      - - -77.456654
        - 42.241133
        - 346
      items:
        $ref: '#/components/schemas/position'
    metadata:
      allOf:
      - $ref: '#/components/schemas/metadataBase'
      - type: object
        properties:
          pagination:
            $ref: '#/components/schemas/indexPagination'
    metadataBase:
      type: object
      properties:
        datafiles:
          type: array
          description: "The datafiles contains a list of file URLs and metadata. \nThese files contain additional information related to the returned object and can be retrieved by a subsequent call. \nThis could be a supplementary data file, an informational file, the uploaded file where the data originated from, a generated file representing the whole dataset in a particular format, or any other related file. "
          items:
            $ref: '#/components/schemas/dataFile'
        status:
          type: array
          description: "The status field contains a list of informational status messages from the server. \nIf no status is reported, an empty list should be returned. See Error Reporting for more information."
          items:
            $ref: '#/components/schemas/status'
    metadataTokenPagination:
      allOf:
      - $ref: '#/components/schemas/metadataBase'
      - type: object
        properties:
          pagination:
            $ref: '#/components/schemas/tokenPagination'
    pointGeometry:
      type: object
      properties:
        coordinates:
          $ref: '#/components/schemas/position'
        type:
          type: string
          description: The literal string "Point"
          example: Point
          default: Point
      description: |-
        Copied from RFC 7946 Section 3.1.1

        A position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or
        easting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.
    polygon:
      type: array
      description: An array of linear rings
      example:
      - - - -77.456654
          - 42.241133
          - 494
        - - -75.414133
          - 41.508282
          - 571
        - - -76.506042
          - 42.417373
          - 123
        - - -77.456654
          - 42.241133
          - 346
      items:
        $ref: '#/components/schemas/linearRing'
    polygonGeometry:
      type: object
      properties:
        coordinates:
          $ref: '#/components/schemas/polygon'
        type:
          type: string
          description: The literal string "Polygon"
          example: Polygon
          default: Polygon
      description: "An array of Linear Rings. Each Linear Ring is an array of Points. \n\nA Point is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element."
    position:
      minItems: 2
      type: array
      description: A single position
      example:
      - -76.506042
      - 42.417373
      - 123
      items:
        type: number
    status:
      required:
      - message
      - messageType
      type: object
      properties:
        message:
          type: string
          description: A short message concerning the status of this request/response
          example: Request accepted, response successful
        messageType:
          type: string
          description: The logging level for the attached message
          example: INFO
          enum:
          - DEBUG
          - ERROR
          - WARNING
          - INFO
      description: An array of status messages to convey technical logging information from the server to the client.
    tokenPagination:
      allOf:
      - $ref: '#/components/schemas/basePagination'
      - required:
        - nextPageToken
        type: object
        properties:
          currentPageToken:
            type: string
            description: The string token used to query the current page of data.
            example: 48bc6ac1
          nextPageToken:
            type: string
            description: The string token used to query the next page of data.
            example: cb668f63
          prevPageToken:
            type: string
            description: The string token used to query the previous page of data.
            example: 9659857e
        description: "The pagination object is applicable only when the payload contains a \"data\" key. It describes the pagination of the data contained in the \"data\" array, as a way to identify which subset of data is being returned. \n\nTokenized pages are for large data sets which can not be efficiently broken into indexed pages. Use the nextPageToken and prevPageToken to construct an additional query and move to the next or previous page respectively.  "
    GermplasmAttributeListResponse:
      title: GermplasmAttributeListResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/GermplasmAttributeListResponse_result'
    GermplasmAttributeCategoryListResponse:
      title: GermplasmAttributeCategoryListResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/GermplasmAttributeCategoryListResponse_result'
    GermplasmAttributeSingleResponse:
      title: GermplasmAttributeSingleResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/GermplasmAttribute'
    GermplasmAttributeValueListResponse:
      title: GermplasmAttributeValueListResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/GermplasmAttributeValueListResponse_result'
    GermplasmAttributeValueSingleResponse:
      title: GermplasmAttributeValueSingleResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/GermplasmAttributeValue'
    BreedingMethodListResponse:
      title: BreedingMethodListResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/BreedingMethodListResponse_result'
    BreedingMethodSingleResponse:
      title: BreedingMethodSingleResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/BreedingMethod'
    CrossesListResponse:
      title: CrossesListResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/CrossesListResponse_result'
    CrossingProjectsListResponse:
      title: CrossingProjectsListResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/CrossingProjectsListResponse_result'
    CrossingProjectsSingleResponse:
      title: CrossingProjectsSingleResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/CrossingProject'
    GermplasmListResponse:
      title: GermplasmListResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/GermplasmListResponse_result'
    GermplasmSingleResponse:
      title: GermplasmSingleResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/Germplasm'
    GermplasmMCPDResponse:
      title: GermplasmMCPDResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/GermplasmMCPD'
    GermplasmPedigreeResponse:
      title: GermplasmPedigreeResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/PedigreeNode'
    GermplasmProgenyResponse:
      title: GermplasmProgenyResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/ProgenyNode'
    PlannedCrossesListResponse:
      title: PlannedCrossesListResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/PlannedCrossesListResponse_result'
    "202AcceptedSearchResponse":
      title: 202AcceptedSearchResponse
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/202AcceptedSearchResponse_result'
    SeedLotListResponse:
      title: SeedLotListResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/SeedLotListResponse_result'
    SeedLotTransactionListResponse:
      title: SeedLotTransactionListResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/SeedLotTransactionListResponse_result'
    SeedLotSingleResponse:
      title: SeedLotSingleResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/SeedLot'
    CrossNewRequest_crossAttributes:
      type: object
      properties:
        crossAttributeName:
          type: string
          description: the human readable name of a cross attribute
          example: Humidity Percentage
        crossAttributeValue:
          type: string
          description: the value of a cross attribute
          example: "45"
      description: a custom attributes associated with a cross
    ExternalReferences_inner:
      type: object
      properties:
        referenceID:
          type: string
          description: The external reference ID. Could be a simple string or a URI.
        referenceSource:
          type: string
          description: An identifier for the source system or database of this reference
    GermplasmMCPD_breedingInstitutes:
      type: object
      properties:
        instituteCode:
          type: string
          description: MCPD (v2.1) (BREDCODE) 18. FAO WIEWS code of the institute that has bred the material. If the holding institute has bred the material, the breeding institute code (BREDCODE) should be the same as the holding institute code (INSTCODE). Follows INSTCODE standard. Multiple values are separated by a semicolon without space.
          example: PER001
        instituteName:
          type: string
          description: MCPD (v2.1) (BREDNAME) 18.1  Name of the institute (or person) that bred the material. This descriptor should be used only if BREDCODE can not be filled because the FAO WIEWS code for this institute is not available. Multiple names are separated by a semicolon without space.
          example: The BrAPI Institute
    GermplasmMCPD_collectingInfo_collectingInstitutes:
      type: object
      properties:
        instituteAddress:
          type: string
          description: MCPD (v2.1) (COLLINSTADDRESS) 4.1.1  Address of the institute collecting the sample. This descriptor should be used only if COLLCODE can not be filled since the FAO WIEWS code for this institute is not available. Multiple values are separated by a semicolon without space.
          example: 123 Main Street, Lima, Peru, 5555
        instituteCode:
          type: string
          description: MCPD (v2.1) (COLLCODE) 4.  FAO WIEWS code of the institute collecting the sample. If the holding institute has collected the material, the collecting institute code (COLLCODE) should be the same as the holding institute code (INSTCODE). Follows INSTCODE standard. Multiple values are separated by a semicolon without space.
          example: PER001
        instituteName:
          type: string
          description: MCPD (v2.1) (COLLNAME) 4.1  Name of the institute collecting the sample. This descriptor should be used only if COLLCODE can not be filled because the FAO WIEWS code for this institute is not available. Multiple values are separated by a semicolon without space.
          example: The BrAPI Institute
    GermplasmMCPD_collectingInfo_collectingSite:
      type: object
      properties:
        coordinateUncertainty:
          type: string
          description: MCPD (v2.1) (COORDUNCERT) 15.5 Uncertainty associated with the coordinates in metres. Leave the value empty if the uncertainty is unknown.
          example: "20"
        elevation:
          type: string
          description: MCPD (v2.1) (ELEVATION) 16. Elevation of collecting site expressed in metres above sea level. Negative values are allowed.
          example: "35"
        georeferencingMethod:
          type: string
          description: MCPD (v2.1) (GEOREFMETH) 15.7  The georeferencing method used (GPS, determined from map, gazetteer, or estimated using software). Leave the value empty if georeferencing method is not known.
          example: WGS84
        latitudeDecimal:
          type: string
          description: MCPD (v2.1) (DECLATITUDE) 15.1 Latitude expressed in decimal degrees. Positive values are North of the Equator; negative values are South of the Equator (e.g. -44.6975).
          example: +42.445295
        latitudeDegrees:
          type: string
          description: MCPD (v2.1) (LATITUDE) 15.2 Degrees (2 digits) minutes (2 digits), and seconds (2 digits) followed by N (North) or S (South) (e.g. 103020S). Every missing digit (minutes or seconds) should be indicated with a hyphen. Leading zeros are required (e.g. 10
          example: 42 26 43.1 N
        locationDescription:
          type: string
          description: MCPD (v2.1) (COLLSITE) 14. Location information below the country level that describes where the accession was collected, preferable in English. This might include the distance in kilometres and direction from the nearest town, village or map grid reference point, (e.g. 7 km south of Townsville).
          example: South east hill near institute buildings
        longitudeDecimal:
          type: string
          description: MCPD (v2.1) (DECLONGITUDE) 15.3 Longitude expressed in decimal degrees. Positive values are East of the Greenwich Meridian; negative values are West of the Greenwich Meridian (e.g. +120.9123).
          example: "-076.471934"
        longitudeDegrees:
          type: string
          description: MCPD (v2.1) (LONGITUDE) 15.4 Degrees (3 digits), minutes (2 digits), and seconds (2 digits) followed by E (East) or W (West) (e.g. 0762510W). Every missing digit (minutes or seconds) should be indicated with a hyphen. Leading zeros are required (e.g. 076
          example: 76 28 19.0 W
        spatialReferenceSystem:
          type: string
          description: MCPD (v2.1) (COORDDATUM) 15.6 The geodetic datum or spatial reference system upon which the coordinates given in decimal latitude and decimal longitude are based (e.g. WGS84). The GPS uses the WGS84 datum.
          example: WGS84
      description: Information about the location where the sample was collected
    GermplasmMCPD_collectingInfo:
      type: object
      properties:
        collectingDate:
          type: string
          description: MCPD (v2.1) (COLLDATE) 17. Collecting date of the sample [YYYYMMDD] where YYYY is the year, MM is the month and DD is the day. Missing data (MM or DD) should be indicated with hyphens or "00" [double zero].
          format: date
        collectingInstitutes:
          type: array
          description: Institutes which collected the sample
          items:
            $ref: '#/components/schemas/GermplasmMCPD_collectingInfo_collectingInstitutes'
        collectingMissionIdentifier:
          type: string
          description: MCPD (v2.1) (COLLMISSID) 4.2 Identifier of the collecting mission used by the Collecting Institute (4 or 4.1) (e.g. "CIATFOR_052", "CN_426").
          example: CIATFOR_052
        collectingNumber:
          type: string
          description: MCPD (v2.1) (COLLNUMB) 3. Original identifier assigned by the collector(s) of the sample, normally composed of the name or initials of the collector(s) followed by a number (e.g. "ab109909"). This identifier is essential for identifying duplicates held in different collections.
          example: ab109909
        collectingSite:
          $ref: '#/components/schemas/GermplasmMCPD_collectingInfo_collectingSite'
      description: Information about the collection of this germplasm
    GermplasmMCPD_donorInfo_donorInstitute:
      type: object
      properties:
        instituteCode:
          type: string
          description: MCPD (v2.1) (DONORCODE) 22. FAO WIEWS code of the donor institute. Follows INSTCODE standard.
          example: PER001
        instituteName:
          type: string
          description: MCPD (v2.1) (DONORNAME) 22.1  Name of the donor institute (or person). This descriptor should be used only if DONORCODE can not be filled because the FAO WIEWS code for this institute is not available.
          example: The BrAPI Institute
    GermplasmMCPD_donorInfo:
      type: object
      properties:
        donorAccessionNumber:
          type: string
          description: MCPD (v2.1) (DONORNUMB) 23. Identifier assigned to an accession by the donor. Follows ACCENUMB standard.
          example: A0090204
        donorAccessionPui:
          type: string
          description: PUI (DOI mostly) of the accession in the donor system.
          example: http://pui.per/accession/A0010025
        donorInstitute:
          $ref: '#/components/schemas/GermplasmMCPD_donorInfo_donorInstitute'
      description: Information about the donor
    GermplasmMCPD_safetyDuplicateInstitutes:
      type: object
      properties:
        instituteCode:
          type: string
          description: MCPD (v2.1) (DUPLSITE) 25. FAO WIEWS code of the institute(s) where a safety duplicate of the accession is maintained. Follows INSTCODE standard.
          example: PER001
        instituteName:
          type: string
          description: MCPD (v2.1) (DUPLINSTNAME) 25.1  Name of the institute where a safety duplicate of the accession is maintained.
          example: The BrAPI Institute
    GermplasmNewRequest_donors:
      type: object
      properties:
        donorAccessionNumber:
          type: string
          description: "The accession number assigned by the donor\n\nMIAPPE V1.1 (DM-50) Material source ID (Holding institute/stock centre, accession) - An identifier for the source of the biological material, in the form of a key-value pair comprising the name/identifier of the repository from which the material was sourced plus the accession number of the repository for that material. Where an accession number has not been assigned, but the material has been derived from the crossing of known accessions, the material can be defined as follows: \"mother_accession X father_accession\", or, if father is unknown, as \"mother_accession X UNKNOWN\". For in situ material, the region of provenance may be used when an accession is not available.\n                  \nMCPD (v2.1) (DONORNUMB) 23. Identifier assigned to an accession by the donor. Follows ACCENUMB standard."
          example: A0000123
        donorInstituteCode:
          type: string
          description: |-
            The institute code for the donor institute

            MIAPPE V1.1 (DM-50) Material source ID (Holding institute/stock centre, accession) - An identifier for the source of the biological material, in the form of a key-value pair comprising the name/identifier of the repository from which the material was sourced plus the accession number of the repository for that material. Where an accession number has not been assigned, but the material has been derived from the crossing of known accessions, the material can be defined as follows: "mother_accession X father_accession", or, if father is unknown, as "mother_accession X UNKNOWN". For in situ material, the region of provenance may be used when an accession is not available.

            MCPD (v2.1) (DONORCODE) 22. FAO WIEWS code of the donor institute. Follows INSTCODE standard.
          example: PER001
        germplasmPUI:
          type: string
          description: |-
            The Permanent Unique Identifier which represents a germplasm from the source or donor

            MIAPPE V1.1 (DM-51) Material source DOI - Digital Object Identifier (DOI) of the material source
          example: http://pui.per/accession/A0000003
    GermplasmNewRequest_storageTypes:
      type: object
      properties:
        code:
          type: string
          description: "The 2 digit code representing the type of storage this germplasm is kept in at a genebank. \n\nMCPD (v2.1) (STORAGE) 26. If germplasm is maintained under different types of storage, multiple choices are allowed, separated by a semicolon (e.g. 20;30). (Refer to FAO/IPGRI Genebank Standards 1994 for details on storage type.) \n\n10) Seed collection \n11) Short term \n12) Medium term \n13) Long term \n20) Field collection \n30) In vitro collection \n40) Cryo-preserved collection \n50) DNA collection \n99) Other (elaborate in REMARKS field)"
          example: "11"
          enum:
          - "10"
          - "11"
          - "12"
          - "13"
          - "20"
          - "30"
          - "40"
          - "50"
          - "99"
        description:
          type: string
          description: A supplemental text description of the storage type
          example: Short term
    GermplasmNewRequest_synonyms:
      type: object
      properties:
        synonym:
          type: string
          description: Alternative name or ID used to reference this germplasm
          example: variety_1
        type:
          type: string
          description: A descriptive classification for this synonym
          example: Pre-Code
    OntologyReference_documentationLinks:
      type: object
      properties:
        URL:
          type: string
          format: uri
          example: http://purl.obolibrary.org/obo/ro.owl
        type:
          type: string
          example: OBO
          enum:
          - OBO
          - RDF
          - WEBPAGE
    PedigreeNode_parents:
      type: object
      properties:
        germplasmDbId:
          type: string
          description: The germplasm DbId of the parent of this germplasm
          example: a55847ed
        germplasmName:
          type: string
          description: the human readable name of the parent of this germplasm
          example: A0000592
        parentType:
          type: string
          description: The type of parent the parent is. ex. 'MALE', 'FEMALE', 'SELF', 'POPULATION', etc.
          example: FEMALE
          enum:
          - MALE
          - FEMALE
          - SELF
          - POPULATION
    PedigreeNode_siblings:
      type: object
      properties:
        germplasmDbId:
          type: string
          description: the germplasm DbId of the sibling
        germplasmName:
          type: string
          description: the germplasm name of the sibling
    ProgenyNode_progeny:
      required:
      - germplasmDbId
      - parentType
      type: object
      properties:
        germplasmDbId:
          type: string
          description: The unique identifier of a progeny germplasm
          example: e8d5dad7
        germplasmName:
          type: string
          description: The human readable name of a progeny germplasm
          example: A0021011
        parentType:
          type: string
          description: Given a germplasm A having a progeny B and C, 'parentType' for progeny B item refers to the 'parentType' of A toward B.
          example: FEMALE
          enum:
          - MALE
          - FEMALE
          - SELF
          - POPULATION
    ScaleBaseClass_validValues_categories:
      type: object
      properties:
        label:
          type: string
          description: A text label for a category
        value:
          type: string
          description: The actual value for a category
    ScaleBaseClass_validValues:
      type: object
      properties:
        categories:
          type: array
          description: List of possible values with optional labels
          example:
          - label: low
            value: "0"
          - label: medium
            value: "5"
          - label: high
            value: "10"
          items:
            $ref: '#/components/schemas/ScaleBaseClass_validValues_categories'
        max:
          type: integer
          description: Maximum value (used for field data capture control).
          example: 9999
        min:
          type: integer
          description: Minimum value (used for data capture control) for numerical and date scales
          example: 2
    GermplasmAttributeListResponse_result:
      required:
      - data
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/GermplasmAttribute'
    GermplasmAttributeCategoryListResponse_result:
      required:
      - data
      type: object
      properties:
        data:
          type: array
          example:
          - Morphological
          - Agronomic
          items:
            type: string
    GermplasmAttributeValueListResponse_result:
      required:
      - data
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/GermplasmAttributeValue'
    BreedingMethodListResponse_result:
      required:
      - data
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/BreedingMethod'
    CrossesListResponse_result:
      required:
      - data
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Cross'
    CrossingProjectsListResponse_result:
      required:
      - data
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/CrossingProject'
    GermplasmListResponse_result:
      required:
      - data
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Germplasm'
    PlannedCrossesListResponse_result:
      required:
      - data
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/PlannedCross'
    "202AcceptedSearchResponse_result":
      type: object
      properties:
        searchResultsDbId:
          type: string
          example: 551ae08c
    SeedLotListResponse_result:
      required:
      - data
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/SeedLot'
    SeedLotTransactionListResponse_result:
      required:
      - data
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/SeedLotTransaction'
  responses:
    "202AcceptedSearchResponse":
      description: Accepted
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/202AcceptedSearchResponse'
    "400BadRequest":
      description: Bad Request
      content:
        application/json:
          schema:
            type: string
          example: |-
            ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

            ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

            ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
    "401Unauthorized":
      description: Unauthorized
      content:
        application/json:
          schema:
            type: string
          example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
    "403Forbidden":
      description: Forbidden
      content:
        application/json:
          schema:
            type: string
          example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
    "404NotFound":
      description: Not Found
      content:
        application/json:
          schema:
            type: string
          example: ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found
    CrossesListResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CrossesListResponse'
    CrossingProjectsListResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CrossingProjectsListResponse'
    CrossingProjectsSingleResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CrossingProjectsSingleResponse'
    GermplasmAttributeListResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GermplasmAttributeListResponse'
    GermplasmAttributeSingleResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GermplasmAttributeSingleResponse'
    GermplasmAttributeValueListResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GermplasmAttributeValueListResponse'
    GermplasmAttributeValueSingleResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GermplasmAttributeValueSingleResponse'
    GermplasmListResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GermplasmListResponse'
    GermplasmSingleResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GermplasmSingleResponse'
    PlannedCrossesListResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PlannedCrossesListResponse'
    SeedLotListResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SeedLotListResponse'
    SeedLotSingleResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SeedLotSingleResponse'
    SeedLotTransactionListResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SeedLotTransactionListResponse'
  parameters:
    acceptHeader:
      name: Accept
      in: header
      description: The requested content type which should be returned by the server
      required: true
      style: simple
      explode: false
      schema:
        $ref: '#/components/schemas/WSMIMEDataTypes'
      example: application/json
    authorizationHeader:
      name: Authorization
      in: header
      description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
      required: false
      style: simple
      explode: false
      schema:
        pattern: ^Bearer .*$
        type: string
      example: Bearer XXXX
    externalReferenceID:
      name: externalReferenceID
      in: query
      description: An external reference ID. Could be a simple string or a URI. (use with `externalReferenceSource` parameter)
      required: false
      style: form
      explode: true
      schema:
        type: string
    externalReferenceSource:
      name: externalReferenceSource
      in: query
      description: An identifier for the source system or database of an external reference (use with `externalReferenceID` parameter)
      required: false
      style: form
      explode: true
      schema:
        type: string
    page:
      name: page
      in: query
      description: |-
        Used to request a specific page of data to be returned.

        The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
      required: false
      style: form
      explode: true
      schema:
        type: integer
      example: "0"
    pageSize:
      name: pageSize
      in: query
      description: The size of the pages to be returned. Default is `1000`.
      required: false
      style: form
      explode: true
      schema:
        type: integer
      example: 1000
    pageToken:
      name: pageToken
      in: query
      description: "Used to request a specific page of data to be returned.\n\nTokenized pages are for large data sets which can not be efficiently broken into indexed pages. Use the nextPageToken and prevPageToken from a prior response to construct a query and move to the next or previous page respectively. "
      required: false
      style: form
      explode: true
      schema:
        type: string
      example: 33c27874
    searchResultsDbId:
      name: searchResultsDbId
      in: path
      description: Unique identifier which references the search results
      required: true
      style: simple
      explode: false
      schema:
        type: string
  securitySchemes:
    AuthorizationToken:
      type: http
      description: OAuth Bearer Token - A valid Bearer token to prove authorization
      scheme: bearer
      bearerFormat: nonce token or JWT
