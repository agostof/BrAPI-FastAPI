components:
  parameters:
    acceptHeader:
      description: The requested content type which should be returned by the server
      example: application/json
      in: header
      name: Accept
      required: true
      schema:
        $ref: '#/components/schemas/WSMIMEDataTypes'
    authorizationHeader:
      description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
      example: Bearer XXXX
      in: header
      name: Authorization
      schema:
        pattern: ^Bearer .*$
        type: string
    externalReferenceID:
      description: An external reference ID. Could be a simple string or a URI. (use with `externalReferenceSource` parameter)
      in: query
      name: externalReferenceID
      required: false
      schema:
        type: string
    externalReferenceSource:
      description: An identifier for the source system or database of an external reference (use with `externalReferenceID` parameter)
      in: query
      name: externalReferenceSource
      required: false
      schema:
        type: string
    page:
      description: 'Used to request a specific page of data to be returned.


        The page indexing starts at 0 (the first page is ''page''= 0). Default is `0`.'
      example: '0'
      in: query
      name: page
      required: false
      schema:
        type: integer
    pageSize:
      description: The size of the pages to be returned. Default is `1000`.
      example: 1000
      in: query
      name: pageSize
      required: false
      schema:
        type: integer
    pageToken:
      description: 'Used to request a specific page of data to be returned.


        Tokenized pages are for large data sets which can not be efficiently broken into indexed pages. Use the nextPageToken and prevPageToken from a prior response to construct a query and move to the next or previous page respectively. '
      example: 33c27874
      in: query
      name: pageToken
      required: false
      schema:
        type: string
    searchResultsDbId:
      description: Unique identifier which references the search results
      in: path
      name: searchResultsDbId
      required: true
      schema:
        type: string
  responses:
    202AcceptedSearchResponse:
      content:
        application/json:
          schema:
            properties:
              '@context':
                $ref: '#/components/schemas/Context'
              metadata:
                $ref: '#/components/schemas/metadata'
              result:
                properties:
                  searchResultsDbId:
                    example: 551ae08c
                    type: string
                type: object
            title: 202AcceptedSearchResponse
            type: object
      description: Accepted
      headers: {}
    400BadRequest:
      content:
        application/json:
          example: 'ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object


            ERROR - 2018-10-08T18:15:11Z - Invalid query parameter


            ERROR - 2018-10-08T18:15:11Z - Required parameter is missing'
          schema:
            type: string
      description: Bad Request
      headers: {}
    401Unauthorized:
      content:
        application/json:
          example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
          schema:
            type: string
      description: Unauthorized
      headers: {}
    403Forbidden:
      content:
        application/json:
          example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
          schema:
            type: string
      description: Forbidden
      headers: {}
    404NotFound:
      content:
        application/json:
          example: ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found
          schema:
            type: string
      description: Not Found
      headers: {}
    CallSetsListResponse:
      content:
        application/json:
          schema:
            properties:
              '@context':
                $ref: '#/components/schemas/Context'
              metadata:
                $ref: '#/components/schemas/metadata'
              result:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/CallSet'
                    type: array
                required:
                - data
                title: CallSetsListResponseResult
                type: object
            required:
            - metadata
            - result
            title: CallSetsListResponse
            type: object
      description: OK
      headers: {}
    CallsListResponse:
      content:
        application/json:
          schema:
            properties:
              '@context':
                $ref: '#/components/schemas/Context'
              metadata:
                $ref: '#/components/schemas/metadataTokenPagination'
              result:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Call'
                    type: array
                  expandHomozygotes:
                    description: Should homozygotes be expanded (true) or collapsed into a single occurence (false)
                    example: true
                    type: boolean
                  sepPhased:
                    description: The string used as a separator for phased allele calls.
                    example: '~'
                    type: string
                  sepUnphased:
                    description: The string used as a separator for unphased allele calls.
                    example: '|'
                    type: string
                  unknownString:
                    description: The string used as a representation for missing data.
                    example: '-'
                    type: string
                required:
                - data
                type: object
            required:
            - metadata
            - result
            title: CallsListResponse
            type: object
      description: OK
      headers: {}
    MarkerPositionListResponse:
      content:
        application/json:
          schema:
            properties:
              '@context':
                $ref: '#/components/schemas/Context'
              metadata:
                $ref: '#/components/schemas/metadata'
              result:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/MarkerPosition'
                    type: array
                required:
                - data
                type: object
            required:
            - metadata
            - result
            title: MarkerPositionListResponse
            type: object
      description: OK
      headers: {}
    ReferenceSetsListResponse:
      content:
        application/json:
          schema:
            properties:
              '@context':
                $ref: '#/components/schemas/Context'
              metadata:
                $ref: '#/components/schemas/metadata'
              result:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/ReferenceSet'
                    type: array
                required:
                - data
                title: ReferenceSetsListResponseResult
                type: object
            required:
            - metadata
            - result
            title: ReferenceSetsListResponse
            type: object
      description: OK
      headers: {}
    ReferencesListResponse:
      content:
        application/json:
          schema:
            properties:
              '@context':
                $ref: '#/components/schemas/Context'
              metadata:
                $ref: '#/components/schemas/metadata'
              result:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Reference'
                    type: array
                required:
                - data
                title: ReferencesListResponseResult
                type: object
            required:
            - metadata
            - result
            title: ReferencesListResponse
            type: object
      description: OK
      headers: {}
    SampleListResponse:
      content:
        application/json:
          schema:
            properties:
              '@context':
                $ref: '#/components/schemas/Context'
              metadata:
                $ref: '#/components/schemas/metadata'
              result:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Sample'
                    type: array
                required:
                - data
                type: object
            required:
            - metadata
            - result
            title: SampleListResponse
            type: object
      description: OK
      headers: {}
    SampleSingleResponse:
      content:
        application/json:
          schema:
            properties:
              '@context':
                $ref: '#/components/schemas/Context'
              metadata:
                $ref: '#/components/schemas/metadata'
              result:
                $ref: '#/components/schemas/Sample'
            required:
            - metadata
            - result
            title: SampleSingleResponse
            type: object
      description: OK
      headers: {}
    VariantSetsListResponse:
      content:
        application/json:
          schema:
            properties:
              '@context':
                $ref: '#/components/schemas/Context'
              metadata:
                $ref: '#/components/schemas/metadata'
              result:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/VariantSet'
                    type: array
                required:
                - data
                title: VariantSetsListResponseResult
                type: object
            required:
            - metadata
            - result
            title: VariantSetsListResponse
            type: object
      description: OK
      headers: {}
    VariantsListResponse:
      content:
        application/json:
          schema:
            properties:
              '@context':
                $ref: '#/components/schemas/Context'
              metadata:
                $ref: '#/components/schemas/metadataTokenPagination'
              result:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Variant'
                    type: array
                required:
                - data
                title: VariantsListResponseResult
                type: object
            required:
            - metadata
            - result
            title: VariantsListResponse
            type: object
      description: OK
      headers: {}
  schemas:
    Analysis:
      description: An analysis contains an interpretation of one or several experiments. (e.g. SNVs, copy number variations, methylation status) together with information about the methodology used.
      properties:
        analysisDbId:
          description: Unique identifier for this analysis description
          example: 6191a6bd
          type: string
        analysisName:
          description: A human readable name for this analysis
          example: Standard QC
          type: string
        created:
          description: The time at which this record was created, in ISO 8601 format.
          format: date-time
          type: string
        description:
          description: A human readable description of the analysis
          example: This is a formal description of a QC methodology. Blah blah blah ...
          type: string
        software:
          description: The software run to generate this analysis.
          example:
          - https://github.com/genotyping/QC
          items:
            type: string
          type: array
        type:
          description: The type of analysis.
          example: QC
          type: string
        updated:
          description: The time at which this record was last updated, in ISO 8601 format.
          format: date-time
          type: string
      type: object
    Call:
      description: 'A `Call` represents the determination of genotype with respect to a particular `Variant`.


        It may include associated information such as quality and phasing. For example, a call might assign a probability of 0.32 to the occurrence of a SNP named RS_1234 in a call set with the name NA_12345.'
      properties:
        additionalInfo:
          additionalProperties:
            type: string
          description: Additional arbitrary info
          type: object
        callSetDbId:
          description: 'The ID of the call set this variant call belongs to.


            If this field is not present, the ordering of the call sets from a `SearchCallSetsRequest` over this `VariantSet` is guaranteed to match the ordering of the calls on this `Variant`. The number of results will also be the same.'
          example: 16466f55
          type: string
        callSetName:
          description: The name of the call set this variant call belongs to. If this field is not present, the ordering of the call sets from a `SearchCallSetsRequest` over this `VariantSet` is guaranteed to match the ordering of the calls on this `Variant`. The number of results will also be the same.
          example: Sample_123_DNA_Run_456
          type: string
        genotype:
          $ref: '#/components/schemas/ListValue'
        genotype_likelihood:
          description: The genotype likelihood for this variant call. Each array entry represents how likely a specific genotype is for this call as log10(P(data | genotype)), analogous to the GL tag in the VCF spec. The value ordering is defined by the GL tag in the VCF spec.
          example:
          - 1.0
          items:
            format: double
            type: number
          type: array
        phaseSet:
          description: If this field is populated, this variant call's genotype ordering implies the phase of the bases and is consistent with any other variant calls on the same contig which have the same phase set string.
          example: 6410afc5
          type: string
        variantDbId:
          description: The ID of the variant this call belongs to.
          example: 538c8ecf
          type: string
        variantName:
          description: The name of the variant this call belongs to.
          example: Marker A
          type: string
      type: object
    CallSet:
      description: A CallSet is a collection of calls that were generated by the same analysis of the same sample.
      properties:
        additionalInfo:
          additionalProperties:
            type: string
          description: Additional arbitrary info
          type: object
        callSetDbId:
          description: The call set ID.
          example: eb2bfd3d
          type: string
        callSetName:
          description: The call set name.
          example: Sample_123_DNA_Run_456
          type: string
        created:
          description: The date this call set was created
          format: date-time
          type: string
        sampleDbId:
          description: The Biosample entity the call set data was generated from.
          example: 5e50e11d
          type: string
        studyDbId:
          description: The ID which uniquely identifies a study within the given database server
          example: 708149c1
          type: string
        updated:
          description: The time at which this call set was last updated
          format: date-time
          type: string
        variantSetDbIds:
          description: The IDs of the variant sets this call set has calls in.
          example:
          - cfd3d60f
          - a4e8bfe9
          items:
            type: string
          type: array
      type: object
    Context:
      description: "The JSON-LD Context is used to provide JSON-LD definitions to each field in a JSON object. By providing an array of context file urls, a BrAPI response object becomes JSON-LD compatible.  \n\nFor more information, see https://w3c.github.io/json-ld-syntax/#the-context"
      example:
      - https://brapi.org/jsonld/context/metadata.jsonld
      items:
        format: uri
        type: string
      title: context
      type: array
    ExternalReferences:
      description: An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.
      example:
      - referenceID: doi:10.155454/12341234
        referenceSource: DOI
      - referenceID: http://purl.obolibrary.org/obo/ro.owl
        referenceSource: OBO Library
      - referenceID: 75a50e76
        referenceSource: Remote Data Collection Upload Tool
      items:
        properties:
          referenceID:
            description: The external reference ID. Could be a simple string or a URI.
            type: string
          referenceSource:
            description: An identifier for the source system or database of this reference
            type: string
        type: object
      title: ExternalReferences
      type: array
    GenomeMap:
      properties:
        additionalInfo:
          additionalProperties:
            type: string
          description: Additional arbitrary info
          type: object
        comments:
          description: Additional comments
          example: Comments about this map
          type: string
        commonCropName:
          description: The common name of the crop
          example: Paw Paw
          type: string
        documentationURL:
          description: A URL to the human readable documentation of this object
          example: https://brapi.org
          format: uri
          type: string
        linkageGroupCount:
          description: The number of linkage groups present in this genomic map
          example: 5
          type: integer
        mapDbId:
          description: The ID which uniquely identifies this genomic map
          example: 142cffd5
          type: string
        mapName:
          description: A human readable name for this genomic map
          example: Genome Map 1
          type: string
        mapPUI:
          description: The DOI or other permanent identifier for this genomic map
          example: doi:10.3207/2959859860
          type: string
        markerCount:
          description: The number of markers present in this genomic map
          example: 1100
          type: integer
        publishedDate:
          description: The date this genome was published
          format: date-time
          type: string
        scientificName:
          description: Full scientific binomial format name. This includes Genus, Species, and Sub-species
          example: Zea mays
          type: string
        type:
          description: The type of map this represents, usually "Genetic"
          example: Genetic
          type: string
        unit:
          description: The units used to describe the data in this map
          example: cM
          type: string
      required:
      - mapDbId
      - commonCropName
      - type
      type: object
    LinkageGroup:
      description: a Linkage Group is the BrAPI generic term for a named section of a map. A Linkage Group can represent a Chromosome, Scaffold, or Linkage Group.
      properties:
        additionalInfo:
          additionalProperties:
            type: string
          description: Additional arbitrary info
          type: object
        linkageGroupName:
          description: The Uniquely Identifiable name of this linkage group
          example: Chromosome 3
          type: string
        markerCount:
          description: The number of markers associated with this linkage group
          example: 150
          type: integer
        maxPosition:
          description: The maximum position of a marker within this linkage group
          example: 2500
          type: integer
      type: object
    ListValue:
      description: '`ListValue` is a wrapper around a repeated field of values.


        The JSON representation for `ListValue` is JSON array.'
      properties:
        values:
          description: Repeated field of dynamically typed values.
          example:
          - AA
          items:
            oneOf:
            - description: Represents a boolean value.
              format: boolean
              type: boolean
            - description: Represents a double value.
              format: double
              type: number
            - description: Represents a string value.
              type: string
          type: array
      type: object
    MarkerPosition:
      properties:
        additionalInfo:
          additionalProperties:
            type: string
          description: Additional arbitrary info
          type: object
        linkageGroupName:
          description: The Uniquely Identifiable name of this linkage group
          example: Chromosome 3
          type: string
        mapDbId:
          description: The unique ID of the map
          example: 3d52bdf3
          type: string
        mapName:
          description: The human readable name of the map
          example: Genome Map 1
          type: string
        position:
          description: The position of a marker within a linkage group
          example: 2390
          type: integer
        variantDbId:
          description: Internal db identifier
          example: a1eb250a
          type: string
        variantName:
          description: The human readable name for a marker
          example: Marker_2390
          type: string
      type: object
    MarkerPositionSearchRequest:
      allOf:
      - $ref: '#/components/schemas/SearchRequestParametersPaging'
      - properties:
          linkageGroupNames:
            description: The Uniquely Identifiable name of this linkage group
            example:
            - Chromosome 2
            - Chromosome 3
            items:
              type: string
            type: array
          mapDbIds:
            description: The unique ID of the map
            example:
            - 7e6fa8aa
            - bedc418c
            items:
              type: string
            type: array
          maxPosition:
            description: The maximum position
            example: 4000
            type: integer
          minPosition:
            description: The minimum position
            example: 250
            type: integer
          variantDbIds:
            description: Internal db identifier
            example:
            - a0caa928
            - f8894a26
            items:
              type: string
            type: array
        type: object
    Measurement:
      description: A value with units
      properties:
        units:
          description: 'Units (example: "ng/ul")'
          example: ng/ul
          type: string
        value:
          description: 'Value (example: "2.3")'
          example: 2.3
          type: number
      type: object
    MethodBaseClass:
      properties:
        additionalInfo:
          additionalProperties:
            type: string
          description: Additional arbitrary info
          type: object
        bibliographicalReference:
          description: 'Bibliographical reference describing the method.


            MIAPPE V1.1 (DM-91) Reference associated to the method - URI/DOI of reference describing the method.'
          example: Smith, 1893, Really Cool Paper, Popular Journal
          type: string
        description:
          description: 'Method description


            MIAPPE V1.1 (DM-90) Method description - Textual description of the method, which may extend a method defined in an external reference with specific parameters, e.g. growth stage, inoculation precise organ (leaf number)'
          example: A measuring tape was used
          type: string
        externalReferences:
          $ref: '#/components/schemas/ExternalReferences'
        formula:
          description: For computational methods i.e., when the method consists in assessing the trait by computing measurements, write the generic formula used for the calculation
          example: a^2 + b^2 = c^2
          type: string
        methodClass:
          description: 'Method class (examples: "Measurement", "Counting", "Estimation", "Computation", etc.)'
          example: Measurement
          type: string
        methodName:
          description: 'Human readable name for the method


            MIAPPE V1.1 (DM-88) Method  Name of the method of observation'
          example: Measuring Tape
          type: string
        ontologyReference:
          $ref: '#/components/schemas/OntologyReference'
      type: object
    ObservationUnitHierarchyLevel:
      description: 'Observation levels indicate the granularity level at which the measurements are taken. `levelName` defines the level, `levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`s lower numbers are at the top of the hierarchy (ie field > 0) and higher numbers are at the bottom of the hierarchy (ie plant > 6). '
      properties:
        levelName:
          description: A name for this level
          enum:
          - study
          - field
          - entry
          - rep
          - block
          - sub-block
          - plot
          - sub-plot
          - plant
          - pot
          - sample
          example: plot
          type: string
        levelOrder:
          description: '`levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`''s lower numbers are at the top of the hierarchy (ie field -> 1) and higher numbers are at the bottom of the hierarchy (ie plant -> 9).'
          example: 2
          type: integer
      title: ObservationUnitHierarchyLevel
      type: object
    OntologyReference:
      description: 'MIAPPE V1.1


        (DM-85) Variable accession number - Accession number of the variable in the Crop Ontology


        (DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).


        (DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).


        (DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology).'
      properties:
        documentationLinks:
          description: links to various ontology documentation
          items:
            properties:
              URL:
                example: http://purl.obolibrary.org/obo/ro.owl
                format: uri
                type: string
              type:
                enum:
                - OBO
                - RDF
                - WEBPAGE
                example: OBO
                type: string
            type: object
          type: array
        ontologyDbId:
          description: Ontology database unique identifier
          example: 6b071868
          type: string
        ontologyName:
          description: Ontology name
          example: The Crop Ontology
          type: string
        version:
          description: Ontology version (no specific format)
          example: 7.2.3
          type: string
      required:
      - ontologyName
      - ontologyDbId
      type: object
    OntologyTerm:
      description: An ontology term describing an attribute.
      properties:
        term:
          description: Ontology term - the label of the ontology term the termId is pointing to.
          example: sonic hedgehog
          type: string
        termURI:
          description: Ontology term identifier - the CURIE for an ontology term. It differs from the standard GA4GH schema's :ref:`id ` in that it is a CURIE pointing to an information resource outside of the scope of the schema or its resource implementation.
          example: MGI:MGI:98297
          type: string
      type: object
    PlateFormat:
      description: Enum for plate formats, usually "PLATE_96" for a 96 well plate or "TUBES" for plateless format
      enum:
      - PLATE_96
      - TUBES
      example: PLATE_96
      type: string
    Reference:
      description: A `Reference` is a canonical assembled contig, intended to act as a reference coordinate space for other genomic annotations. A single `Reference` might represent the human chromosome 1, for instance. `References` are designed to be immutable.
      properties:
        additionalInfo:
          additionalProperties:
            type: string
          description: Additional arbitrary info
          type: object
        isDerived:
          description: A sequence X is said to be derived from source sequence Y, if X and Y are of the same length and the per-base sequence divergence at A/C/G/T bases is sufficiently small. Two sequences derived from the same official sequence share the same coordinates and annotations, and can be replaced with the official sequence for certain use cases.
          example: false
          format: boolean
          type: boolean
        length:
          description: The length of this reference's sequence.
          example: 50000000
          type: integer
        md5checksum:
          description: The MD5 checksum uniquely representing this `Reference` as a lower-case hexadecimal string, calculated as the MD5 of the upper-case sequence excluding all whitespace characters (this is equivalent to SQ:M5 in SAM).
          example: c2365e900c81a89cf74d83dab60df146
          type: string
        referenceDbId:
          description: The reference ID. Unique within the repository.
          example: fc0a81d0
          type: string
        referenceName:
          description: The unique name of this reference within the Reference Set.
          example: Chromosome 2
          type: string
        referenceSetDbId:
          description: The reference ID. Unique within the repository.
          example: c1ecfef1
          type: string
        sourceAccessions:
          description: All known corresponding accession IDs in INSDC (GenBank/ENA/DDBJ) which must include a version number, e.g. `GCF_000001405.26`.
          example:
          - GCF_000001405.26
          items:
            type: string
          type: array
        sourceDivergence:
          description: The `sourceDivergence` is the fraction of non-indel bases that do not match the reference this message was derived from.
          example: 0.01
          format: float
          type: number
        sourceURI:
          description: The URI from which the sequence was obtained. Specifies a FASTA format file/string with one name, sequence pair. In most cases, clients should call the `getReferenceBases()` method to obtain sequence bases for a `Reference` instead of attempting to retrieve this URI.
          example: https://wiki.brapi.org/files/demo.fast
          type: string
        species:
          $ref: '#/components/schemas/OntologyTerm'
      type: object
    ReferenceBases:
      description: A string representation of the reference base alleles.
      properties:
        nextPageToken:
          description: The continuation token, which is used to page through large result sets. Provide this value in a subsequent request to return the next page of results. This field will be empty if there are not any additional results.
          example: 3a3d658a
          type: string
        offset:
          description: The offset position (0-based) of the given sequence from the start of this `Reference`. This value will differ for each page in a request.
          example: 20000
          type: integer
        sequence:
          description: A sub-string of the bases that make up this reference. Bases are represented as IUPAC-IUB codes; this string matches the regular expression `[ACGTMRWSYKVHDBN]*`.
          example: TAGGATTGAGCTCTATATTAGGATTGAGCTCTATATTAGGATTGAGCTCTATATTAGGATTGAGCTCTATATTAGGATTGAGCTCTATATTAGGATTGAGCTCTATATTAGGATTGAGCTCTATATTAGGATTGAGCTCTATATTAGGATTGAGCTCTATAT
          type: string
      type: object
    ReferenceSet:
      description: A `ReferenceSet` is a set of `Reference` s which typically comprise a reference assembly, such as `GRCH_38`. A `ReferenceSet` defines a common coordinate space for comparing reference-aligned experimental data.
      properties:
        additionalInfo:
          additionalProperties:
            type: string
          description: Additional arbitrary info
          type: object
        assemblyPUI:
          description: The remaining information is about the source of the sequences Public id of this reference set, such as `GRCH_37`.
          example: doi://10.12345/fake/9876
          type: string
        description:
          description: Optional free text description of this reference set.
          example: This is an example description for an assembly
          type: string
        isDerived:
          description: A reference set may be derived from a source if it contains additional sequences, or some of the sequences within it are derived (see the definition of `isDerived` in `Reference`).
          format: boolean
          type: boolean
        md5checksum:
          description: 'Order-independent MD5 checksum which identifies this `ReferenceSet`.


            To compute this checksum, make a list of `Reference.md5checksum` for all

            `Reference` s in this set. Then sort that list, and take the MD5 hash of

            all the strings concatenated together. Express the hash as a lower-case

            hexadecimal string.'
          example: c2365e900c81a89cf74d83dab60df146
          type: string
        referenceSetDbId:
          description: The reference set ID. Unique in the repository.
          example: 7e029a84
          type: string
        referenceSetName:
          description: The reference set name.
          example: The Best Assembly Ever
          type: string
        sourceAccessions:
          description: All known corresponding accession IDs in INSDC (GenBank/ENA/DDBJ) ideally with a version number, e.g. `NC_000001.11`.
          example:
          - A0000002
          - A0009393
          items:
            type: string
          type: array
        sourceURI:
          description: Specifies a FASTA format file/string.
          example: https://wiki.brapi.org/files/demo.fast
          type: string
        species:
          $ref: '#/components/schemas/OntologyTerm'
      type: object
    ReferenceSetsSearchRequest:
      allOf:
      - $ref: '#/components/schemas/SearchRequestParametersPaging'
      - properties:
          accessions:
            description: If set, return the reference sets for which the `accession` matches this string (case-sensitive, exact match).
            example:
            - A0009283
            - A0006657
            items:
              type: string
          assemblyPUIs:
            description: If set, return the reference sets for which the `assemblyId` matches this string (case-sensitive, exact match).
            example:
            - doi:10.15454/312953986E3
            - doi:10.15454/312953986E3
            items:
              type: string
          md5checksums:
            description: If set, return the reference sets for which the `md5checksum` matches this string (case-sensitive, exact match).
            example:
            - c2365e900c81a89cf74d83dab60df146
            items:
              type: string
          referenceSetDbIds:
            description: The `ReferenceSets` to search.
            example:
            - 32a19dd7
            - 2c182c18
            items:
              type: string
        type: object
    ReferencesSearchRequest:
      allOf:
      - $ref: '#/components/schemas/SearchRequestParametersPaging'
      - properties:
          accessions:
            description: If specified, return the references for which the `accession` matches this string (case-sensitive, exact match).
            example:
            - A0009283
            - A0006657
            items:
              type: string
          isDerived:
            description: A sequence X is said to be derived from source sequence Y, if X and Y are of the same length and the per-base sequence divergence at A/C/G/T bases is sufficiently small. Two sequences derived from the same official sequence share the same coordinates and annotations, and can be replaced with the official sequence for certain use cases.
            format: boolean
            type: boolean
          maxLength:
            description: The minimum length of this reference's sequence.
            example: 90000
            type: integer
          md5checksums:
            description: If specified, return the references for which the `md5checksum` matches this string (case-sensitive, exact match).
            example:
            - c2365e900c81a89cf74d83dab60df146
            items:
              type: string
          minLength:
            description: The minimum length of this reference's sequence.
            example: 4000
            type: integer
          referenceDbIds:
            description: The `References` to search.
            example:
            - 04c83ea7
            - d0998a34
            items:
              type: string
          referenceSetDbIds:
            description: The `ReferenceSets` to search.
            example:
            - 32a19dd7
            - 2c182c18
            items:
              type: string
        type: object
    Sample:
      allOf:
      - $ref: '#/components/schemas/SampleNewRequest'
      - properties:
          sampleDbId:
            description: 'The ID which uniquely identifies a sample


              MIAPPE V1.1 (DM-76) Sample ID - Unique identifier for the sample.'
            example: cd06a61d
            type: string
        type: object
    SampleNewRequest:
      properties:
        additionalInfo:
          additionalProperties:
            type: string
          description: Additional arbitrary info
          type: object
        column:
          description: The Column identifier for this samples location in the plate
          example: 6
          maximum: 12
          minimum: 1
          type: integer
        externalReferences:
          $ref: '#/components/schemas/ExternalReferences'
        germplasmDbId:
          description: The ID which uniquely identifies a germplasm
          example: 7e08d538
          type: string
        observationUnitDbId:
          description: The ID which uniquely identifies an observation unit
          example: 073a3ce5
          type: string
        plateDbId:
          description: The ID which uniquely identifies a plate of samples
          example: 2dce16d1
          type: string
        plateName:
          description: The human readable name of a plate
          example: Plate_alpha_20191022
          type: string
        programDbId:
          description: The ID which uniquely identifies a program within the given database server
          example: bd748e00
          type: string
        row:
          description: The Row identifier for this samples location in the plate
          example: B
          type: string
        sampleBarcode:
          description: A unique identifier physically attached to the sample
          example: 3a027b59
          type: string
        sampleDescription:
          description: 'Description of a sample


            MIAPPE V1.1 (DM-79) Sample description - Any information not captured by the other sample fields, including quantification, sample treatments and processing.'
          example: This sample was taken from the root of a tree
          type: string
        sampleGroupDbId:
          description: The ID which uniquely identifies a group of samples
          example: 8524b436
          type: string
        sampleName:
          description: The name of the sample
          example: Sample_alpha_20191022
          type: string
        samplePUI:
          description: 'A permanent unique identifier for the sample (DOI, URL, UUID, etc)


            MIAPPE V1.1 (DM-81) External ID - An identifier for the sample in a persistent repository, comprising the name of the repository and the accession number of the observation unit therein. Submission to the EBI Biosamples repository is recommended. URI are recommended when possible. '
          example: doi:10.15454/312953986E3
          type: string
        sampleTimestamp:
          description: 'The date and time a sample was collected from the field


            MIAPPE V1.1 (DM-80) Collection date - The date and time when the sample was collected / harvested'
          format: date-time
          type: string
        sampleType:
          description: The type of sample taken. ex. 'DNA', 'RNA', 'Tissue', etc
          example: Tissue
          type: string
        studyDbId:
          description: The ID which uniquely identifies a study within the given database server
          example: 64bd6bf9
          type: string
        takenBy:
          description: The name or identifier of the entity which took the sample from the field
          example: Bob
          type: string
        tissueType:
          description: 'The type of tissue sampled. ex. ''Leaf'', ''Root'', etc.


            MIAPPE V1.1 (DM-78) Plant anatomical entity - A description of  the plant part (e.g. leaf) or the plant product (e.g. resin) from which the sample was taken, in the form of an accession number to a suitable controlled vocabulary (Plant Ontology).'
          example: Root
          type: string
        trialDbId:
          description: The ID which uniquely identifies a trial within the given database server
          example: d34c5349
          type: string
        well:
          description: The Well identifier for this samples location in the plate. Usually a concatenation of Row and Column, or just a number if the samples are not part of an ordered plate.
          example: B6
          type: string
      type: object
    SampleSearchRequest:
      allOf:
      - $ref: '#/components/schemas/SearchRequestParametersPaging'
      - $ref: '#/components/schemas/SearchRequestParametersGermplasm'
      - $ref: '#/components/schemas/SearchRequestParametersStudies'
      - $ref: '#/components/schemas/SearchRequestParametersExternalReferences'
      - properties:
          observationUnitDbIds:
            description: The ID which uniquely identifies an observation unit
            example:
            - 3cd0ca36
            - 983f3b14
            items:
              type: string
            type: array
          plateDbIds:
            description: The ID which uniquely identifies a plate of samples
            example:
            - 0cac98b8
            - b96125fb
            items:
              type: string
            type: array
          sampleDbIds:
            description: The ID which uniquely identifies a sample
            example:
            - 3bece2ca
            - dd286cc6
            items:
              type: string
            type: array
        type: object
    ScaleBaseClass:
      description: Scale metadata
      properties:
        additionalInfo:
          additionalProperties:
            type: string
          description: Additional arbitrary info
          type: object
        dataType:
          $ref: '#/components/schemas/TraitDataType'
        decimalPlaces:
          description: For numerical, number of decimal places to be reported
          example: 2
          type: integer
        externalReferences:
          $ref: '#/components/schemas/ExternalReferences'
        ontologyReference:
          $ref: '#/components/schemas/OntologyReference'
        scaleName:
          description: 'Name of the scale


            MIAPPE V1.1 (DM-92) Scale Name of the scale associated with the variable'
          example: Meters
          type: string
        validValues:
          properties:
            categories:
              description: List of possible values with optional labels
              example:
              - label: low
                value: '0'
              - label: medium
                value: '5'
              - label: high
                value: '10'
              items:
                properties:
                  label:
                    description: A text label for a category
                    type: string
                  value:
                    description: The actual value for a category
                    type: string
                type: object
              type: array
            max:
              description: Maximum value (used for field data capture control).
              example: 9999
              type: integer
            min:
              description: Minimum value (used for data capture control) for numerical and date scales
              example: 2
              type: integer
          type: object
      required:
      - scaleName
      type: object
    SearchRequestParametersCommonCropNames:
      properties:
        commonCropNames:
          description: Common name for the crop which this program is for
          example:
          - Tomatillo
          - Paw Paw
          items:
            type: string
          type: array
      type: object
    SearchRequestParametersExternalReferences:
      properties:
        externalReferenceIDs:
          description: List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)
          example:
          - http://purl.obolibrary.org/obo/ro.owl
          - 14a19841
          items:
            type: string
          type: array
        externalReferenceSources:
          description: List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)
          example:
          - OBO Library
          - Field App Name
          items:
            type: string
          type: array
      type: object
    SearchRequestParametersGermplasm:
      properties:
        germplasmDbIds:
          description: List of IDs which uniquely identify germplasm to search for
          example:
          - e9c6edd7
          - 1b1df4a6
          items:
            type: string
          type: array
        germplasmNames:
          description: List of human readable names to identify germplasm to search for
          example:
          - A0000003
          - A0000477
          items:
            type: string
          type: array
      type: object
    SearchRequestParametersLocations:
      properties:
        locationDbIds:
          description: The location ids to search for
          example:
          - b28911cf
          - 5071d1e4
          items:
            type: string
          type: array
        locationNames:
          description: A human readable names to search for
          example:
          - Location Alpha
          - The Large Hadron Collider
          items:
            type: string
          type: array
      type: object
    SearchRequestParametersObservationVariables:
      properties:
        observationVariableDbIds:
          description: The DbIds of Variables to search for
          example:
          - a646187d
          - 6d23513b
          items:
            type: string
          type: array
        observationVariableNames:
          description: The names of Variables to search for
          example:
          - Plant Height in meters
          - Wheat rust score 1-5
          items:
            type: string
          type: array
      type: object
    SearchRequestParametersPaging:
      properties:
        page:
          description: Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
          example: 0
          type: integer
        pageSize:
          description: The size of the pages to be returned. Default is `1000`.
          example: 1000
          type: integer
      type: object
    SearchRequestParametersPrograms:
      properties:
        programDbIds:
          description: A program identifier to search for
          example:
          - 8f5de35b
          - 0e2d4a13
          items:
            type: string
          type: array
        programNames:
          description: A name of a program to search for
          example:
          - Better Breeding Program
          - Best Breeding Program
          items:
            type: string
          type: array
      type: object
    SearchRequestParametersStudies:
      properties:
        studyDbIds:
          description: List of study identifiers to search for
          example:
          - cf6c4bd4
          - 691e69d6
          items:
            type: string
          type: array
        studyNames:
          description: List of study names to filter search results
          example:
          - The First Bob Study 2017
          - Wheat Yield Trial 246
          items:
            type: string
          type: array
      type: object
    SearchRequestParametersTokenPaging:
      properties:
        pageSize:
          description: The size of the pages to be returned. Default is `1000`.
          example: 1000
          type: integer
        pageToken:
          description: 'Used to request a specific page of data to be returned.


            Tokenized pages are for large data sets which can not be efficiently broken into indexed pages. Use the nextPageToken and prevPageToken from a prior response to construct a query and move to the next or previous page respectively. '
          example: 33c27874
          type: string
      type: object
    SearchRequestParametersTrials:
      properties:
        trialDbIds:
          description: The ID which uniquely identifies a trial to search for
          example:
          - d2593dc2
          - 9431a731
          items:
            type: string
          type: array
        trialNames:
          description: The human readable name of a trial to search for
          example:
          - All Yield Trials 2016
          - Disease Resistance Study Comparison Group
          items:
            type: string
          type: array
      type: object
    TraitBaseClass:
      properties:
        additionalInfo:
          additionalProperties:
            type: string
          description: Additional arbitrary info
          type: object
        alternativeAbbreviations:
          description: Other frequent abbreviations of the trait, if any. These abbreviations do not have to follow a convention
          example:
          - H
          - PH
          - H1
          items:
            type: string
          type: array
        attribute:
          description: A trait can be decomposed as "Trait" = "Entity" + "Attribute", the attribute is the observed feature (or characteristic) of the entity e.g., for "grain colour", attribute = "colour"
          example: height
          type: string
        entity:
          description: A trait can be decomposed as "Trait" = "Entity" + "Attribute", the entity is the part of the plant that the trait refers to e.g., for "grain colour", entity = "grain"
          example: Stalk
          type: string
        externalReferences:
          $ref: '#/components/schemas/ExternalReferences'
        mainAbbreviation:
          description: 'Main abbreviation for trait name. (examples: "Carotenoid content" => "CC")'
          example: PH
          type: string
        ontologyReference:
          $ref: '#/components/schemas/OntologyReference'
        status:
          description: 'Trait status (examples: "recommended", "obsolete", "legacy", etc.)'
          example: recommended
          type: string
        synonyms:
          description: Other trait names
          example:
          - Height
          - Plant Height
          - Stalk Height
          - Canopy Height
          items:
            type: string
          type: array
        traitClass:
          description: 'Trait class. (examples: "morphological", "phenological", "agronomical", "physiological", "abiotic stress", "biotic stress", "biochemical", "quality traits", "fertility", etc.)'
          example: phenological
          type: string
        traitDescription:
          description: The description of a trait
          example: The height of the plant
          type: string
        traitName:
          description: 'The human readable name of a trait


            MIAPPE V1.1 (DM-86) Trait - Name of the (plant or environmental) trait under observation'
          example: Height
          type: string
      type: object
    TraitDataType:
      description: '<p>Class of the scale, entries can be</p>

        <p>"Code" -  This scale class is exceptionally used to express complex traits. Code is a nominal scale that combines the expressions of the different traits composing the complex trait. For example a severity trait might be expressed by a 2 digit and 2 character code. The first 2 digits are the percentage of the plant covered by a fungus and the 2 characters refer to the delay in development, e.g. "75VD" means "75 %" of the plant is infected and the plant is very delayed.</p>

        <p>"Date" - The date class is for events expressed in a time format, See ISO 8601</p>

        <p>"Duration" - The Duration class is for time elapsed between two events expressed in a time format, e.g. days, hours, months</p>

        <p>"Nominal" - Categorical scale that can take one of a limited and fixed number of categories. There is no intrinsic ordering to the categories</p>

        <p>"Numerical" - Numerical scales express the trait with real numbers. The numerical scale defines the unit e.g. centimeter, ton per hectare, branches</p>

        <p>"Ordinal" - Ordinal scales are scales composed of ordered categories</p>

        <p>"Text" - A free text is used to express the trait.</p>'
      enum:
      - Code
      - Date
      - Duration
      - Nominal
      - Numerical
      - Ordinal
      - Text
      example: Numerical
      type: string
    VariableBaseClass:
      properties:
        additionalInfo:
          additionalProperties:
            type: string
          description: Additional arbitrary info
          type: object
        commonCropName:
          description: 'Crop name (examples: "Maize", "Wheat")'
          example: Maize
          type: string
        contextOfUse:
          description: 'Indication of how trait is routinely used. (examples: ["Trial evaluation", "Nursery evaluation"])'
          example:
          - Trial evaluation
          - Nursery evaluation
          items:
            type: string
          type: array
        defaultValue:
          description: 'Variable default value. (examples: "red", "2.3", etc.)'
          example: '2.0'
          type: string
        documentationURL:
          description: A URL to the human readable documentation of this object
          example: https://wiki.brapi.org/documentation.html
          format: uri
          type: string
        externalReferences:
          $ref: '#/components/schemas/ExternalReferences'
        growthStage:
          description: 'Growth stage at which measurement is made (examples: "flowering")'
          example: flowering
          type: string
        institution:
          description: Name of institution submitting the variable
          example: The BrAPI Institute
          type: string
        language:
          description: 2 letter ISO 639-1 code for the language of submission of the variable.
          example: en
          type: string
        method:
          allOf:
          - $ref: '#/components/schemas/MethodBaseClass'
          - properties:
              methodDbId:
                description: Method unique identifier
                example: 0adb2764
                type: string
            type: object
        ontologyReference:
          $ref: '#/components/schemas/OntologyReference'
        scale:
          allOf:
          - $ref: '#/components/schemas/ScaleBaseClass'
          - description: Scale metadata
            properties:
              scaleDbId:
                description: Unique identifier of the scale. If left blank, the upload system will automatically generate a scale ID.
                example: af730171
                type: string
            required:
            - scaleDbId
            type: object
        scientist:
          description: Name of scientist submitting the variable.
          example: Dr. Bob Robertson
          type: string
        status:
          description: 'Variable status. (examples: "recommended", "obsolete", "legacy", etc.)'
          example: recommended
          type: string
        submissionTimestamp:
          description: Timestamp when the Variable was added (ISO 8601)
          format: date-time
          type: string
        synonyms:
          description: Other variable names
          example:
          - Maize Height
          - Stalk Height
          - Corn Height
          items:
            type: string
          type: array
        trait:
          allOf:
          - $ref: '#/components/schemas/TraitBaseClass'
          - properties:
              traitDbId:
                description: The ID which uniquely identifies a trait
                example: 9b2e34f5
                type: string
            type: object
      required:
      - trait
      - method
      - scale
      type: object
    Variant:
      description: 'A `Variant` represents a change in DNA sequence relative to some reference.

        For example, a variant could represent a SNP or an insertion.

        Variants belong to a `VariantSet`.

        This is equivalent to a row in VCF.'
      properties:
        additionalInfo:
          additionalProperties:
            type: string
          description: Additional arbitrary info
          type: object
        alternate_bases:
          description: The bases that appear instead of the reference bases. Multiple alternate alleles are possible.
          example:
          - TAGGATTGAGCTCTATAT
          items:
            type: string
          type: array
        ciend:
          description: Similar to "cipos", but for the variant's end position (which is derived from start + svlen).
          example:
          - -1000
          - 0
          items:
            type: integer
          type: array
        cipos:
          description: 'In the case of structural variants, start and end of the variant may not

            be known with an exact base position. "cipos" provides an interval with

            high confidence for the start position. The interval is provided by 0 or

            2 signed integers which are added to the start position.

            Based on the use in VCF v4.2'
          example:
          - -12000
          - 1000
          items:
            type: integer
          type: array
        created:
          description: The timestamp when this variant was created.
          format: date-time
          type: string
        end:
          description: "This field is optional and may be ignored if there is no relevant map or reference to be associated with.\n\nThe end position (exclusive), resulting in [start, end) closed-open interval. This is typically calculated \nby `start + referenceBases.length`."
          example: 518
          type: integer
        filtersApplied:
          description: True if filters were applied for this variant. VCF column 7 "FILTER" any value other than the missing value.
          example: true
          format: boolean
          type: boolean
        filtersFailed:
          description: Zero or more filters that failed for this variant. VCF column 7 "FILTER" shared across all alleles in the same VCF record.
          example:
          - d629a669
          - 3f14f578
          items:
            type: string
          type: array
        filtersPassed:
          description: True if all filters for this variant passed. VCF column 7 "FILTER" value PASS.
          example: true
          format: boolean
          type: boolean
        referenceBases:
          description: The reference bases for this variant. They start at the given start position.
          example: TAGGATTGAGCTCTATAT
          type: string
        referenceName:
          description: The reference on which this variant occurs. (e.g. `chr_20` or `X`)
          example: chr_20
          type: string
        start:
          description: "This field is optional and may be ignored if there is no relevant map or reference to be associated with.\n\nThe start position at which this variant occurs (0-based). This corresponds to the first base of the string \nof reference bases. Genomic positions are non-negative integers less than reference length. Variants spanning \nthe join of circular genomes are represented as two variants one on each side of the join (position 0)."
          example: 500
          type: integer
        svlen:
          description: Length of the - if labeled as such in variant_type - structural variation. Based on the use in VCF v4.2
          example: 1500
          type: integer
        updated:
          description: The time at which this variant was last updated.
          format: date-time
          type: string
        variantDbId:
          description: The variant ID.
          example: 628e89c5
          type: string
        variantNames:
          description: Names for the variant, for example a RefSNP ID.
          example:
          - RefSNP_ID_1
          - 06ea312e
          items:
            type: string
          type: array
        variantSetDbId:
          description: An array of `VariantSet` IDs this variant belongs to. This also defines the `ReferenceSet` against which the `Variant` is to be interpreted.
          example:
          - c8ae400b
          - ef2c204b
          items:
            type: string
          type: array
        variantType:
          description: "The \"variant_type\" is used to denote e.g. structural variants.\nExamples:\n  DUP  : duplication of sequence following \"start\"\n  DEL  : deletion of sequence following \"start\""
          example: DUP
          type: string
      type: object
    VariantSet:
      description: A VariantSet is a collection of variants and variant calls intended to be analyzed together.
      properties:
        additionalInfo:
          additionalProperties:
            type: string
          description: Additional arbitrary info
          type: object
        analysis:
          description: Set of Analysis descriptors for this VariantSet
          items:
            $ref: '#/components/schemas/Analysis'
          type: array
        availableFormats:
          description: "When the data for a VariantSet is retrieved, it can be retrieved in a variety of data formats and file formats. \n\ndataFormat defines the structure of the data within a file (ie DartSeq, VCF, Hapmap, tabular, etc)\n\nfileFormat defines the MIME type of the file (ie text/csv, application/excel, application/zip). This should also be reflected in the Accept and ContentType HTTP headers for every relevant request and response."
          example:
          - dataFormat: VCF
            fileFormat: application/excel
            fileURL: https://brapi.org/example/VCF_1.xlsx
          - dataFormat: VCF
            fileFormat: text/csv
            fileURL: https://brapi.org/example/VCF_2.csv
          items:
            description: Each 'availableFormat' object is a pairing of dataFormat and fileFormat. These must be communicated in pairs because they are not independant parameters and sometimes one influences the other.
            properties:
              dataFormat:
                description: dataFormat defines the structure of the data within a file (ie DartSeq, VCF, Hapmap, tabular, etc)
                enum:
                - DartSeq
                - VCF
                - Hapmap
                - tabular
                - JSON
                type: string
              fileFormat:
                description: fileFormat defines the MIME type of the file (ie text/csv, application/excel, application/zip). This should also be reflected in the Accept and ContentType HTTP headers for every relevant request and response.
                enum:
                - text/csv
                - text/tsv
                - application/excel
                - application/zip
                - application/json
                type: string
              fileURL:
                description: A URL which indicates the location of the file version of this VariantSet. Could be a static file URL or an API endpoint which generates the file.
                format: uri
                type: string
            type: object
          type: array
        callSetCount:
          description: The number of CallSets included in this VariantSet
          example: 341
          type: integer
        referenceSetDbId:
          description: The ID of the reference set that describes the sequences used by the variants in this set.
          example: 57eae639
          type: string
        studyDbId:
          description: The ID of the dataset this variant set belongs to.
          example: 2fc3b034
          type: string
        variantCount:
          description: The number of Variants included in this VariantSet
          example: 250
          type: integer
        variantSetDbId:
          description: The variant set ID.
          example: 87a6ac1e
          type: string
        variantSetName:
          description: The variant set name.
          example: Maize QC DataSet 002334
          type: string
      type: object
    VariantSetsExtractRequest:
      allOf:
      - $ref: '#/components/schemas/SearchRequestParametersStudies'
      - description: Request object for extracting data subsets as new Variant Sets
        properties:
          callSetDbIds:
            description: The CallSet to search.
            example:
            - 9569cfc4
            - da1e888c
            items:
              type: string
            type: array
          expandHomozygotes:
            description: Should homozygotes be expanded (true) or collapsed into a single occurence (false)
            example: true
            type: boolean
          sepPhased:
            description: The string used as a separator for phased allele calls.
            example: '~'
            type: string
          sepUnphased:
            description: The string used as a separator for unphased allele calls.
            example: '|'
            type: string
          unknownString:
            description: The string used as a representation for missing data.
            example: '-'
            type: string
          variantDbIds:
            description: The Variant to search.
            example:
            - c80f068b
            - eb7c5f50
            items:
              type: string
            type: array
          variantSetDbIds:
            description: The VariantSet to search.
            example:
            - b2903842
            - dcbb8558
            items:
              type: string
            type: array
        type: object
    VariantSetsSearchRequest:
      allOf:
      - $ref: '#/components/schemas/SearchRequestParametersPaging'
      - $ref: '#/components/schemas/SearchRequestParametersStudies'
      - properties:
          callSetDbIds:
            description: The CallSet to search.
            example:
            - 9569cfc4
            - da1e888c
            items:
              type: string
            type: array
          variantDbIds:
            description: The Variant to search.
            example:
            - c80f068b
            - eb7c5f50
            items:
              type: string
            type: array
          variantSetDbIds:
            description: The VariantSet to search.
            example:
            - b2903842
            - dcbb8558
            items:
              type: string
            type: array
        type: object
    VendorContact:
      properties:
        vendorAddress:
          description: The street address of the vendor
          example: 123 Main Street
          type: string
        vendorCity:
          description: The name of the city where the vendor is located
          example: Townsville
          type: string
        vendorContactName:
          description: The name or identifier of the primary vendor contact
          example: Bob Robertson
          type: string
        vendorCountry:
          description: The name of the country where the vendor is located
          example: USA
          type: string
        vendorDescription:
          description: A description of the vendor
          example: This is a sequencing vendor. Sequencing happens here.
          type: string
        vendorEmail:
          description: The primary email address used to contact the vendor
          example: bob@bob.org
          type: string
        vendorName:
          description: The human readable name of the vendor
          example: The Example Vendor Lab
          type: string
        vendorPhone:
          description: The primary phone number used to contact the vendor
          example: +1-800-555-5555
          type: string
        vendorURL:
          description: The primary URL for the vendor
          example: https://sequencing.org/vendor
          type: string
      required:
      - vendorName
      type: object
    VendorOrder:
      description: The details of a vendor order
      properties:
        clientId:
          description: A unique, alpha-numeric ID which identifies the client to the vendor. Used to connect the order to the correct billing and contact info.
          example: 7b51ad15
          type: string
        numberOfSamples:
          description: The total number of samples contained in this request. Used for billing and basic validation of the request.
          example: 180
          type: integer
        orderId:
          description: The order id returned by the vendor when the order was successfully submitted.
          example: 96ba0ca3
          type: string
        requiredServiceInfo:
          additionalProperties:
            type: string
          description: A map of additional data required by the requested service. This includes things like Volume and Concentration.
          example:
            extractDNA: 'true'
            genus: Zea
            species: mays
            volumePerWell: 2.3 ml
          type: object
        serviceIds:
          description: "A list of unique, alpha-numeric ID which identify the requested services to be applied to this order. \nA Vendor Service defines what platform, technology, and markers will be used. \nA list of available service IDs can be retrieved from the Vendor Specs."
          example:
          - e8f60f64
          - 05bd925a
          - b698fb5e
          items:
            type: string
          type: array
      required:
      - clientId
      - numberOfSamples
      - orderId
      - serviceIds
      type: object
    VendorOrderSubmission:
      description: Response to an order request
      properties:
        orderId:
          description: A unique, alpha-numeric ID which identifies the order
          example: b5144468
          type: string
        shipmentForms:
          description: Array of paper forms which need to be printed and included with the physical shipment
          items:
            properties:
              fileDescription:
                description: The human readable long description for this form
                example: This is a shipment manifest form
                type: string
              fileName:
                description: The human readable name for this form
                example: Shipment Manifest
                type: string
              fileURL:
                description: The URL to download this form
                example: https://vendor.org/forms/manifest.pdf
                format: uri
                type: string
            required:
            - fileURL
            title: ShipmentForm
            type: object
          type: array
      required:
      - orderId
      type: object
    VendorOrderSubmissionRequest:
      allOf:
      - $ref: '#/components/schemas/VendorPlateSubmissionRequest'
      - description: Request object structure to submit plate data to a vendor
        properties:
          requiredServiceInfo:
            additionalProperties:
              type: string
            description: A map of additional data required by the requested service. This includes things like Volume and Concentration.
            example:
              extractDNA: true
              genus: Zea
              species: mays
              volumePerWell: 2.3 ml
            type: object
          serviceIds:
            description: "A list of unique, alpha-numeric ID which identify the requested services to be applied to this order. \nA Vendor Service defines what platform, technology, and markers will be used. \nA list of available service IDs can be retrieved from the Vendor Specs."
            example:
            - e8f60f64
            - 05bd925a
            - b698fb5e
            items:
              type: string
            type: array
        required:
        - serviceIds
        type: object
    VendorPlate:
      properties:
        clientPlateBarcode:
          description: (Optional) The value of the bar code attached to this plate
          example: 31dd5787
          type: string
        clientPlateId:
          description: The ID which uniquely identifies this plate to the client making the request
          example: 0ad6c0ef
          type: string
        sampleSubmissionFormat:
          $ref: '#/components/schemas/PlateFormat'
        samples:
          items:
            $ref: '#/components/schemas/VendorSample'
          type: array
      type: object
    VendorPlateSubmission:
      description: Response of a plate submission
      properties:
        clientId:
          description: A unique, alpha-numeric ID which identifies the client to the vendor. Used to connect the order to the contract, billing, and contact info.
          example: e470ae0d
          type: string
        numberOfSamples:
          description: The total number of samples contained in this request. Used for billing and basic validation of the request.
          example: 180
          type: integer
        plates:
          description: Array of new plates to be submitted to a vendor
          items:
            properties:
              clientPlateBarcode:
                description: (Optional) The value of the bar code attached to this plate
                example: bfb33593
                type: string
              clientPlateId:
                description: The ID which uniquely identifies this plate to the client making the request
                example: dae8f49d
                type: string
              sampleSubmissionFormat:
                $ref: '#/components/schemas/PlateFormat'
              samples:
                items:
                  $ref: '#/components/schemas/VendorSample'
                type: array
            type: object
          type: array
      required:
      - clientId
      - numberOfSamples
      - plates
      type: object
    VendorPlateSubmissionId:
      description: Response to an order request
      properties:
        submissionId:
          description: A unique, alpha-numeric ID which identifies a set of plates which have been successfully submitted.
          example: f8f409e0
          type: string
      required:
      - submissionId
      type: object
    VendorPlateSubmissionRequest:
      description: Request object structure to submit plate data to a vendor
      properties:
        clientId:
          description: A unique, alpha-numeric ID which identifies the client to the vendor. Used to connect the order to the contract, billing, and contact info.
          example: b8aac350
          type: string
        numberOfSamples:
          description: The total number of samples contained in this request. Used for billing and basic validation of the request.
          example: 180
          type: integer
        plates:
          description: Array of new plates to be submitted to a vendor
          items:
            properties:
              clientPlateBarcode:
                description: (Optional) The value of the bar code attached to this plate
                example: 6ebf3f25
                type: string
              clientPlateId:
                description: The ID which uniquely identifies this plate to the client making the request
                example: 02a8d6f0
                type: string
              sampleSubmissionFormat:
                $ref: '#/components/schemas/PlateFormat'
              samples:
                items:
                  $ref: '#/components/schemas/VendorSample'
                type: array
            type: object
          type: array
        sampleType:
          description: The type of Samples being submitted
          enum:
          - DNA
          - RNA
          - Tissue
          example: Tissue
          type: string
      required:
      - clientId
      - numberOfSamples
      - plates
      - sampleType
      type: object
    VendorResultFile:
      properties:
        additionalInfo:
          additionalProperties:
            type: string
          description: Additional arbitrary info
          type: object
        clientSampleIds:
          description: The list of sampleDbIds included in the file
          example:
          - 3968733e
          - e0de6391
          - '66854172'
          items:
            type: string
          type: array
        fileName:
          description: Name of the file
          example: sequence_data_ce640bd3.csv
          type: string
        fileType:
          description: Format of the file
          example: text/csv
          type: string
        fileURL:
          description: The URL to a file with the results of a vendor analysis
          example: https://vendor.org/data/sequence_data_ce640bd3.csv
          format: uri
          type: string
        md5sum:
          description: MD5 Hash Check Sum for the file to confirm download without error
          example: c2365e900c81a89cf74d83dab60df146
          type: string
      required:
      - fileURL
      - fileType
      - fileName
      - clientSampleIds
      type: object
    VendorSample:
      properties:
        clientSampleBarCode:
          description: (Optional) The value of the bar code attached to this sample
          example: 7c07e527
          type: string
        clientSampleId:
          description: The ID which uniquely identifies this sample to the client making the request
          example: bd96bd69
          type: string
        column:
          description: The Column identifier for this samples location in the plate
          example: 6
          maximum: 12
          minimum: 1
          type: integer
        comments:
          description: Generic comments about this sample for the vendor
          example: This is my favorite sample, please be extra careful with it.
          type: string
        concentration:
          $ref: '#/components/schemas/Measurement'
        organismName:
          description: Scientific organism name
          example: Aspergillus fructus
          type: string
        row:
          description: The Row identifier for this samples location in the plate
          example: B
          type: string
        speciesName:
          description: Scientific species name
          example: Aspergillus fructus
          type: string
        taxonomyOntologyReference:
          $ref: '#/components/schemas/OntologyReference'
        tissueType:
          description: The type of tissue in this sample. List of accepted tissue types can be found in the Vendor Specs.
          example: Root
          type: string
        tissueTypeOntologyReference:
          $ref: '#/components/schemas/OntologyReference'
        volume:
          $ref: '#/components/schemas/Measurement'
        well:
          description: The Well identifier for this samples location in the plate. Usually a concatenation of Row and Column, or just a number if the samples are not part of an ordered plate.
          example: B6
          type: string
      required:
      - clientSampleId
      type: object
    VendorSpecification:
      properties:
        additionalInfo:
          additionalProperties:
            type: object
          description: Additional arbitrary information specific to a particular Vendor. Look for the Vendors specific API documentation for more details
          type: object
        services:
          description: List of platform specifications available at the vendor
          items:
            $ref: '#/components/schemas/VendorSpecificationService'
          type: array
        vendorContact:
          $ref: '#/components/schemas/VendorContact'
      type: object
    VendorSpecificationService:
      properties:
        serviceDescription:
          description: Description of the vendor platform
          example: A combined DNA extract and Sequencing process using technology and science. Lots of automated pipet machines.
          type: string
        serviceId:
          description: Unique identifier for this service
          example: 085d298f
          type: string
        serviceName:
          description: The human readable name of a platform
          example: The Deluxe Service
          type: string
        servicePlatformMarkerType:
          description: The type of markers used in this services platform
          enum:
          - FIXED
          - DISCOVERABLE
          example: FIXED
          type: string
        servicePlatformName:
          description: The technology platform used by this service
          example: RNA-seq
          type: string
        specificRequirements:
          description: Additional arbitrary requirements for a particular platform
          example:
          - description: The genus of the samples
            key: genus
          - description: The species of the samples
            key: species
          - description: Approximate volume of each sample (ex 2.3 ml)
            key: volumePerWell
          - description: Does DNA extraction need to happen before sequencing (ex true)
            key: extractDNA
          items:
            properties:
              description:
                type: string
              key:
                type: string
            type: object
          type: array
      required:
      - serviceId
      - serviceName
      type: object
    WSMIMEDataTypes:
      enum:
      - application/json
      - text/csv
      - text/tsv
      - application/flapjack
      type: string
    basePagination:
      properties:
        pageSize:
          default: 1000
          description: The number of data elements returned, aka the size of the current page. If the requested page does not have enough elements to fill a page at the requested page size, this field should indicate the actual number of elements returned.
          example: 1000
          type: integer
        totalCount:
          description: The total number of elements that are available on the server and match the requested query parameters.
          example: 10
          type: integer
        totalPages:
          description: "The total number of pages of elements available on the server. This should be calculated with the following formula. \n\ntotalPages = CEILING( totalCount / requested_page_size)"
          example: 1
          type: integer
      required:
      - pageSize
      type: object
    callSetsSearchRequest:
      allOf:
      - $ref: '#/components/schemas/SearchRequestParametersPaging'
      - $ref: '#/components/schemas/SearchRequestParametersGermplasm'
      - properties:
          callSetDbIds:
            description: Only return call sets with these DbIds (case-sensitive, exact match).
            example:
            - 6c7486b2
            - 49c36a73
            items:
              type: string
            type: array
          callSetNames:
            description: Only return call sets with these names (case-sensitive, exact match).
            example:
            - Sample_123_DNA_Run_456
            - Sample_789_DNA_Run_101
            items:
              type: string
            type: array
          sampleDbIds:
            description: Return only call sets generated from the provided Biosample IDs.
            example:
            - 758d3f6d
            - 39c0a3f7
            items:
              type: string
            type: array
          sampleNames:
            description: Return only call sets generated from the provided Biosample human readable names.
            example:
            - Sample_123
            - Sample_789
            items:
              type: string
            type: array
          variantSetDbIds:
            description: The VariantSet to search.
            example:
            - 8a9a8972
            - 32a2649a
            items:
              type: string
            type: array
        type: object
    callsSearchRequest:
      allOf:
      - $ref: '#/components/schemas/SearchRequestParametersTokenPaging'
      - properties:
          callSetDbIds:
            description: The CallSet to search.
            example:
            - a03202ec
            - 274e4f63
            items:
              type: string
            type: array
          expandHomozygotes:
            description: Should homozygotes be expanded (true) or collapsed into a single occurence (false)
            example: true
            type: boolean
          sepPhased:
            description: The string used as a separator for phased allele calls.
            example: '~'
            type: string
          sepUnphased:
            description: The string used as a separator for unphased allele calls.
            example: '|'
            type: string
          unknownString:
            description: The string used as a representation for missing data.
            example: '-'
            type: string
          variantDbIds:
            description: The Variant to search.
            example:
            - bba0b258
            - ff97d4f0
            items:
              type: string
            type: array
          variantSetDbIds:
            description: The VariantSet to search.
            example:
            - 407c0508
            - 49e24dfc
            items:
              type: string
            type: array
        type: object
    dataFile:
      description: A dataFile contains a URL and the relevant file metadata to represent a file
      properties:
        fileDescription:
          description: A human readable description of the file contents
          example: This is an Excel data file
          type: string
        fileMD5Hash:
          description: The MD5 Hash of the file contents to be used as a check sum
          example: c2365e900c81a89cf74d83dab60df146
          type: string
        fileName:
          description: The name of the file
          example: datafile.xlsx
          type: string
        fileSize:
          description: The size of the file in bytes
          example: 4398
          type: integer
        fileType:
          description: The type or format of the file. Preferably MIME Type.
          example: application/vnd.ms-excel
          type: string
        fileURL:
          description: The absolute URL where the file is located
          example: https://wiki.brapi.org/examples/datafile.xlsx
          format: uri
          type: string
      required:
      - fileURL
      type: object
    geoJSON:
      description: 'One geometry as defined by GeoJSON (RFC 7946). All coordinates are decimal values on the WGS84 geographic coordinate reference system.


        Copied from RFC 7946 Section 3.1.1


        A position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or

        easting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.'
      properties:
        geometry:
          description: A geometry as defined by GeoJSON (RFC 7946). In this context, only Point or Polygon geometry are allowed.
          discriminator:
            mapping:
              Point: '#/components/schemas/pointGeometry'
              Polygon: '#/components/schemas/polygonGeometry'
            propertyName: type
          example:
            coordinates:
            - -76.506042
            - 42.417373
            - 123
            type: Point
          oneOf:
          - $ref: '#/components/schemas/pointGeometry'
          - $ref: '#/components/schemas/polygonGeometry'
          title: GeoJSON Geometry
          type: object
        type:
          default: Feature
          description: The literal string "Feature"
          example: Feature
          type: string
      title: GeoJSON
      type: object
    geoJSONSearchArea:
      allOf:
      - $ref: '#/components/schemas/geoJSON'
      - description: "A GeoJSON Polygon which describes an area to search for other GeoJSON objects. All contained Points and intersecting Polygons should be returned as search results. \n\nAll coordinates are decimal values on the WGS84 geographic coordinate reference system."
        example:
          geometry:
            coordinates:
            - - - -77.456654
                - 42.241133
              - - -75.414133
                - 41.508282
              - - -76.506042
                - 42.417373
              - - -77.456654
                - 42.241133
            type: Polygon
          type: Feature
        properties: {}
        title: GeoJSONSearchArea
        type: object
    indexPagination:
      allOf:
      - $ref: '#/components/schemas/basePagination'
      - description: "The pagination object is applicable only when the payload contains a \"data\" key. It describes the pagination of the data contained in the \"data\" array, as a way to identify which subset of data is being returned. \n\nPages are zero indexed, so the first page will be page 0 (zero)."
        properties:
          currentPage:
            default: 0
            description: The index number for the returned page of data. This should always match the requested page number or the default page (0).
            example: 0
            type: integer
        required:
        - currentPage
        type: object
    linearRing:
      description: An array of at least four positions where the first equals the last
      example:
      - - -77.456654
        - 42.241133
        - 494
      - - -75.414133
        - 41.508282
        - 571
      - - -76.506042
        - 42.417373
        - 123
      - - -77.456654
        - 42.241133
        - 346
      items:
        $ref: '#/components/schemas/position'
      minItems: 4
      type: array
    metadata:
      allOf:
      - $ref: '#/components/schemas/metadataBase'
      - properties:
          pagination:
            $ref: '#/components/schemas/indexPagination'
        type: object
    metadataBase:
      properties:
        datafiles:
          description: "The datafiles contains a list of file URLs and metadata. \nThese files contain additional information related to the returned object and can be retrieved by a subsequent call. \nThis could be a supplementary data file, an informational file, the uploaded file where the data originated from, a generated file representing the whole dataset in a particular format, or any other related file. "
          items:
            $ref: '#/components/schemas/dataFile'
          type: array
        status:
          description: "The status field contains a list of informational status messages from the server. \nIf no status is reported, an empty list should be returned. See Error Reporting for more information."
          items:
            $ref: '#/components/schemas/status'
          type: array
      type: object
    metadataTokenPagination:
      allOf:
      - $ref: '#/components/schemas/metadataBase'
      - properties:
          pagination:
            $ref: '#/components/schemas/tokenPagination'
        type: object
    pointGeometry:
      description: 'Copied from RFC 7946 Section 3.1.1


        A position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or

        easting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.'
      properties:
        coordinates:
          $ref: '#/components/schemas/position'
        type:
          default: Point
          description: The literal string "Point"
          example: Point
          type: string
      type: object
    polygon:
      description: An array of linear rings
      example:
      - - - -77.456654
          - 42.241133
          - 494
        - - -75.414133
          - 41.508282
          - 571
        - - -76.506042
          - 42.417373
          - 123
        - - -77.456654
          - 42.241133
          - 346
      items:
        $ref: '#/components/schemas/linearRing'
      type: array
    polygonGeometry:
      description: "An array of Linear Rings. Each Linear Ring is an array of Points. \n\nA Point is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element."
      properties:
        coordinates:
          $ref: '#/components/schemas/polygon'
        type:
          default: Polygon
          description: The literal string "Polygon"
          example: Polygon
          type: string
      type: object
    position:
      description: A single position
      example:
      - -76.506042
      - 42.417373
      - 123
      items:
        type: number
      minItems: 2
      type: array
    status:
      description: An array of status messages to convey technical logging information from the server to the client.
      properties:
        message:
          description: A short message concerning the status of this request/response
          example: Request accepted, response successful
          type: string
        messageType:
          description: The logging level for the attached message
          enum:
          - DEBUG
          - ERROR
          - WARNING
          - INFO
          example: INFO
          type: string
      required:
      - message
      - messageType
      type: object
    tokenPagination:
      allOf:
      - $ref: '#/components/schemas/basePagination'
      - description: "The pagination object is applicable only when the payload contains a \"data\" key. It describes the pagination of the data contained in the \"data\" array, as a way to identify which subset of data is being returned. \n\nTokenized pages are for large data sets which can not be efficiently broken into indexed pages. Use the nextPageToken and prevPageToken to construct an additional query and move to the next or previous page respectively.  "
        properties:
          currentPageToken:
            description: The string token used to query the current page of data.
            example: 48bc6ac1
            type: string
          nextPageToken:
            description: The string token used to query the next page of data.
            example: cb668f63
            type: string
          prevPageToken:
            description: The string token used to query the previous page of data.
            example: 9659857e
            type: string
        required:
        - nextPageToken
        type: object
    variantsSearchRequest:
      allOf:
      - $ref: '#/components/schemas/SearchRequestParametersTokenPaging'
      - properties:
          callSetDbIds:
            description: Only return variant calls which belong to call sets with these IDs. If unspecified, return all variants and no variant call objects.
            example:
            - 4639fe3e
            - b60d900b
            items:
              type: string
            type: array
          end:
            description: The end of the window (0-based, exclusive) for which overlapping variants should be returned.
            example: 1500
            type: integer
          referenceDbId:
            description: Only return variants on this reference.
            example: 120a2d5c
            type: string
          start:
            description: The beginning of the window (0-based, inclusive) for which overlapping variants should be returned. Genomic positions are non-negative integers less than reference length. Requests spanning the join of circular genomes are represented as two requests one on each side of the join (position 0).
            example: 100
            type: integer
          variantDbIds:
            description: The `Variant`s to search.
            example:
            - 3b63d889
            - ab4d174d
            items:
              type: string
            type: array
          variantSetDbIds:
            description: The `VariantSet` to search.
            example:
            - ba63d810
            - 434d1760
            items:
              type: string
            type: array
        type: object
  securitySchemes:
    AuthorizationToken:
      bearerFormat: nonce token or JWT
      description: OAuth Bearer Token - A valid Bearer token to prove authorization
      scheme: bearer
      type: http
info:
  description: "The Breeding API (BrAPI) is a Standardized REST ful Web Service API Specification for communicating Plant Breeding Data. BrAPI allows for easy data sharing between databases and tools involved in plant breeding.\n<div class=\"brapi-section\">\n<h2 class=\"brapi-section-title\">General Reference Documentation</h2>\n<div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/URL_Structure.md\">URL Structure</a></div>\n<div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Response_Structure.md\">Response Structure</a></div>\n<div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Date_Time_Encoding.md\">Date/Time Encoding</a></div>\n<div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Location_Encoding.md\">Location Encoding</a></div>\n<div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Error_Handling.md\">Error Handling</a></div>\n<div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Search_Services.md\">Search Services</a></div>\n</div>\n\n<div class=\"brapi-section\">\n<h2 class=\"brapi-section-title\">BrAPI Core</h2>\n<div class=\"brapi-section-description\">The BrAPI Core module contains high level entities used for organization and management. This includes Programs, Trials, Studies, Locations, People, and Lists</div>\n<div class=\"version-number\">V2.0</div>\n<div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Core\">GitHub</a></div>\n<div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Core\">SwaggerHub</a></div>\n<div class=\"link-btn\"><a href=\"https://brapicore.docs.apiary.io\">Apiary</a></div>\n<div class=\"stop-float\"></div>\n</div>\n\n<div class=\"brapi-section\">\n<h2 class=\"brapi-section-title\">BrAPI Phenotyping</h2>\n<div class=\"brapi-section-description\">The BrAPI Phenotyping module contains entities related to phenotypic observations. This includes Observation Units, Observations, Observation Variables, Traits, Scales, Methods, and Images</div>\n<div class=\"version-number\">V2.0</div>\n<div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Phenotyping\">GitHub</a></div>\n<div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Phenotyping\">SwaggerHub</a></div>\n<div class=\"link-btn\"><a href=\"https://brapiphenotyping.docs.apiary.io\">Apiary</a></div>\n<div class=\"stop-float\"></div>\n</div>\n\n<div class=\"current-brapi-section brapi-section\">\n<h2 class=\"brapi-section-title\">BrAPI Genotyping</h2>\n<div class=\"brapi-section-description\">The BrAPI Genotyping module contains entities related to genotyping analysis. This includes Samples, Markers, Variant Sets, Variants, Call Sets, Calls, References, Reads, and Vendor Orders</div>\n<div class=\"version-number\">V2.0</div>\n<div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Genotyping\">GitHub</a></div>\n<div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Genotyping\">SwaggerHub</a></div>\n<div class=\"link-btn\"><a href=\"https://brapigenotyping.docs.apiary.io\">Apiary</a></div>\n<div class=\"stop-float\"></div>\n</div>\n\n<div class=\"brapi-section\">\n<h2 class=\"brapi-section-title\">BrAPI Germplasm</h2>\n<div class=\"brapi-section-description\">The BrAPI Germplasm module contains entities related to germplasm management. This includes Germplasm, Germplasm Attributes, Seed Lots, Crosses, Pedigree, and Progeny</div>\n<div class=\"version-number\">V2.0</div>\n<div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Germplasm\">GitHub</a></div>\n<div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Germplasm\">SwaggerHub</a></div>\n<div class=\"link-btn\"><a href=\"https://brapigermplasm.docs.apiary.io\">Apiary</a></div>\n<div class=\"stop-float\"></div>\n</div>\n\n<style>\n.link-btn{\nfloat: left; \nmargin: 2px 10px 0 0; \npadding: 0 5px; \nborder-radius: 5px; \nbackground-color: #ddd;\n}\n.stop-float{\n  clear: both;\n}\n.version-number{\n  float: left; \n  margin: 5px 10px 0 5px;\n}\n.brapi-section-title{\n  margin: 0 10px 0 0;\n  font-size: 20px;\n}\n.current-brapi-section{\n  font-weight: bolder;\n  border-radius: 5px; \n  background-color: #ddd;\n}\n.brapi-section{\n  padding: 5px 5px; \n}\n.brapi-section-description{\n  margin: 5px 0 0 5px;\n}\n</style>"
  title: BrAPI-Genotyping
  version: '2.0'
openapi: 3.0.0
paths:
  /calls:
    get:
      description: 'Gets a filtered list of `Call` JSON objects.


        ** THIS ENDPOINT USES TOKEN BASED PAGING **'
      parameters:
      - description: The ID of the `CallSet` to be retrieved.
        in: query
        name: callSetDbId
        required: false
        schema:
          type: string
      - description: The ID of the `Variant` to be retrieved.
        in: query
        name: variantDbId
        required: false
        schema:
          type: string
      - description: The ID of the `VariantSet` to be retrieved.
        in: query
        name: variantSetDbId
        required: false
        schema:
          type: string
      - description: Should homozygotes be expanded (true) or collapsed into a single occurence (false)
        in: query
        name: expandHomozygotes
        required: false
        schema:
          type: boolean
      - description: The string to use as a representation for missing data
        in: query
        name: unknownString
        required: false
        schema:
          type: string
      - description: The string to use as a separator for phased allele calls
        in: query
        name: sepPhased
        required: false
        schema:
          type: string
      - description: The string to use as a separator for unphased allele calls
        in: query
        name: sepUnphased
        required: false
        schema:
          type: string
      - $ref: '#/components/parameters/pageToken'
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/authorizationHeader'
      responses:
        '200':
          $ref: '#/components/responses/CallsListResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
      summary: Gets a filtered list of `Calls`
      tags:
      - Calls
  /callsets:
    get:
      description: Gets a filtered list of `CallSet` JSON objects.
      parameters:
      - description: The ID of the `CallSet` to be retrieved.
        in: query
        name: callSetDbId
        required: false
        schema:
          type: string
      - description: The human readable name of the `CallSet` to be retrieved.
        in: query
        name: callSetName
        required: false
        schema:
          type: string
      - description: The ID of the `VariantSet` to be retrieved.
        in: query
        name: variantSetDbId
        required: false
        schema:
          type: string
      - description: The ID of the `VariantSet` to be retrieved.
        in: query
        name: sampleDbId
        required: false
        schema:
          type: string
      - description: Return only call sets generated from the Sample of this Germplasm
        in: query
        name: germplasmDbId
        required: false
        schema:
          type: string
      - $ref: '#/components/parameters/page'
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/authorizationHeader'
      responses:
        '200':
          $ref: '#/components/responses/CallSetsListResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
      summary: Gets a filtered list of `CallSet` JSON objects.
      tags:
      - Call Sets
  /callsets/{callSetDbId}:
    get:
      description: Gets a `CallSet` by ID.
      parameters:
      - description: The ID of the `CallSet` to be retrieved.
        in: path
        name: callSetDbId
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/authorizationHeader'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
                  metadata:
                    $ref: '#/components/schemas/metadata'
                  result:
                    $ref: '#/components/schemas/CallSet'
                required:
                - metadata
                - result
                title: callSetResponse
                type: object
          description: OK
          headers: {}
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
      summary: Gets a `CallSet` by ID.
      tags:
      - Call Sets
  /callsets/{callSetDbId}/calls:
    get:
      description: 'Gets a list of `Calls` associated with a `CallSet`.


        ** THIS ENDPOINT USES TOKEN BASED PAGING **'
      parameters:
      - description: The ID of the `CallSet` to be retrieved.
        in: path
        name: callSetDbId
        required: true
        schema:
          type: string
      - description: Should homozygotes be expanded (true) or collapsed into a single occurence (false)
        in: query
        name: expandHomozygotes
        required: false
        schema:
          type: boolean
      - description: The string to use as a representation for missing data
        in: query
        name: unknownString
        required: false
        schema:
          type: string
      - description: The string to use as a separator for phased allele calls
        in: query
        name: sepPhased
        required: false
        schema:
          type: string
      - description: The string to use as a separator for unphased allele calls
        in: query
        name: sepUnphased
        required: false
        schema:
          type: string
      - $ref: '#/components/parameters/pageToken'
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/authorizationHeader'
      responses:
        '200':
          $ref: '#/components/responses/CallsListResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
      summary: Gets a list of `Calls` associated with a `CallSet`.
      tags:
      - Call Sets
  /maps:
    get:
      description: Get list of maps
      parameters:
      - description: The common name of the crop
        in: query
        name: commonCropName
        required: false
        schema:
          type: string
      - description: The primary DbId for this genomic map
        in: query
        name: mapDbId
        required: false
        schema:
          type: string
      - description: The DOI or other permanent identifier for this genomic map
        in: query
        name: mapPUI
        required: false
        schema:
          type: string
      - description: Full scientific binomial format name. This includes Genus, Species, and Sub-species
        in: query
        name: scientificName
        required: false
        schema:
          type: string
      - description: Type of map
        in: query
        name: type
        required: false
        schema:
          enum:
          - physical
          - genomic
          type: string
      - description: Unique Id to filter by Program
        in: query
        name: programDbId
        required: false
        schema:
          type: string
      - description: Unique Id to filter by Trial
        in: query
        name: trialDbId
        required: false
        schema:
          type: string
      - description: Unique Id to filter by Study
        in: query
        name: studyDbId
        required: false
        schema:
          type: string
      - $ref: '#/components/parameters/page'
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/authorizationHeader'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
                  metadata:
                    $ref: '#/components/schemas/metadata'
                  result:
                    properties:
                      data:
                        items:
                          $ref: '#/components/schemas/GenomeMap'
                        type: array
                    required:
                    - data
                    type: object
                required:
                - metadata
                - result
                title: GenomeMapListResponse
                type: object
          description: OK
          headers: {}
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
      summary: Get the Genomic Maps
      tags:
      - Genome Maps
  /maps/{mapDbId}:
    get:
      description: Provides the number of markers on each linkageGroup and the max position on the linkageGroup
      parameters:
      - description: The internal db id of a selected map
        in: path
        name: mapDbId
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/authorizationHeader'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
                  metadata:
                    $ref: '#/components/schemas/metadata'
                  result:
                    $ref: '#/components/schemas/GenomeMap'
                required:
                - metadata
                - result
                title: GenomeMapSingleResponse
                type: object
          description: OK
          headers: {}
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
      summary: Get the details of a specific Genomic Map
      tags:
      - Genome Maps
  /maps/{mapDbId}/linkagegroups:
    get:
      description: Get the Linkage Groups of a specific Genomic Map. A Linkage Group is the BrAPI generic term for a named section of a map. A Linkage Group can represent a Chromosome, Scaffold, or Linkage Group.
      parameters:
      - description: The internal db id of a selected map
        in: path
        name: mapDbId
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/page'
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/authorizationHeader'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
                  metadata:
                    $ref: '#/components/schemas/metadata'
                  result:
                    properties:
                      data:
                        items:
                          $ref: '#/components/schemas/LinkageGroup'
                        type: array
                    required:
                    - data
                    type: object
                required:
                - metadata
                - result
                title: LinkageGroupListResponse
                type: object
          description: OK
          headers: {}
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
      summary: Get the Linkage Groups of a specific Genomic Map
      tags:
      - Genome Maps
  /markerpositions:
    get:
      description: Get marker position information, based on Map, Linkage Group, and Marker ID
      parameters:
      - description: unique id of a map
        in: query
        name: mapDbId
        required: false
        schema:
          type: string
      - description: The chromosome identifier or the generic linkage group identifier if the chromosome is not applicable.
        in: query
        name: linkageGroupName
        required: false
        schema:
          type: string
      - description: The unique id for a marker
        in: query
        name: variantDbId
        required: false
        schema:
          type: string
      - description: The minimum position
        in: query
        name: minPosition
        required: false
        schema:
          type: integer
      - description: The maximum position
        in: query
        name: maxPosition
        required: false
        schema:
          type: integer
      - $ref: '#/components/parameters/page'
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/authorizationHeader'
      responses:
        '200':
          $ref: '#/components/responses/MarkerPositionListResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
      summary: Get marker position info
      tags:
      - Genome Maps
  /references:
    get:
      description: '`GET /references` will return a filtered list of `Reference` JSON objects.'
      parameters:
      - description: The ID of the `Reference` to be retrieved.
        in: query
        name: referenceDbId
        required: false
        schema:
          type: string
      - description: The ID of the `ReferenceSet` to be retrieved.
        in: query
        name: referenceSetDbId
        required: false
        schema:
          type: string
      - description: If set, return the reference sets for which the `accession` matches this string (case-sensitive, exact match).
        in: query
        name: accession
        required: false
        schema:
          type: string
      - description: If specified, return the references for which the `md5checksum` matches this string (case-sensitive, exact match).
        in: query
        name: md5checksum
        required: false
        schema:
          type: string
      - description: If the reference is derived from a source sequence
        in: query
        name: isDerived
        required: false
        schema:
          type: boolean
      - description: The minimum length of the reference sequences to be retrieved.
        in: query
        name: minLength
        required: false
        schema:
          type: integer
      - description: The maximum length of the reference sequences to be retrieved.
        in: query
        name: maxLength
        required: false
        schema:
          type: integer
      - $ref: '#/components/parameters/page'
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/authorizationHeader'
      responses:
        '200':
          $ref: '#/components/responses/ReferencesListResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
      summary: Gets a filtered list of `Reference` objects.
      tags:
      - References
  /references/{referenceDbId}:
    get:
      description: '`GET /references/{reference_id}` will return a JSON version of

        `Reference`.'
      parameters:
      - description: The ID of the `Reference` to be retrieved.
        in: path
        name: referenceDbId
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/authorizationHeader'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
                  metadata:
                    $ref: '#/components/schemas/metadata'
                  result:
                    $ref: '#/components/schemas/Reference'
                required:
                - metadata
                - result
                title: ReferenceSingleResponse
                type: object
          description: A successful response.
          headers: {}
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
      summary: Gets a `Reference` by ID.
      tags:
      - References
  /references/{referenceDbId}/bases:
    get:
      description: Lists `Reference` bases by ID and optional range.
      parameters:
      - description: The ID of the `Reference` to be retrieved.
        in: path
        name: referenceDbId
        required: true
        schema:
          type: string
      - description: 'The start position (0-based) of this query. Defaults to 0.

          Genomic positions are non-negative integers less than reference length.

          Requests spanning the join of circular genomes are represented as

          two requests one on each side of the join (position 0).'
        in: query
        name: start
        required: false
        schema:
          type: integer
      - description: The end position (0-based, exclusive) of this query. Defaults to the length of this `Reference`.
        in: query
        name: end
        required: false
        schema:
          type: integer
      - description: 'The continuation token, which is used to page through large result sets.

          To get the next page of results, set this parameter to the value of

          `next_page_token` from the previous response.'
        in: query
        name: pageToken
        required: false
        schema:
          type: string
      - $ref: '#/components/parameters/authorizationHeader'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
                  metadata:
                    $ref: '#/components/schemas/metadata'
                  result:
                    $ref: '#/components/schemas/ReferenceBases'
                required:
                - metadata
                - result
                title: ReferenceBasesResponse
                type: object
          description: A successful response.
          headers: {}
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
      summary: Lists `Reference` bases by ID and optional range.
      tags:
      - References
  /referencesets:
    get:
      description: Gets a filtered list of `ReferenceSets`.
      parameters:
      - description: The ID of the `ReferenceSet` to be retrieved.
        in: query
        name: referenceSetDbId
        schema:
          type: string
      - description: If set, return the reference sets for which the `accession` matches this string (case-sensitive, exact match).
        in: query
        name: accession
        schema:
          type: string
      - description: If set, return the reference sets for which the `assemblyId` matches this string (case-sensitive, exact match).
        in: query
        name: assemblyPUI
        schema:
          type: string
      - description: If set, return the reference sets for which the `md5checksum` matches this string (case-sensitive, exact match).
        in: query
        name: md5checksum
        schema:
          type: string
      - $ref: '#/components/parameters/page'
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/authorizationHeader'
      responses:
        '200':
          $ref: '#/components/responses/ReferenceSetsListResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
      summary: Gets a list of `ReferenceSets`.
      tags:
      - Reference Sets
  /referencesets/{referenceSetDbId}:
    get:
      description: Gets a `ReferenceSet` by ID.
      parameters:
      - description: The ID of the `ReferenceSet` to be retrieved.
        in: path
        name: referenceSetDbId
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/authorizationHeader'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
                  metadata:
                    $ref: '#/components/schemas/metadata'
                  result:
                    $ref: '#/components/schemas/ReferenceSet'
                required:
                - metadata
                - result
                title: ReferenceSetsSingleResponse
                type: object
          description: A successful response.
      summary: Gets a `ReferenceSet` by ID.
      tags:
      - Reference Sets
  /samples:
    get:
      description: Used to retrieve list of Samples from a Sample Tracking system based on some search criteria.
      parameters:
      - description: the internal DB id for a sample
        in: query
        name: sampleDbId
        required: false
        schema:
          type: string
      - description: the internal DB id for an observation unit where a sample was taken from
        in: query
        name: observationUnitDbId
        required: false
        schema:
          type: string
      - description: the internal DB id for a plate of samples
        in: query
        name: plateDbId
        required: false
        schema:
          type: string
      - description: the internal DB id for a germplasm
        in: query
        name: germplasmDbId
        required: false
        schema:
          type: string
      - description: Filter by study DbId
        in: query
        name: studyDbId
        required: false
        schema:
          type: string
      - $ref: '#/components/parameters/externalReferenceID'
      - $ref: '#/components/parameters/externalReferenceSource'
      - $ref: '#/components/parameters/page'
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/authorizationHeader'
      responses:
        '200':
          $ref: '#/components/responses/SampleListResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
      summary: Get the Samples
      tags:
      - Samples
    post:
      description: Call to register the event of a sample being taken. Sample ID is assigned as a result of the operation and returned in response.
      parameters:
      - $ref: '#/components/parameters/authorizationHeader'
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/SampleNewRequest'
              type: array
      responses:
        '200':
          $ref: '#/components/responses/SampleListResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
      summary: Add new Samples
      tags:
      - Samples
  /samples/{sampleDbId}:
    get:
      description: Used to retrieve the details of a single Sample from a Sample Tracking system.
      parameters:
      - description: the internal DB id for a sample
        in: path
        name: sampleDbId
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/authorizationHeader'
      responses:
        '200':
          $ref: '#/components/responses/SampleSingleResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
      summary: Get the details of a specific Sample
      tags:
      - Samples
    put:
      description: Update the details of an existing Sample
      parameters:
      - description: the internal DB id for a sample
        in: path
        name: sampleDbId
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/authorizationHeader'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SampleNewRequest'
      responses:
        '200':
          $ref: '#/components/responses/SampleSingleResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
      summary: Update the details of an existing Sample
      tags:
      - Samples
  /search/calls:
    post:
      description: 'Submit a search request for `Calls`


        ** THIS ENDPOINT USES TOKEN BASED PAGING **'
      parameters:
      - $ref: '#/components/parameters/authorizationHeader'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/callsSearchRequest'
        description: Study Search request
      responses:
        '200':
          $ref: '#/components/responses/CallsListResponse'
        '202':
          $ref: '#/components/responses/202AcceptedSearchResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
      summary: Submit a search request for `Calls`
      tags:
      - Calls
  /search/calls/{searchResultsDbId}:
    get:
      description: 'Returns a filtered list of `Call` JSON objects.


        See Search Services for additional implementation details.


        ** THIS ENDPOINT USES TOKEN BASED PAGING **'
      parameters:
      - $ref: '#/components/parameters/searchResultsDbId'
      - $ref: '#/components/parameters/pageToken'
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/authorizationHeader'
      responses:
        '200':
          $ref: '#/components/responses/CallsListResponse'
        '202':
          $ref: '#/components/responses/202AcceptedSearchResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
      summary: Returns a filtered list of `Call` JSON objects.
      tags:
      - Calls
  /search/callsets:
    post:
      description: Gets a list of call sets matching the search criteria.
      parameters:
      - $ref: '#/components/parameters/authorizationHeader'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/callSetsSearchRequest'
        description: Study Search request
      responses:
        '200':
          $ref: '#/components/responses/CallSetsListResponse'
        '202':
          $ref: '#/components/responses/202AcceptedSearchResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
      summary: Gets a list of call sets matching the search criteria.
      tags:
      - Call Sets
  /search/callsets/{searchResultsDbId}:
    get:
      description: Gets a list of call sets matching the search criteria.
      parameters:
      - $ref: '#/components/parameters/searchResultsDbId'
      - $ref: '#/components/parameters/page'
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/authorizationHeader'
      responses:
        '200':
          $ref: '#/components/responses/CallSetsListResponse'
        '202':
          $ref: '#/components/responses/202AcceptedSearchResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
      summary: Gets a list of call sets matching the search criteria.
      tags:
      - Call Sets
  /search/markerpositions:
    post:
      description: Get marker position information, based on Map, Linkage Group, and Marker ID
      parameters:
      - $ref: '#/components/parameters/authorizationHeader'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MarkerPositionSearchRequest'
      responses:
        '200':
          $ref: '#/components/responses/MarkerPositionListResponse'
        '202':
          $ref: '#/components/responses/202AcceptedSearchResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
      summary: Get marker position info
      tags:
      - Genome Maps
  /search/markerpositions/{searchResultsDbId}:
    get:
      description: Get marker position information, based on Map, Linkage Group, and Marker ID
      parameters:
      - $ref: '#/components/parameters/searchResultsDbId'
      - $ref: '#/components/parameters/page'
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/authorizationHeader'
      responses:
        '200':
          $ref: '#/components/responses/MarkerPositionListResponse'
        '202':
          $ref: '#/components/responses/202AcceptedSearchResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
      summary: Get marker position info
      tags:
      - Genome Maps
  /search/references:
    post:
      description: '`POST /references/search` must accept a JSON version of

        `SearchReferencesRequest` as the post body and will return a JSON

        version of `SearchReferencesResponse`.'
      parameters:
      - $ref: '#/components/parameters/authorizationHeader'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReferencesSearchRequest'
        description: References Search request
      responses:
        '200':
          $ref: '#/components/responses/ReferencesListResponse'
        '202':
          $ref: '#/components/responses/202AcceptedSearchResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
      summary: Gets a list of `Reference` matching the search criteria.
      tags:
      - References
  /search/references/{searchResultsDbId}:
    get:
      description: '`POST /references/search` must accept a JSON version of

        `SearchReferencesRequest` as the post body and will return a JSON

        version of `SearchReferencesResponse`.'
      parameters:
      - $ref: '#/components/parameters/searchResultsDbId'
      - $ref: '#/components/parameters/page'
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/authorizationHeader'
      responses:
        '200':
          $ref: '#/components/responses/ReferencesListResponse'
        '202':
          $ref: '#/components/responses/202AcceptedSearchResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
      summary: Gets a list of `Reference` matching the search criteria.
      tags:
      - References
  /search/referencesets:
    post:
      description: Gets a list of `ReferenceSet` matching the search criteria.
      parameters:
      - $ref: '#/components/parameters/authorizationHeader'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReferenceSetsSearchRequest'
        required: true
      responses:
        '200':
          $ref: '#/components/responses/ReferenceSetsListResponse'
        '202':
          $ref: '#/components/responses/202AcceptedSearchResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
      summary: Gets a list of `ReferenceSet` matching the search criteria.
      tags:
      - Reference Sets
  /search/referencesets/{searchResultsDbId}:
    get:
      description: Gets a list of `ReferenceSet` matching the search criteria.
      parameters:
      - $ref: '#/components/parameters/searchResultsDbId'
      - $ref: '#/components/parameters/page'
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/authorizationHeader'
      responses:
        '200':
          $ref: '#/components/responses/ReferenceSetsListResponse'
        '202':
          $ref: '#/components/responses/202AcceptedSearchResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
      summary: Gets a list of `ReferenceSet` matching the search criteria.
      tags:
      - Reference Sets
  /search/samples:
    post:
      description: 'Used to retrieve list of Samples from a Sample Tracking system based on some search criteria.


        See Search Services for additional implementation details.'
      parameters:
      - $ref: '#/components/parameters/authorizationHeader'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SampleSearchRequest'
      responses:
        '200':
          $ref: '#/components/responses/SampleListResponse'
        '202':
          $ref: '#/components/responses/202AcceptedSearchResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
      summary: Submit a search request for Samples
      tags:
      - Samples
  /search/samples/{searchResultsDbId}:
    get:
      description: 'Used to retrieve list of Samples from a Sample Tracking system based on some search criteria.


        See Search Services for additional implementation details.'
      parameters:
      - $ref: '#/components/parameters/searchResultsDbId'
      - $ref: '#/components/parameters/page'
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/authorizationHeader'
      responses:
        '200':
          $ref: '#/components/responses/SampleListResponse'
        '202':
          $ref: '#/components/responses/202AcceptedSearchResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
      summary: Get the results of a Samples search request
      tags:
      - Samples
  /search/variants:
    post:
      description: 'Gets a list of `Variant` matching the search criteria.


        ** THIS ENDPOINT USES TOKEN BASED PAGING **'
      parameters:
      - $ref: '#/components/parameters/authorizationHeader'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/variantsSearchRequest'
        description: Study Search request
      responses:
        '200':
          $ref: '#/components/responses/VariantsListResponse'
        '202':
          $ref: '#/components/responses/202AcceptedSearchResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
      summary: Gets a list of `Variant` matching the search criteria.
      tags:
      - Variants
  /search/variants/{searchResultsDbId}:
    get:
      description: 'Gets a list of `Variant` matching the search criteria.


        ** THIS ENDPOINT USES TOKEN BASED PAGING **'
      parameters:
      - $ref: '#/components/parameters/searchResultsDbId'
      - $ref: '#/components/parameters/pageToken'
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/authorizationHeader'
      responses:
        '200':
          $ref: '#/components/responses/VariantsListResponse'
        '202':
          $ref: '#/components/responses/202AcceptedSearchResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
      summary: Gets a list of `Variant` matching the search criteria.
      tags:
      - Variants
  /search/variantsets:
    post:
      description: Gets a list of `VariantSet` matching the search criteria.
      parameters:
      - $ref: '#/components/parameters/authorizationHeader'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VariantSetsSearchRequest'
        description: Study Search request
      responses:
        '200':
          $ref: '#/components/responses/VariantSetsListResponse'
        '202':
          $ref: '#/components/responses/202AcceptedSearchResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
      summary: Gets a list of `VariantSet` matching the search criteria.
      tags:
      - Variant Sets
  /search/variantsets/{searchResultsDbId}:
    get:
      description: Gets a list of `VariantSet` matching the search criteria.
      parameters:
      - $ref: '#/components/parameters/searchResultsDbId'
      - $ref: '#/components/parameters/page'
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/authorizationHeader'
      responses:
        '200':
          $ref: '#/components/responses/VariantSetsListResponse'
        '202':
          $ref: '#/components/responses/202AcceptedSearchResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
      summary: Gets a list of `VariantSet` matching the search criteria.
      tags:
      - Variant Sets
  /variants:
    get:
      description: 'Gets a filtered list of `Variants`.


        ** THIS ENDPOINT USES TOKEN BASED PAGING **'
      parameters:
      - description: The ID of the `Variant` to be retrieved.
        in: query
        name: variantDbId
        required: false
        schema:
          type: string
      - description: The ID of the `VariantSet` to be retrieved.
        in: query
        name: variantSetDbId
        required: false
        schema:
          type: string
      - $ref: '#/components/parameters/pageToken'
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/authorizationHeader'
      responses:
        '200':
          $ref: '#/components/responses/VariantsListResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
      summary: Gets a filtered list of `Variants`.
      tags:
      - Variants
  /variants/{variantDbId}:
    get:
      description: '`GET /variants/{id}` will return a JSON version of `Variant`.'
      parameters:
      - description: The ID of the `Variant` to be retrieved.
        in: path
        name: variantDbId
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/authorizationHeader'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
                  metadata:
                    $ref: '#/components/schemas/metadata'
                  result:
                    $ref: '#/components/schemas/Variant'
                required:
                - metadata
                - result
                title: VariantSingleResponse
                type: object
          description: OK
          headers: {}
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
      summary: Gets a `Variant` by ID.
      tags:
      - Variants
  /variants/{variantDbId}/calls:
    get:
      description: 'The variant calls for this particular variant. Each one represents the determination of genotype with respect to this variant. `Calls` in this array are implicitly associated with this `Variant`.


        ** THIS ENDPOINT USES TOKEN BASED PAGING **'
      parameters:
      - description: The ID of the `Variant` to be retrieved.
        in: path
        name: variantDbId
        required: true
        schema:
          type: string
      - description: Should homozygotes be expanded (true) or collapsed into a single occurence (false)
        in: query
        name: expandHomozygotes
        required: false
        schema:
          type: boolean
      - description: The string to use as a representation for missing data
        in: query
        name: unknownString
        required: false
        schema:
          type: string
      - description: The string to use as a separator for phased allele calls
        in: query
        name: sepPhased
        required: false
        schema:
          type: string
      - description: The string to use as a separator for unphased allele calls
        in: query
        name: sepUnphased
        required: false
        schema:
          type: string
      - $ref: '#/components/parameters/pageToken'
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/authorizationHeader'
      responses:
        '200':
          $ref: '#/components/responses/CallsListResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
      summary: Gets a list of `Calls` associated with a `Variant`.
      tags:
      - Variants
  /variantsets:
    get:
      description: Will return a filtered list of `VariantSet`.
      parameters:
      - description: The ID of the `VariantSet` to be retrieved.
        in: query
        name: variantSetDbId
        required: false
        schema:
          type: string
      - description: The ID of the `Variant` to be retrieved.
        in: query
        name: variantDbId
        required: false
        schema:
          type: string
      - description: The ID of the `CallSet` to be retrieved.
        in: query
        name: callSetDbId
        required: false
        schema:
          type: string
      - description: Filter by study DbId
        in: query
        name: studyDbId
        required: false
        schema:
          type: string
      - description: Filter by study name
        in: query
        name: studyName
        required: false
        schema:
          type: string
      - $ref: '#/components/parameters/page'
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/authorizationHeader'
      responses:
        '200':
          $ref: '#/components/responses/VariantSetsListResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
      summary: Gets a filtered list of `VariantSets`.
      tags:
      - Variant Sets
  /variantsets/extract:
    post:
      description: Will perform a search for `Calls` which match the search criteria in `variantSetsExtractRequest`. The results of the search will be used to create a new `VariantSet` on the server. The new `VariantSet` will be returned.
      parameters:
      - $ref: '#/components/parameters/authorizationHeader'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VariantSetsExtractRequest'
        description: Study Search request
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
                  metadata:
                    $ref: '#/components/schemas/metadata'
                  result:
                    $ref: '#/components/schemas/VariantSet'
                required:
                - metadata
                - result
                title: variantSetResponse
                type: object
          description: OK
          headers: {}
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
      summary: Create new `VariantSet` based on search results
      tags:
      - Variant Sets
  /variantsets/{variantSetDbId}:
    get:
      description: This call will return a JSON version of a `VariantSet`.
      parameters:
      - description: The ID of the `Variant` to be retrieved.
        in: path
        name: variantSetDbId
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/authorizationHeader'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
                  metadata:
                    $ref: '#/components/schemas/metadata'
                  result:
                    $ref: '#/components/schemas/VariantSet'
                required:
                - metadata
                - result
                title: variantSetResponse
                type: object
          description: OK
          headers: {}
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
      summary: Gets a `VariantSet` by ID.
      tags:
      - Variant Sets
  /variantsets/{variantSetDbId}/calls:
    get:
      description: 'Gets a list of `Calls` associated with a `VariantSet`.


        ** THIS ENDPOINT USES TOKEN BASED PAGING **'
      parameters:
      - description: The ID of the `VariantSet` to be retrieved.
        in: path
        name: variantSetDbId
        required: true
        schema:
          type: string
      - description: Should homozygotes be expanded (true) or collapsed into a single occurence (false)
        in: query
        name: expandHomozygotes
        required: false
        schema:
          type: boolean
      - description: The string to use as a representation for missing data
        in: query
        name: unknownString
        required: false
        schema:
          type: string
      - description: The string to use as a separator for phased allele calls
        in: query
        name: sepPhased
        required: false
        schema:
          type: string
      - description: The string to use as a separator for unphased allele calls
        in: query
        name: sepUnphased
        required: false
        schema:
          type: string
      - $ref: '#/components/parameters/pageToken'
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/authorizationHeader'
      responses:
        '200':
          $ref: '#/components/responses/CallsListResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
      summary: Gets a list of `Calls` associated with a `VariantSet`.
      tags:
      - Variant Sets
  /variantsets/{variantSetDbId}/callsets:
    get:
      description: Gets a list of `CallSets` associated with a `VariantSet`.
      parameters:
      - description: The ID of the `CallSet` to be retrieved.
        in: query
        name: callSetDbId
        required: false
        schema:
          type: string
      - description: The human readable name of the `CallSet` to be retrieved.
        in: query
        name: callSetName
        required: false
        schema:
          type: string
      - description: The ID of the `VariantSet` to be retrieved.
        in: path
        name: variantSetDbId
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/page'
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/authorizationHeader'
      responses:
        '200':
          $ref: '#/components/responses/CallSetsListResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
      summary: Gets a list of `CallSets` associated with a `VariantSet`.
      tags:
      - Variant Sets
  /variantsets/{variantSetDbId}/variants:
    get:
      description: 'This call will return an array of `Variants`.


        ** THIS ENDPOINT USES TOKEN BASED PAGING **'
      parameters:
      - description: The ID of the `Variant` to be retrieved.
        in: query
        name: variantDbId
        required: false
        schema:
          type: string
      - description: The ID of the `VariantSet` to be retrieved.
        in: path
        name: variantSetDbId
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/pageToken'
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/authorizationHeader'
      responses:
        '200':
          $ref: '#/components/responses/VariantsListResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
      summary: Gets a `Variants` for a given `VariantSet`.
      tags:
      - Variant Sets
  /vendor/orders:
    get:
      description: List current available orders
      parameters:
      - description: The order id returned by the vendor when the order was successfully submitted. From response of "POST /vendor/orders"
        in: query
        name: orderId
        schema:
          type: string
      - description: The submission id returned by the vendor when a set of plates was successfully submitted. From response of "POST /vendor/plates"
        in: query
        name: submissionId
        schema:
          type: string
      - $ref: '#/components/parameters/page'
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/authorizationHeader'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
                  metadata:
                    $ref: '#/components/schemas/metadata'
                  result:
                    properties:
                      data:
                        items:
                          $ref: '#/components/schemas/VendorOrder'
                        type: array
                    required:
                    - data
                    type: object
                required:
                - metadata
                - result
                title: VendorOrderListResponse
                type: object
          description: OK
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
      summary: List current available orders
      tags:
      - Vendor
    post:
      description: Submit a new order to a vendor
      parameters:
      - $ref: '#/components/parameters/authorizationHeader'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VendorOrderSubmissionRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
                  metadata:
                    $ref: '#/components/schemas/metadata'
                  result:
                    $ref: '#/components/schemas/VendorOrderSubmission'
                title: VendorOrderSubmissionSingleResponse
                type: object
          description: OK
          headers: {}
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
      summary: Submit New Order
      tags:
      - Vendor
  /vendor/orders/{orderId}/plates:
    get:
      description: Retrieve the plate and sample details of an order being processed
      parameters:
      - description: The order id returned by the vendor when the order was successfully submitted.
        in: path
        name: orderId
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/page'
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/authorizationHeader'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
                  metadata:
                    $ref: '#/components/schemas/metadata'
                  result:
                    properties:
                      data:
                        items:
                          $ref: '#/components/schemas/VendorPlate'
                        type: array
                    required:
                    - data
                    type: object
                required:
                - metadata
                - result
                title: VendorPlateListResponse
                type: object
          description: OK
          headers: {}
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
      summary: Get the Plates for a specific Order
      tags:
      - Vendor
  /vendor/orders/{orderId}/results:
    get:
      description: Retrieve the data files generated by the vendors analysis
      parameters:
      - description: The order id returned by the vendor when the order was successfully submitted.
        in: path
        name: orderId
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/page'
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/authorizationHeader'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
                  metadata:
                    $ref: '#/components/schemas/metadata'
                  result:
                    properties:
                      data:
                        items:
                          $ref: '#/components/schemas/VendorResultFile'
                        type: array
                    required:
                    - data
                    type: object
                required:
                - metadata
                - result
                title: VendorResultFileListResponse
                type: object
          description: OK
          headers: {}
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
      summary: Get the results of a specific Order
      tags:
      - Vendor
  /vendor/orders/{orderId}/status:
    get:
      description: Retrieve the current status of an order being processed
      parameters:
      - description: The order id returned by the vendor when the order was successfully submitted.
        in: path
        name: orderId
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/authorizationHeader'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
                  metadata:
                    $ref: '#/components/schemas/metadata'
                  result:
                    properties:
                      status:
                        enum:
                        - registered
                        - received
                        - inProgress
                        - completed
                        - rejected
                        type: string
                    type: object
                required:
                - metadata
                - result
                title: VendorOrderStatusResponse
                type: object
          description: OK
          headers: {}
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
      summary: Get the status of a specific Order
      tags:
      - Vendor
  /vendor/plates:
    post:
      description: Submit a new set of Sample data
      parameters:
      - $ref: '#/components/parameters/authorizationHeader'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VendorPlateSubmissionRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
                  metadata:
                    $ref: '#/components/schemas/metadata'
                  result:
                    $ref: '#/components/schemas/VendorPlateSubmissionId'
                required:
                - metadata
                - result
                title: VendorPlateSubmissionIdSingleResponse
                type: object
          description: OK
          headers: {}
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
      summary: Submit a new set of Sample data
      tags:
      - Vendor
  /vendor/plates/{submissionId}:
    get:
      description: Get data for a submitted set of plates
      parameters:
      - description: The submission id returned by the vendor when a set of plates was successfully submitted. From response of "POST /vendor/plates"
        in: path
        name: submissionId
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/authorizationHeader'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
                  metadata:
                    $ref: '#/components/schemas/metadata'
                  result:
                    $ref: '#/components/schemas/VendorPlateSubmission'
                required:
                - metadata
                - result
                title: VendorPlateSubmissionSingleResponse
                type: object
          description: OK
          headers: {}
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
      summary: Get the data for a submitted set of plates
      tags:
      - Vendor
  /vendor/specifications:
    get:
      description: Defines the plate format specification for the vendor.
      parameters:
      - $ref: '#/components/parameters/authorizationHeader'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
                  metadata:
                    $ref: '#/components/schemas/metadata'
                  result:
                    $ref: '#/components/schemas/VendorSpecification'
                required:
                - metadata
                - result
                title: VendorSpecificationSingleResponse
                type: object
          description: OK
          headers: {}
      summary: Get the Vendor Specifications
      tags:
      - Vendor
security:
- AuthorizationToken: []
servers:
- url: https://test-server.brapi.org/brapi/v2
tags:
- description: Individual genotype allele calls
  externalDocs:
    description: Docs
    url: https://wiki.brapi.org/
  name: Calls
- description: Each Call Set is related to one physical sample
  externalDocs:
    description: Docs
    url: https://wiki.brapi.org/
  name: Call Sets
- description: Information about Variants, also called Markers
  externalDocs:
    description: Docs
    url: https://wiki.brapi.org/
  name: Variants
- description: Information about Variant Sets, also called Data Sets or Allele Matrices
  externalDocs:
    description: Docs
    url: https://wiki.brapi.org/
  name: Variant Sets
- description: Information about physical samples
  externalDocs:
    description: Docs
    url: https://wiki.brapi.org/
  name: Samples
- description: Genetic sequences used for reference
  externalDocs:
    description: Docs
    url: https://wiki.brapi.org/
  name: References
- description: Collections of references
  externalDocs:
    description: Docs
    url: https://wiki.brapi.org/
  name: Reference Sets
- description: Information about physical and genetic maps
  externalDocs:
    description: Docs
    url: https://wiki.brapi.org/
  name: Genome Maps
- description: This interface is specific to facilities that performs an external analysis, such as genotyping facilities. The interface should be implemented by that facility''s server. The breeding database is the client of this interface.
  externalDocs:
    description: Docs
    url: https://wiki.brapi.org/
  name: Vendor