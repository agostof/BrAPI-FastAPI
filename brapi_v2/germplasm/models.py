# generated by fastapi-codegen:
#   filename:  PlantBreedingAPI-BrAPI-Germplasm-2.0-resolved_MOD.yaml
#   timestamp: 2021-03-24T21:04:22+00:00

from __future__ import annotations

from datetime import date, datetime
from enum import Enum
from typing import Dict, List, Optional, Union

from pydantic import AnyUrl, BaseModel, Extra, Field


class CrossesPutRequest(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class PlannedcrossesPutRequest(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class BreedingMethod(BaseModel):
    abbreviation: Optional[str] = Field(
        None,
        description='an abbreviation for the name of this breeding method',
        example='MB',
    )
    breedingMethodDbId: str = Field(
        ...,
        description='the unique identifier for this breeding method',
        example='ffcce7ef',
    )
    breedingMethodName: Optional[str] = Field(
        None,
        description='human readable name of the breeding method',
        example='Male Backcross',
    )
    description: Optional[str] = Field(
        None,
        description='human readable description of the breeding method',
        example='Backcross to recover a specific gene.',
    )


class Context(BaseModel):
    __root__: List[AnyUrl] = Field(
        ...,
        description='The JSON-LD Context is used to provide JSON-LD definitions to each field in a JSON object. By providing an array of context file urls, a BrAPI response object becomes JSON-LD compatible.  \n\nFor more information, see https://w3c.github.io/json-ld-syntax/#the-context',
        example=['https://brapi.org/jsonld/context/metadata.jsonld'],
        title='context',
    )


class AdditionalInfo(BaseModel):
    class Config:
        extra = Extra.allow

    #__root__: str


class CrossType(Enum):
    BIPARENTAL = 'BIPARENTAL'
    SELF = 'SELF'
    OPEN_POLLINATED = 'OPEN_POLLINATED'
    BULK = 'BULK'
    BULK_SELFED = 'BULK_SELFED'
    BULK_OPEN_POLLINATED = 'BULK_OPEN_POLLINATED'
    DOUBLE_HAPLOID = 'DOUBLE_HAPLOID'


class ParentType(Enum):
    MALE = 'MALE'
    FEMALE = 'FEMALE'
    SELF = 'SELF'
    POPULATION = 'POPULATION'


class CrossParent(BaseModel):
    germplasmDbId: Optional[str] = Field(
        None, description='the unique identifier for a germplasm', example='d34b10c3'
    )
    germplasmName: Optional[str] = Field(
        None, description='the human readable name for a germplasm', example='TME_419'
    )
    observationUnitDbId: Optional[str] = Field(
        None,
        description='the unique identifier for an observation unit',
        example='2e1926a7',
    )
    observationUnitName: Optional[str] = Field(
        None,
        description='the human readable name for an observation unit',
        example='my_Plot_9001',
    )
    parentType: Optional[ParentType] = Field(
        None,
        description="The type of parent ex. 'MALE', 'FEMALE', 'SELF', 'POPULATION', etc.",
        example='MALE',
    )


class AcquisitionSourceCode(Enum):
    field_10 = '10'
    field_11 = '11'
    field_12 = '12'
    field_13 = '13'
    field_14 = '14'
    field_15 = '15'
    field_20 = '20'
    field_21 = '21'
    field_22 = '22'
    field_23 = '23'
    field_24 = '24'
    field_25 = '25'
    field_26 = '26'
    field_27 = '27'
    field_28 = '28'
    field_30 = '30'
    field_40 = '40'
    field_50 = '50'
    field_60 = '60'
    field_61 = '61'
    field_62 = '62'
    field_99 = '99'


class BiologicalStatusOfAccessionCode(Enum):
    field_100 = '100'
    field_110 = '110'
    field_120 = '120'
    field_130 = '130'
    field_200 = '200'
    field_300 = '300'
    field_400 = '400'
    field_410 = '410'
    field_411 = '411'
    field_412 = '412'
    field_413 = '413'
    field_414 = '414'
    field_415 = '415'
    field_416 = '416'
    field_420 = '420'
    field_421 = '421'
    field_422 = '422'
    field_423 = '423'
    field_500 = '500'
    field_600 = '600'
    field_999 = '999'


class MlsStatus(Enum):
    EMPTY_STR = ''
    field_0 = '0'
    field_1 = '1'
    field_99 = '99'


class StorageTypeCode(Enum):
    field_10 = '10'
    field_11 = '11'
    field_12 = '12'
    field_13 = '13'
    field_20 = '20'
    field_30 = '30'
    field_40 = '40'
    field_50 = '50'
    field_99 = '99'

# note: Commented out from the Auto-generated because it was a duplicate of BiologicalStatusOfAccessionCode(enum)
# class BiologicalStatusOfAccessionCode1(Enum):
#     field_100 = '100'
#     field_110 = '110'
#     field_120 = '120'
#     field_130 = '130'
#     field_200 = '200'
#     field_300 = '300'
#     field_400 = '400'
#     field_410 = '410'
#     field_411 = '411'
#     field_412 = '412'
#     field_413 = '413'
#     field_414 = '414'
#     field_415 = '415'
#     field_416 = '416'
#     field_420 = '420'
#     field_421 = '421'
#     field_422 = '422'
#     field_423 = '423'
#     field_500 = '500'
#     field_600 = '600'
#     field_999 = '999'


class LevelName(Enum):
    study = 'study'
    field = 'field'
    entry = 'entry'
    rep = 'rep'
    block = 'block'
    sub_block = 'sub-block'
    plot = 'plot'
    sub_plot = 'sub-plot'
    plant = 'plant'
    pot = 'pot'
    sample = 'sample'


class ObservationUnitHierarchyLevel(BaseModel):
    levelName: Optional[LevelName] = Field(
        None, description='A name for this level', example='plot'
    )
    levelOrder: Optional[int] = Field(
        None,
        description="`levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`'s lower numbers are at the top of the hierarchy (ie field -> 1) and higher numbers are at the bottom of the hierarchy (ie plant -> 9).",
        example=2,
    )

# note: Commented out from the Auto-generated because it was a duplicate of CrossType(enum)
# class CrossType1(Enum):
#     BIPARENTAL = 'BIPARENTAL'
#     SELF = 'SELF'
#     OPEN_POLLINATED = 'OPEN_POLLINATED'
#     BULK = 'BULK'
#     BULK_SELFED = 'BULK_SELFED'
#     BULK_OPEN_POLLINATED = 'BULK_OPEN_POLLINATED'
#     DOUBLE_HAPLOID = 'DOUBLE_HAPLOID'


class SearchRequestParametersCommonCropNames(BaseModel):
    commonCropNames: Optional[List[str]] = Field(
        None,
        description='Common name for the crop which this program is for',
        example=['Tomatillo', 'Paw Paw'],
    )


class SearchRequestParametersExternalReferences(BaseModel):
    externalReferenceIDs: Optional[List[str]] = Field(
        None,
        description='List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)',
        example=['http://purl.obolibrary.org/obo/ro.owl', '14a19841'],
    )
    externalReferenceSources: Optional[List[str]] = Field(
        None,
        description='List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)',
        example=['OBO Library', 'Field App Name'],
    )


class SearchRequestParametersGermplasm(BaseModel):
    germplasmDbIds: Optional[List[str]] = Field(
        None,
        description='List of IDs which uniquely identify germplasm to search for',
        example=['e9c6edd7', '1b1df4a6'],
    )
    germplasmNames: Optional[List[str]] = Field(
        None,
        description='List of human readable names to identify germplasm to search for',
        example=['A0000003', 'A0000477'],
    )


class SearchRequestParametersLocations(BaseModel):
    locationDbIds: Optional[List[str]] = Field(
        None,
        description='The location ids to search for',
        example=['b28911cf', '5071d1e4'],
    )
    locationNames: Optional[List[str]] = Field(
        None,
        description='A human readable names to search for',
        example=['Location Alpha', 'The Large Hadron Collider'],
    )


class SearchRequestParametersObservationVariables(BaseModel):
    observationVariableDbIds: Optional[List[str]] = Field(
        None,
        description='The DbIds of Variables to search for',
        example=['a646187d', '6d23513b'],
    )
    observationVariableNames: Optional[List[str]] = Field(
        None,
        description='The names of Variables to search for',
        example=['Plant Height in meters', 'Wheat rust score 1-5'],
    )


class SearchRequestParametersPaging(BaseModel):
    page: Optional[int] = Field(
        None,
        description="Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
        example=0,
    )
    pageSize: Optional[int] = Field(
        None,
        description='The size of the pages to be returned. Default is `1000`.',
        example=1000,
    )


class SearchRequestParametersPrograms(BaseModel):
    programDbIds: Optional[List[str]] = Field(
        None,
        description='A program identifier to search for',
        example=['8f5de35b', '0e2d4a13'],
    )
    programNames: Optional[List[str]] = Field(
        None,
        description='A name of a program to search for',
        example=['Better Breeding Program', 'Best Breeding Program'],
    )


class SearchRequestParametersStudies(BaseModel):
    studyDbIds: Optional[List[str]] = Field(
        None,
        description='List of study identifiers to search for',
        example=['cf6c4bd4', '691e69d6'],
    )
    studyNames: Optional[List[str]] = Field(
        None,
        description='List of study names to filter search results',
        example=['The First Bob Study 2017', 'Wheat Yield Trial 246'],
    )


class SearchRequestParametersTokenPaging(BaseModel):
    pageSize: Optional[int] = Field(
        None,
        description='The size of the pages to be returned. Default is `1000`.',
        example=1000,
    )
    pageToken: Optional[str] = Field(
        None,
        description='Used to request a specific page of data to be returned.\n\nTokenized pages are for large data sets which can not be efficiently broken into indexed pages. Use the nextPageToken and prevPageToken from a prior response to construct a query and move to the next or previous page respectively. ',
        example='33c27874',
    )


class SearchRequestParametersTrials(BaseModel):
    trialDbIds: Optional[List[str]] = Field(
        None,
        description='The ID which uniquely identifies a trial to search for',
        example=['d2593dc2', '9431a731'],
    )
    trialNames: Optional[List[str]] = Field(
        None,
        description='The human readable name of a trial to search for',
        example=['All Yield Trials 2016', 'Disease Resistance Study Comparison Group'],
    )


class TaxonID(BaseModel):
    sourceName: str = Field(
        ...,
        description='The human readable name of the taxonomy provider',
        example='NCBI',
    )
    taxonId: str = Field(
        ...,
        description='The identifier (name, ID, URI) of a particular taxonomy within the source provider',
        example='2026747',
    )


class TraitDataType(Enum):
    Code = 'Code'
    Date = 'Date'
    Duration = 'Duration'
    Nominal = 'Nominal'
    Numerical = 'Numerical'
    Ordinal = 'Ordinal'
    Text = 'Text'


class WSMIMEDataTypes(Enum):
    application_json = 'application/json'
    text_csv = 'text/csv'
    text_tsv = 'text/tsv'
    application_flapjack = 'application/flapjack'


class BasePagination(BaseModel):
    pageSize: int = Field(
        ...,
        description='The number of data elements returned, aka the size of the current page. If the requested page does not have enough elements to fill a page at the requested page size, this field should indicate the actual number of elements returned.',
        example=1000,
    )
    totalCount: Optional[int] = Field(
        None,
        description='The total number of elements that are available on the server and match the requested query parameters.',
        example=10,
    )
    totalPages: Optional[int] = Field(
        None,
        description='The total number of pages of elements available on the server. This should be calculated with the following formula. \n\ntotalPages = CEILING( totalCount / requested_page_size)',
        example=1,
    )


class DataFile(BaseModel):
    fileDescription: Optional[str] = Field(
        None,
        description='A human readable description of the file contents',
        example='This is an Excel data file',
    )
    fileMD5Hash: Optional[str] = Field(
        None,
        description='The MD5 Hash of the file contents to be used as a check sum',
        example='c2365e900c81a89cf74d83dab60df146',
    )
    fileName: Optional[str] = Field(
        None, description='The name of the file', example='datafile.xlsx'
    )
    fileSize: Optional[int] = Field(
        None, description='The size of the file in bytes', example=4398
    )
    fileType: Optional[str] = Field(
        None,
        description='The type or format of the file. Preferably MIME Type.',
        example='application/vnd.ms-excel',
    )
    fileURL: AnyUrl = Field(
        ...,
        description='The absolute URL where the file is located',
        example='https://wiki.brapi.org/examples/datafile.xlsx',
    )


class IndexPagination(BasePagination):
    currentPage: int = Field(
        ...,
        description='The index number for the returned page of data. This should always match the requested page number or the default page (0).',
        example=0,
    )


class Position(BaseModel):
    __root__: List[float] = Field(
        ...,
        description='A single position',
        example=[-76.506042, 42.417373, 123],
        min_items=2,
    )


class MessageType(Enum):
    DEBUG = 'DEBUG'
    ERROR = 'ERROR'
    WARNING = 'WARNING'
    INFO = 'INFO'


class Status(BaseModel):
    message: str = Field(
        ...,
        description='A short message concerning the status of this request/response',
        example='Request accepted, response successful',
    )
    messageType: MessageType = Field(
        ..., description='The logging level for the attached message', example='INFO'
    )


class TokenPagination(BasePagination):
    currentPageToken: Optional[str] = Field(
        None,
        description='The string token used to query the current page of data.',
        example='48bc6ac1',
    )
    nextPageToken: str = Field(
        ...,
        description='The string token used to query the next page of data.',
        example='cb668f63',
    )
    prevPageToken: Optional[str] = Field(
        None,
        description='The string token used to query the previous page of data.',
        example='9659857e',
    )


class CrossNewRequestCrossAttributes(BaseModel):
    crossAttributeName: Optional[str] = Field(
        None,
        description='the human readable name of a cross attribute',
        example='Humidity Percentage',
    )
    crossAttributeValue: Optional[str] = Field(
        None, description='the value of a cross attribute', example='45'
    )


class ExternalReferencesInner(BaseModel):
    referenceID: Optional[str] = Field(
        None,
        description='The external reference ID. Could be a simple string or a URI.',
    )
    referenceSource: Optional[str] = Field(
        None,
        description='An identifier for the source system or database of this reference',
    )


class GermplasmMCPDBreedingInstitutes(BaseModel):
    instituteCode: Optional[str] = Field(
        None,
        description='MCPD (v2.1) (BREDCODE) 18. FAO WIEWS code of the institute that has bred the material. If the holding institute has bred the material, the breeding institute code (BREDCODE) should be the same as the holding institute code (INSTCODE). Follows INSTCODE standard. Multiple values are separated by a semicolon without space.',
        example='PER001',
    )
    instituteName: Optional[str] = Field(
        None,
        description='MCPD (v2.1) (BREDNAME) 18.1  Name of the institute (or person) that bred the material. This descriptor should be used only if BREDCODE can not be filled because the FAO WIEWS code for this institute is not available. Multiple names are separated by a semicolon without space.',
        example='The BrAPI Institute',
    )


class GermplasmMCPDCollectingInfoCollectingInstitutes(BaseModel):
    instituteAddress: Optional[str] = Field(
        None,
        description='MCPD (v2.1) (COLLINSTADDRESS) 4.1.1  Address of the institute collecting the sample. This descriptor should be used only if COLLCODE can not be filled since the FAO WIEWS code for this institute is not available. Multiple values are separated by a semicolon without space.',
        example='123 Main Street, Lima, Peru, 5555',
    )
    instituteCode: Optional[str] = Field(
        None,
        description='MCPD (v2.1) (COLLCODE) 4.  FAO WIEWS code of the institute collecting the sample. If the holding institute has collected the material, the collecting institute code (COLLCODE) should be the same as the holding institute code (INSTCODE). Follows INSTCODE standard. Multiple values are separated by a semicolon without space.',
        example='PER001',
    )
    instituteName: Optional[str] = Field(
        None,
        description='MCPD (v2.1) (COLLNAME) 4.1  Name of the institute collecting the sample. This descriptor should be used only if COLLCODE can not be filled because the FAO WIEWS code for this institute is not available. Multiple values are separated by a semicolon without space.',
        example='The BrAPI Institute',
    )


class GermplasmMCPDCollectingInfoCollectingSite(BaseModel):
    coordinateUncertainty: Optional[str] = Field(
        None,
        description='MCPD (v2.1) (COORDUNCERT) 15.5 Uncertainty associated with the coordinates in metres. Leave the value empty if the uncertainty is unknown.',
        example='20',
    )
    elevation: Optional[str] = Field(
        None,
        description='MCPD (v2.1) (ELEVATION) 16. Elevation of collecting site expressed in metres above sea level. Negative values are allowed.',
        example='35',
    )
    georeferencingMethod: Optional[str] = Field(
        None,
        description='MCPD (v2.1) (GEOREFMETH) 15.7  The georeferencing method used (GPS, determined from map, gazetteer, or estimated using software). Leave the value empty if georeferencing method is not known.',
        example='WGS84',
    )
    latitudeDecimal: Optional[str] = Field(
        None,
        description='MCPD (v2.1) (DECLATITUDE) 15.1 Latitude expressed in decimal degrees. Positive values are North of the Equator; negative values are South of the Equator (e.g. -44.6975).',
        example=42.445295,
    )
    latitudeDegrees: Optional[str] = Field(
        None,
        description='MCPD (v2.1) (LATITUDE) 15.2 Degrees (2 digits) minutes (2 digits), and seconds (2 digits) followed by N (North) or S (South) (e.g. 103020S). Every missing digit (minutes or seconds) should be indicated with a hyphen. Leading zeros are required (e.g. 10',
        example='42 26 43.1 N',
    )
    locationDescription: Optional[str] = Field(
        None,
        description='MCPD (v2.1) (COLLSITE) 14. Location information below the country level that describes where the accession was collected, preferable in English. This might include the distance in kilometres and direction from the nearest town, village or map grid reference point, (e.g. 7 km south of Townsville).',
        example='South east hill near institute buildings',
    )
    longitudeDecimal: Optional[str] = Field(
        None,
        description='MCPD (v2.1) (DECLONGITUDE) 15.3 Longitude expressed in decimal degrees. Positive values are East of the Greenwich Meridian; negative values are West of the Greenwich Meridian (e.g. +120.9123).',
        example='-076.471934',
    )
    longitudeDegrees: Optional[str] = Field(
        None,
        description='MCPD (v2.1) (LONGITUDE) 15.4 Degrees (3 digits), minutes (2 digits), and seconds (2 digits) followed by E (East) or W (West) (e.g. 0762510W). Every missing digit (minutes or seconds) should be indicated with a hyphen. Leading zeros are required (e.g. 076',
        example='76 28 19.0 W',
    )
    spatialReferenceSystem: Optional[str] = Field(
        None,
        description='MCPD (v2.1) (COORDDATUM) 15.6 The geodetic datum or spatial reference system upon which the coordinates given in decimal latitude and decimal longitude are based (e.g. WGS84). The GPS uses the WGS84 datum.',
        example='WGS84',
    )


class GermplasmMCPDCollectingInfo(BaseModel):
    collectingDate: Optional[date] = Field(
        None,
        description='MCPD (v2.1) (COLLDATE) 17. Collecting date of the sample [YYYYMMDD] where YYYY is the year, MM is the month and DD is the day. Missing data (MM or DD) should be indicated with hyphens or "00" [double zero].',
    )
    collectingInstitutes: Optional[
        List[GermplasmMCPDCollectingInfoCollectingInstitutes]
    ] = Field(None, description='Institutes which collected the sample')
    collectingMissionIdentifier: Optional[str] = Field(
        None,
        description='MCPD (v2.1) (COLLMISSID) 4.2 Identifier of the collecting mission used by the Collecting Institute (4 or 4.1) (e.g. "CIATFOR_052", "CN_426").',
        example='CIATFOR_052',
    )
    collectingNumber: Optional[str] = Field(
        None,
        description='MCPD (v2.1) (COLLNUMB) 3. Original identifier assigned by the collector(s) of the sample, normally composed of the name or initials of the collector(s) followed by a number (e.g. "ab109909"). This identifier is essential for identifying duplicates held in different collections.',
        example='ab109909',
    )
    collectingSite: Optional[GermplasmMCPDCollectingInfoCollectingSite] = None


class GermplasmMCPDDonorInfoDonorInstitute(BaseModel):
    instituteCode: Optional[str] = Field(
        None,
        description='MCPD (v2.1) (DONORCODE) 22. FAO WIEWS code of the donor institute. Follows INSTCODE standard.',
        example='PER001',
    )
    instituteName: Optional[str] = Field(
        None,
        description='MCPD (v2.1) (DONORNAME) 22.1  Name of the donor institute (or person). This descriptor should be used only if DONORCODE can not be filled because the FAO WIEWS code for this institute is not available.',
        example='The BrAPI Institute',
    )


class GermplasmMCPDDonorInfo(BaseModel):
    donorAccessionNumber: Optional[str] = Field(
        None,
        description='MCPD (v2.1) (DONORNUMB) 23. Identifier assigned to an accession by the donor. Follows ACCENUMB standard.',
        example='A0090204',
    )
    donorAccessionPui: Optional[str] = Field(
        None,
        description='PUI (DOI mostly) of the accession in the donor system.',
        example='http://pui.per/accession/A0010025',
    )
    donorInstitute: Optional[GermplasmMCPDDonorInfoDonorInstitute] = None


class GermplasmMCPDSafetyDuplicateInstitutes(BaseModel):
    instituteCode: Optional[str] = Field(
        None,
        description='MCPD (v2.1) (DUPLSITE) 25. FAO WIEWS code of the institute(s) where a safety duplicate of the accession is maintained. Follows INSTCODE standard.',
        example='PER001',
    )
    instituteName: Optional[str] = Field(
        None,
        description='MCPD (v2.1) (DUPLINSTNAME) 25.1  Name of the institute where a safety duplicate of the accession is maintained.',
        example='The BrAPI Institute',
    )


class GermplasmNewRequestDonors(BaseModel):
    donorAccessionNumber: Optional[str] = Field(
        None,
        description='The accession number assigned by the donor\n\nMIAPPE V1.1 (DM-50) Material source ID (Holding institute/stock centre, accession) - An identifier for the source of the biological material, in the form of a key-value pair comprising the name/identifier of the repository from which the material was sourced plus the accession number of the repository for that material. Where an accession number has not been assigned, but the material has been derived from the crossing of known accessions, the material can be defined as follows: "mother_accession X father_accession", or, if father is unknown, as "mother_accession X UNKNOWN". For in situ material, the region of provenance may be used when an accession is not available.\n                  \nMCPD (v2.1) (DONORNUMB) 23. Identifier assigned to an accession by the donor. Follows ACCENUMB standard.',
        example='A0000123',
    )
    donorInstituteCode: Optional[str] = Field(
        None,
        description='The institute code for the donor institute\n\nMIAPPE V1.1 (DM-50) Material source ID (Holding institute/stock centre, accession) - An identifier for the source of the biological material, in the form of a key-value pair comprising the name/identifier of the repository from which the material was sourced plus the accession number of the repository for that material. Where an accession number has not been assigned, but the material has been derived from the crossing of known accessions, the material can be defined as follows: "mother_accession X father_accession", or, if father is unknown, as "mother_accession X UNKNOWN". For in situ material, the region of provenance may be used when an accession is not available.\n\nMCPD (v2.1) (DONORCODE) 22. FAO WIEWS code of the donor institute. Follows INSTCODE standard.',
        example='PER001',
    )
    germplasmPUI: Optional[str] = Field(
        None,
        description='The Permanent Unique Identifier which represents a germplasm from the source or donor\n\nMIAPPE V1.1 (DM-51) Material source DOI - Digital Object Identifier (DOI) of the material source',
        example='http://pui.per/accession/A0000003',
    )


class Code(Enum):
    field_10 = '10'
    field_11 = '11'
    field_12 = '12'
    field_13 = '13'
    field_20 = '20'
    field_30 = '30'
    field_40 = '40'
    field_50 = '50'
    field_99 = '99'


class GermplasmNewRequestStorageTypes(BaseModel):
    code: Optional[Code] = Field(
        None,
        description='The 2 digit code representing the type of storage this germplasm is kept in at a genebank. \n\nMCPD (v2.1) (STORAGE) 26. If germplasm is maintained under different types of storage, multiple choices are allowed, separated by a semicolon (e.g. 20;30). (Refer to FAO/IPGRI Genebank Standards 1994 for details on storage type.) \n\n10) Seed collection \n11) Short term \n12) Medium term \n13) Long term \n20) Field collection \n30) In vitro collection \n40) Cryo-preserved collection \n50) DNA collection \n99) Other (elaborate in REMARKS field)',
        example='11',
    )
    description: Optional[str] = Field(
        None,
        description='A supplemental text description of the storage type',
        example='Short term',
    )


class GermplasmNewRequestSynonyms(BaseModel):
    synonym: Optional[str] = Field(
        None,
        description='Alternative name or ID used to reference this germplasm',
        example='variety_1',
    )
    type: Optional[str] = Field(
        None,
        description='A descriptive classification for this synonym',
        example='Pre-Code',
    )


class Type(Enum):
    OBO = 'OBO'
    RDF = 'RDF'
    WEBPAGE = 'WEBPAGE'


class OntologyReferenceDocumentationLinks(BaseModel):
    URL: Optional[AnyUrl] = Field(None, example='http://purl.obolibrary.org/obo/ro.owl')
    type: Optional[Type] = Field(None, example='OBO')


# # note: Commented out from the Auto-generated because it was a duplicate of ParentType(enum)
# class ParentType1(Enum):
#     MALE = 'MALE'
#     FEMALE = 'FEMALE'
#     SELF = 'SELF'
#     POPULATION = 'POPULATION'


class PedigreeNodeParents(BaseModel):
    germplasmDbId: Optional[str] = Field(
        None,
        description='The germplasm DbId of the parent of this germplasm',
        example='a55847ed',
    )
    germplasmName: Optional[str] = Field(
        None,
        description='the human readable name of the parent of this germplasm',
        example='A0000592',
    )
    parentType: Optional[ParentType] = Field(
        None,
        description="The type of parent the parent is. ex. 'MALE', 'FEMALE', 'SELF', 'POPULATION', etc.",
        example='FEMALE',
    )


class PedigreeNodeSiblings(BaseModel):
    germplasmDbId: Optional[str] = Field(
        None, description='the germplasm DbId of the sibling'
    )
    germplasmName: Optional[str] = Field(
        None, description='the germplasm name of the sibling'
    )


# note: Commented out from the Auto-generated because it was a duplicate of ParentType(enum)
# class ParentType2(Enum):
#     MALE = 'MALE'
#     FEMALE = 'FEMALE'
#     SELF = 'SELF'
#     POPULATION = 'POPULATION'


class ProgenyNodeProgeny(BaseModel):
    germplasmDbId: str = Field(
        ...,
        description='The unique identifier of a progeny germplasm',
        example='e8d5dad7',
    )
    germplasmName: Optional[str] = Field(
        None,
        description='The human readable name of a progeny germplasm',
        example='A0021011',
    )
    parentType: ParentType = Field(
        ...,
        description="Given a germplasm A having a progeny B and C, 'parentType' for progeny B item refers to the 'parentType' of A toward B.",
        example='FEMALE',
    )


class ScaleBaseClassValidValuesCategories(BaseModel):
    label: Optional[str] = Field(None, description='A text label for a category')
    value: Optional[str] = Field(None, description='The actual value for a category')


class ScaleBaseClassValidValues(BaseModel):
    categories: Optional[List[ScaleBaseClassValidValuesCategories]] = Field(
        None,
        description='List of possible values with optional labels',
        example=[
            {'label': 'low', 'value': '0'},
            {'label': 'medium', 'value': '5'},
            {'label': 'high', 'value': '10'},
        ],
    )
    max: Optional[int] = Field(
        None,
        description='Maximum value (used for field data capture control).',
        example=9999,
    )
    min: Optional[int] = Field(
        None,
        description='Minimum value (used for data capture control) for numerical and date scales',
        example=2,
    )


class GermplasmAttributeCategoryListResponseResult(BaseModel):
    data: List[str] = Field(..., example=['Morphological', 'Agronomic'])


class BreedingMethodListResponseResult(BaseModel):
    data: List[BreedingMethod]


class Field202AcceptedSearchResponseResult(BaseModel):
    searchResultsDbId: Optional[str] = Field(None, example='551ae08c')


class ExternalReferences(BaseModel):
    __root__: List[ExternalReferencesInner] = Field(
        ...,
        description='An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.',
        example=[
            {'referenceID': 'doi:10.155454/12341234', 'referenceSource': 'DOI'},
            {
                'referenceID': 'http://purl.obolibrary.org/obo/ro.owl',
                'referenceSource': 'OBO Library',
            },
            {
                'referenceID': '75a50e76',
                'referenceSource': 'Remote Data Collection Upload Tool',
            },
        ],
        title='ExternalReferences',
    )


class GermplasmAttributeSearchRequest(
    SearchRequestParametersPaging, SearchRequestParametersExternalReferences
):
    attributeDbIds: Optional[List[str]] = Field(
        None,
        description='List of Germplasm Attribute IDs to search for',
        example=['2ef15c9f', '318e7f7d'],
    )
    attributeNames: Optional[List[str]] = Field(
        None,
        description='List of human readable Germplasm Attribute names to search for',
        example=['Plant Height 1', 'Root Color'],
    )
    dataTypes: Optional[List[TraitDataType]] = Field(
        None,
        description='List of scale data types to filter search results',
        example=['Numerical', 'Ordinal', 'Text'],
    )
    methodDbIds: Optional[List[str]] = Field(
        None,
        description='List of methods to filter search results',
        example=['07e34f83', 'd3d5517a'],
    )
    ontologyDbIds: Optional[List[str]] = Field(
        None,
        description='List of ontology IDs to search for',
        example=['f44f7b23', 'a26b576e'],
    )
    scaleDbIds: Optional[List[str]] = Field(
        None,
        description='List of scales to filter search results',
        example=['a13ecffa', '7e1afe4f'],
    )
    studyDbId: Optional[List[str]] = Field(
        None,
        description='The unique ID of a studies to filter on',
        example=['5bcac0ae', '7f48e22d'],
    )
    traitClasses: Optional[List[str]] = Field(
        None,
        description='List of trait classes to filter search results',
        example=['morphological', 'phenological', 'agronomical'],
    )
    traitDbIds: Optional[List[str]] = Field(
        None,
        description='List of trait unique ID to filter search results',
        example=['ef81147b', '78d82fad'],
    )


class GermplasmAttributeValueNewRequest(BaseModel):
    additionalInfo: Optional[Dict[str, AdditionalInfo]] = Field(
        None, description='Additional arbitrary info'
    )
    attributeDbId: Optional[str] = Field(
        None,
        description='The ID which uniquely identifies this attribute within the given database server',
        example='e529dd5a',
    )
    attributeName: str = Field(
        ...,
        description='A human readable name for this attribute',
        example='Weevil Resistance',
    )
    determinedDate: Optional[datetime] = Field(
        None,
        description='The date the value of this attribute was determined for a given germplasm',
    )
    externalReferences: Optional[ExternalReferences] = None
    germplasmDbId: Optional[str] = Field(
        None,
        description='The ID which uniquely identifies a germplasm within the given database server',
        example='d4076594',
    )
    germplasmName: Optional[str] = Field(
        None,
        description='Name of the germplasm. It can be the preferred name and does not have to be unique.',
        example='A0000003',
    )
    value: Optional[str] = Field(
        None,
        description='The value of this attribute for a given germplasm',
        example='Present',
    )


class GermplasmAttributeValueSearchRequest(
    SearchRequestParametersPaging,
    SearchRequestParametersGermplasm,
    SearchRequestParametersExternalReferences,
):
    attributeDbIds: Optional[List[str]] = Field(
        None,
        description='List of Germplasm Attribute IDs to search for',
        example=['2ef15c9f', '318e7f7d'],
    )
    attributeNames: Optional[List[str]] = Field(
        None,
        description='List of human readable Germplasm Attribute names to search for',
        example=['Plant Height 1', 'Root Color'],
    )
    attributeValueDbIds: Optional[List[str]] = Field(
        None,
        description='List of Germplasm Attribute Value IDs to search for',
        example=['ca4636d0', 'c8a92409'],
    )
    dataTypes: Optional[List[TraitDataType]] = Field(
        None,
        description='List of scale data types to filter search results',
        example=['Numerical', 'Ordinal', 'Text'],
    )
    methodDbIds: Optional[List[str]] = Field(
        None,
        description='List of methods to filter search results',
        example=['07e34f83', 'd3d5517a'],
    )
    ontologyDbIds: Optional[List[str]] = Field(
        None,
        description='List of ontology IDs to search for',
        example=['f44f7b23', 'a26b576e'],
    )
    scaleDbIds: Optional[List[str]] = Field(
        None,
        description='List of scales to filter search results',
        example=['a13ecffa', '7e1afe4f'],
    )
    traitClasses: Optional[List[str]] = Field(
        None,
        description='List of trait classes to filter search results',
        example=['morphological', 'phenological', 'agronomical'],
    )
    traitDbIds: Optional[List[str]] = Field(
        None,
        description='List of trait unique ID to filter search results',
        example=['ef81147b', '78d82fad'],
    )


class GermplasmMCPD(BaseModel):
    accessionNames: Optional[List[str]] = Field(
        None,
        description='MCPD (v2.1) (ACCENAME) 11. Either a registered or other designation given to the material received, other than the donors accession number (23) or collecting number (3). First letter uppercase. Multiple names are separated by a semicolon without space.',
        example=['Symphony', 'Emma'],
    )
    accessionNumber: Optional[str] = Field(
        None,
        description='MCPD (v2.1) (ACCENUMB) 2. This is the unique identifier for accessions within a genebank, and is assigned when a sample is entered into the genebank collection (e.g. "PI 113869").',
        example='A0000003',
    )
    acquisitionDate: Optional[date] = Field(
        None,
        description='MCPD (v2.1) (ACQDATE) 12. Date on which the accession entered the collection [YYYYMMDD] where YYYY is the year, MM is the month and DD is the day. Missing data (MM or DD) should be indicated with hyphens or "00" [double zero].',
    )
    acquisitionSourceCode: Optional[AcquisitionSourceCode] = Field(
        None,
        description='MCPD (v2.1) (COLLSRC) 21. The coding scheme proposed can be used at 2 different levels of detail: either by using the general codes (in bold-face) such as 10, 20, 30, 40, etc., or by using the more specific codes, such as 11, 12, etc. \n\n10) Wild habitat \n11) Forest or woodland \n12) Shrubland \n13) Grassland \n14) Desert or tundra \n15) Aquatic habitat \n20) Farm or cultivated habitat \n21) Field \n22) Orchard \n23) Backyard, kitchen or home garden (urban, peri-urban or rural) \n24) Fallow land \n25) Pasture \n26) Farm store \n27) Threshing floor \n28) Park \n30) Market or shop \n40) Institute, Experimental station, Research organization, Genebank \n50) Seed company \n60) Weedy, disturbed or ruderal habitat \n61) Roadside \n62) Field margin \n99) Other (Elaborate in REMARKS field)',
        example='26',
    )
    alternateIDs: Optional[List[str]] = Field(
        None,
        description='MCPD (v2.1) (OTHERNUMB) 24. Any other identifiers known to exist in other collections for this accession. Use the following format: INSTCODE:ACCENUMB;INSTCODE:identifier;INSTCODE and identifier are separated by a colon without space. Pairs of INSTCODE and identifier are separated by a semicolon without space. When the institute is not known, the identifier should be preceded by a colon. ',
        example=['3', 'http://pui.per/accession/A0000003', 'A0000003'],
    )
    ancestralData: Optional[str] = Field(
        None,
        description="MCPD (v2.1) (ANCEST) 20. Information about either pedigree or other description of ancestral information (e.g. parent variety in case of mutant or selection). For example a pedigree 'Hanna/7*Atlas//Turk/8*Atlas' or a description 'mutation found in Hanna', 'selection from Irene' or 'cross involving amongst others Hanna and Irene'.",
        example='A0000001/A0000002',
    )
    biologicalStatusOfAccessionCode: Optional[BiologicalStatusOfAccessionCode] = Field(
        None,
        description='MCPD (v2.1) (SAMPSTAT) 19. The coding scheme proposed can be used at 3 different levels of detail: either by using the general codes such as 100, 200, 300, 400, or by using the more specific codes such as 110, 120, etc. \n\n100) Wild \n110) Natural \n120) Semi-natural/wild \n130) Semi-natural/sown \n200) Weedy \n300) Traditional cultivar/landrace \n400) Breeding/research material \n410) Breeders line \n411) Synthetic population \n412) Hybrid \n413) Founder stock/base population \n414) Inbred line (parent of hybrid cultivar) \n415) Segregating population \n416) Clonal selection \n420) Genetic stock \n421) Mutant (e.g. induced/insertion mutants, tilling populations) \n422) Cytogenetic stocks (e.g. chromosome addition/substitution, aneuploids,  amphiploids) \n423) Other genetic stocks (e.g. mapping populations) \n500) Advanced or improved cultivar (conventional breeding methods) \n600) GMO (by genetic engineering) \n999) Other (Elaborate in REMARKS field)',
        example='421',
    )
    breedingInstitutes: Optional[List[GermplasmMCPDBreedingInstitutes]] = None
    collectingInfo: Optional[GermplasmMCPDCollectingInfo] = None
    commonCropName: Optional[str] = Field(
        None,
        description='MCPD (v2.1) (CROPNAME) 10. Common name of the crop. Example: "malting barley", "mas". ',
        example='malting barley',
    )
    countryOfOrigin: Optional[str] = Field(
        None,
        description='MCPD (v2.1) (ORIGCTY) 13. 3-letter ISO 3166-1 code of the country in which the sample was originally collected (e.g. landrace, crop wild relative, farmers" variety), bred or selected (breeding lines, GMOs, segregating populations, hybrids, modern cultivars, etc.). Note: Descriptors 14 to 16 below should be completed accordingly only if it was "collected".',
        example='Peru',
    )
    donorInfo: Optional[GermplasmMCPDDonorInfo] = None
    genus: Optional[str] = Field(
        None,
        description='MCPD (v2.1) (GENUS) 5. Genus name for taxon. Initial uppercase letter required.',
        example='Aspergillus',
    )
    germplasmDbId: Optional[str] = Field(
        None,
        description='A unique identifier which identifies a germplasm in this database',
        example='31c4efbc',
    )
    germplasmPUI: Optional[str] = Field(
        None,
        description='MCPD (v2.1) (PUID) 0. Any persistent, unique identifier assigned to the accession so it can be unambiguously referenced at the global level and the information associated with it harvested through automated means. Report one PUID for each accession. The Secretariat of the International Treaty on Plant Genetic Resources for Food and Agriculture (PGRFA) is facilitating the assignment of a persistent unique identifier (PUID), in the form of a DOI, to PGRFA at the accession level. Genebanks not applying a true PUID to their accessions should use, and request recipients to use, the concatenation of INSTCODE, ACCENUMB, and GENUS as a globally unique identifier similar in most respects to the PUID whenever they exchange information on accessions with third parties.',
        example='http://pui.per/accession/A0403652',
    )
    instituteCode: Optional[str] = Field(
        None,
        description='MCPD (v2.1) (INSTCODE) 1. FAO WIEWS code of the institute where the accession is maintained. The codes consist of the 3-letter ISO 3166 country code of the country where the institute is located plus a number (e.g. PER001). The current set of institute codes is available from http://www.fao.org/wiews. For those institutes not yet having an FAO Code, or for those with "obsolete" codes, see "Common formatting rules (v)".',
        example='PER001',
    )
    mlsStatus: Optional[MlsStatus] = Field(
        None,
        description='MCPD (v2.1) (MLSSTAT) 27. The status of an accession with regards to the Multilateral System (MLS) of the International Treaty on Plant Genetic Resources for Food and Agriculture. Leave the value empty if the status is not known 0 No (not included) 1 Yes (included) 99 Other (elaborate in REMARKS field, e.g. "under development")',
        example='0',
    )
    remarks: Optional[str] = Field(
        None,
        description='MCPD (v2.1) (REMARKS) 28. The remarks field is used to add notes or to elaborate on descriptors with value 99 or 999 (= Other). Prefix remarks with the field name they refer to and a colon (:) without space (e.g. COLLSRC:riverside). Distinct remarks referring to different fields are separated by semi-colons without space.',
        example='This is an example remark to demonstrate that any notable information can be put here',
    )
    safetyDuplicateInstitutes: Optional[
        List[GermplasmMCPDSafetyDuplicateInstitutes]
    ] = None
    species: Optional[str] = Field(
        None,
        description='MCPD (v2.1) (SPECIES) 6. Specific epithet portion of the scientific name in lowercase letters. Only the following abbreviation is allowed: "sp." ',
        example='fructus',
    )
    speciesAuthority: Optional[str] = Field(
        None,
        description='MCPD (v2.1) (SPAUTHOR) 7. Provide the authority for the species name.',
        example='Smith, 1822',
    )
    storageTypeCodes: Optional[List[StorageTypeCode]] = Field(
        None,
        description='MCPD (v2.1) (STORAGE) 26. If germplasm is maintained under different types of storage, multiple choices are allowed, separated by a semicolon (e.g. 20;30). (Refer to FAO/IPGRI Genebank Standards 1994 for details on storage type.) 10) Seed collection 11) Short term 12) Medium term 13) Long term 20) Field collection 30) In vitro collection 40) Cryo-preserved collection 50) DNA collection 99) Other (elaborate in REMARKS field)',
        example=['11', '13'],
    )
    subtaxon: Optional[str] = Field(
        None,
        description='MCPD (v2.1) (SUBTAXA) 8. Subtaxon can be used to store any additional taxonomic identifier. The following abbreviations are allowed: "subsp." (for subspecies); "convar." (for convariety); "var." (for variety); "f." (for form); "Group" (for "cultivar group").',
        example='Aspergillus fructus A',
    )
    subtaxonAuthority: Optional[str] = Field(
        None,
        description='MCPD (v2.1) (SUBTAUTHOR) 9. Provide the subtaxon authority at the most detailed taxonomic level.',
        example='Smith, 1822',
    )


class GermplasmSearchRequest(
    SearchRequestParametersPaging,
    SearchRequestParametersCommonCropNames,
    SearchRequestParametersGermplasm,
    SearchRequestParametersStudies,
    SearchRequestParametersExternalReferences,
):
    accessionNumbers: Optional[List[str]] = Field(
        None,
        description='List unique identifiers for accessions within a genebank',
        example=['A0000003', 'A0000477'],
    )
    collections: Optional[List[str]] = Field(
        None,
        description='A specific panel/collection/population name this germplasm belongs to.',
        example=['RDP1', 'MDP1'],
    )
    genus: Optional[List[str]] = Field(
        None,
        description='List of Genus names to identify germplasm',
        example=['Aspergillus', 'Zea'],
    )
    germplasmPUIs: Optional[List[str]] = Field(
        None,
        description='List of Permanent Unique Identifiers to identify germplasm',
        example=[
            'http://pui.per/accession/A0000003',
            'http://pui.per/accession/A0000477',
        ],
    )
    parentDbIds: Optional[List[str]] = Field(
        None,
        description='Search for Germplasm with these parents',
        example=['72c1001f', '7346c553'],
    )
    progenyDbIds: Optional[List[str]] = Field(
        None,
        description='Search for Germplasm with these children',
        example=['16e16a7e', 'ce06cf9e'],
    )
    species: Optional[List[str]] = Field(
        None,
        description='List of Species names to identify germplasm',
        example=['fructus', 'mays'],
    )
    synonyms: Optional[List[str]] = Field(
        None,
        description='List of alternative names or IDs used to reference this germplasm',
        example=['variety_1', '2c38f9b6'],
    )


class OntologyReference(BaseModel):
    documentationLinks: Optional[List[OntologyReferenceDocumentationLinks]] = Field(
        None, description='links to various ontology documentation'
    )
    ontologyDbId: str = Field(
        ..., description='Ontology database unique identifier', example='6b071868'
    )
    ontologyName: str = Field(
        ..., description='Ontology name', example='The Crop Ontology'
    )
    version: Optional[str] = Field(
        None, description='Ontology version (no specific format)', example='7.2.3'
    )


class PedigreeNode(BaseModel):
    crossingProjectDbId: Optional[str] = Field(
        None,
        description='The crossing project used to generate this germplasm',
        example='625e745a',
    )
    crossingYear: Optional[int] = Field(
        None, description='The year the parents were originally crossed', example=2005
    )
    familyCode: Optional[str] = Field(
        None, description='The code representing the family', example='F0000203'
    )
    germplasmDbId: str = Field(
        ...,
        description='The ID which uniquely identifies a germplasm',
        example='1098ebaf',
    )
    germplasmName: Optional[str] = Field(
        None, description='A human readable name for a germplasm', example='A0021004'
    )
    parents: Optional[List[PedigreeNodeParents]] = Field(
        None,
        description='List of parent nodes in the pedigree tree.',
        example=[
            {
                'germplasmDbId': 'b66958de',
                'germplasmName': 'A0000592',
                'parentType': 'MALE',
            },
            {
                'germplasmDbId': 'a55847ed',
                'germplasmName': 'A0000592',
                'parentType': 'FEMALE',
            },
        ],
    )
    pedigree: Optional[str] = Field(
        None,
        description='The string representation of the pedigree.',
        example='A0000001/A0000002',
    )
    siblings: Optional[List[PedigreeNodeSiblings]] = Field(
        None,
        description='List of sibling germplasm',
        example=[
            {'germplasmDbId': '334f53a3', 'germplasmName': 'A0021005'},
            {'germplasmDbId': '7bbbda8c', 'germplasmName': 'A0021006'},
            {'germplasmDbId': 'ab1d9b26', 'germplasmName': 'A0021007'},
        ],
    )


class PlannedCrossNewRequest(BaseModel):
    additionalInfo: Optional[Dict[str, AdditionalInfo]] = Field(
        None, description='Additional arbitrary info'
    )
    crossType: Optional[CrossType] = Field(
        None, description='the type of cross', example='BIPARENTAL'
    )
    crossingProjectDbId: Optional[str] = Field(
        None,
        description='the unique identifier for a crossing project',
        example='696d7c92',
    )
    crossingProjectName: Optional[str] = Field(
        None,
        description='the human readable name for a crossing project',
        example='my_Crosses_2018',
    )
    externalReferences: Optional[ExternalReferences] = None
    parent1: Optional[CrossParent] = None
    parent2: Optional[CrossParent] = None
    plannedCrossName: Optional[str] = Field(
        None,
        description='the human readable name for a cross',
        example='my_Crosses_2018_01',
    )


class ProgenyNode(BaseModel):
    germplasmDbId: str = Field(
        ...,
        description='The ID which uniquely identifies a germplasm',
        example='01b974dc',
    )
    germplasmName: Optional[str] = Field(
        None, description='A human readable name for a germplasm', example='A0021004'
    )
    progeny: List[ProgenyNodeProgeny] = Field(
        ...,
        description='List of germplasm entities which are direct children of this germplasm',
        example=[
            {
                'germplasmDbId': 'e8d5dad7',
                'germplasmName': 'A0021011',
                'parentType': 'FEMALE',
            },
            {
                'germplasmDbId': 'ac07fbd8',
                'germplasmName': 'A0021012',
                'parentType': 'FEMALE',
            },
            {
                'germplasmDbId': '07f45f67',
                'germplasmName': 'A0021013',
                'parentType': 'FEMALE',
            },
        ],
    )


class ScaleBaseClass(BaseModel):
    additionalInfo: Optional[Dict[str, AdditionalInfo]] = Field(
        None, description='Additional arbitrary info'
    )
    dataType: Optional[TraitDataType] = None
    decimalPlaces: Optional[int] = Field(
        None,
        description='For numerical, number of decimal places to be reported',
        example=2,
    )
    externalReferences: Optional[ExternalReferences] = None
    ontologyReference: Optional[OntologyReference] = None
    scaleName: str = Field(
        ...,
        description='Name of the scale\n\nMIAPPE V1.1 (DM-92) Scale Name of the scale associated with the variable',
        example='Meters',
    )
    validValues: Optional[ScaleBaseClassValidValues] = None


class SeedLotNewRequest(BaseModel):
    additionalInfo: Optional[Dict[str, AdditionalInfo]] = Field(
        None, description='Additional arbitrary info'
    )
    amount: Optional[float] = Field(
        None,
        description='Current balance of seeds in this lot. Could be a count (seeds, bulbs, etc) or a weight (kg of seed).',
        example=561,
    )
    createdDate: Optional[datetime] = Field(
        None, description='The time stamp for when this seed lot was created'
    )
    externalReferences: Optional[ExternalReferences] = None
    germplasmDbId: Optional[str] = Field(
        None,
        description='Unique DbId of the Germplasm held in this Seed Lot',
        example='029d705d',
    )
    lastUpdated: Optional[datetime] = Field(
        None,
        description='The timestamp for the last update to this Seed Lot (including transactions)',
    )
    locationDbId: Optional[str] = Field(
        None, description='DbId of the storage location', example='7989c44c'
    )
    programDbId: Optional[str] = Field(
        None,
        description='Unique DbId of the breeding Program this Seed Lot belongs to',
        example='e972d569',
    )
    seedLotDescription: Optional[str] = Field(
        None,
        description='A general description of this Seed Lot',
        example='This is a description of a seed lot',
    )
    seedLotName: Optional[str] = Field(
        None,
        description='A human readable name for this Seed Lot',
        example='Seed Lot Alpha',
    )
    sourceCollection: Optional[str] = Field(
        None,
        description='The description of the source where this material was originally collected (wild, nursery, etc)',
        example='nursery',
    )
    storageLocation: Optional[str] = Field(
        None,
        description='Description the storage location',
        example='The storage location is an massive, underground, bunker.',
    )
    units: Optional[str] = Field(
        None,
        description='Description of the things being counted in this Seed Lot (seeds, bulbs, kg, tree, etc)',
        example='seeds',
    )


class SeedLotNewTransactionRequest(BaseModel):
    additionalInfo: Optional[Dict[str, AdditionalInfo]] = Field(
        None, description='Additional arbitrary info'
    )
    amount: Optional[float] = Field(
        None,
        description='The amount of units being transfered. Could be a count (seeds, bulbs, etc) or a weight (kg of seed).',
        example=45,
    )
    externalReferences: Optional[ExternalReferences] = None
    fromSeedLotDbId: Optional[str] = Field(
        None,
        description='The identifier for the Seed Lot being transfered out of',
        example='11eef13b',
    )
    toSeedLotDbId: Optional[str] = Field(
        None,
        description='The identifier for the Seed Lot being transfered into',
        example='59339b90',
    )
    transactionDescription: Optional[str] = Field(
        None,
        description='A general description of this Seed Lot Transaction',
        example='f9cd88d2',
    )
    transactionTimestamp: Optional[datetime] = Field(
        None, description='The time stamp for when the transaction occurred'
    )
    units: Optional[str] = Field(
        None,
        description='Description of the things being transfered in this transaction (seeds, bulbs, kg, etc)',
        example='seeds',
    )


class SeedLotTransaction(SeedLotNewTransactionRequest):
    transactionDbId: str = Field(
        ..., description='Unique DbId for the Seed Lot Transaction', example='28e46db9'
    )


class TraitBaseClass(BaseModel):
    additionalInfo: Optional[Dict[str, AdditionalInfo]] = Field(
        None, description='Additional arbitrary info'
    )
    alternativeAbbreviations: Optional[List[str]] = Field(
        None,
        description='Other frequent abbreviations of the trait, if any. These abbreviations do not have to follow a convention',
        example=['H', 'PH', 'H1'],
    )
    attribute: Optional[str] = Field(
        None,
        description='A trait can be decomposed as "Trait" = "Entity" + "Attribute", the attribute is the observed feature (or characteristic) of the entity e.g., for "grain colour", attribute = "colour"',
        example='height',
    )
    entity: Optional[str] = Field(
        None,
        description='A trait can be decomposed as "Trait" = "Entity" + "Attribute", the entity is the part of the plant that the trait refers to e.g., for "grain colour", entity = "grain"',
        example='Stalk',
    )
    externalReferences: Optional[ExternalReferences] = None
    mainAbbreviation: Optional[str] = Field(
        None,
        description='Main abbreviation for trait name. (examples: "Carotenoid content" => "CC")',
        example='PH',
    )
    ontologyReference: Optional[OntologyReference] = None
    status: Optional[str] = Field(
        None,
        description='Trait status (examples: "recommended", "obsolete", "legacy", etc.)',
        example='recommended',
    )
    synonyms: Optional[List[str]] = Field(
        None,
        description='Other trait names',
        example=['Height', 'Plant Height', 'Stalk Height', 'Canopy Height'],
    )
    traitClass: Optional[str] = Field(
        None,
        description='Trait class. (examples: "morphological", "phenological", "agronomical", "physiological", "abiotic stress", "biotic stress", "biochemical", "quality traits", "fertility", etc.)',
        example='phenological',
    )
    traitDescription: Optional[str] = Field(
        None,
        description='The description of a trait',
        example='The height of the plant',
    )
    traitName: Optional[str] = Field(
        None,
        description='The human readable name of a trait\n\nMIAPPE V1.1 (DM-86) Trait - Name of the (plant or environmental) trait under observation',
        example='Height',
    )

# note: Commented out from the Auto-generated because it was a duplicate of Scale(enum)
# class Scale1(ScaleBaseClass):
#     scaleDbId: str = Field(
#         ...,
#         description='Unique identifier of the scale. If left blank, the upload system will automatically generate a scale ID.',
#         example='af730171',
#     )

# note: Commented out from the Auto-generated because it was a duplicate of Trait(enum)
# class Trait1(TraitBaseClass):
#     traitDbId: Optional[str] = Field(
#         None, description='The ID which uniquely identifies a trait', example='9b2e34f5'
#     )


class LinearRing(BaseModel):
    __root__: List[Position] = Field(
        ...,
        description='An array of at least four positions where the first equals the last',
        example=[
            [-77.456654, 42.241133, 494],
            [-75.414133, 41.508282, 571],
            [-76.506042, 42.417373, 123],
            [-77.456654, 42.241133, 346],
        ],
        min_items=4,
    )


class MetadataBase(BaseModel):
    datafiles: Optional[List[DataFile]] = Field(
        None,
        description='The datafiles contains a list of file URLs and metadata. \nThese files contain additional information related to the returned object and can be retrieved by a subsequent call. \nThis could be a supplementary data file, an informational file, the uploaded file where the data originated from, a generated file representing the whole dataset in a particular format, or any other related file. ',
    )
    status: Optional[List[Status]] = Field(
        None,
        description='The status field contains a list of informational status messages from the server. \nIf no status is reported, an empty list should be returned. See Error Reporting for more information.',
    )


class MetadataTokenPagination(MetadataBase):
    pagination: Optional[TokenPagination] = None


class PointGeometry(BaseModel):
    coordinates: Optional[Position] = None
    type: Optional[str] = Field(
        'Point', description='The literal string "Point"', example='Point'
    )


class Polygon(BaseModel):
    __root__: List[LinearRing] = Field(
        ...,
        description='An array of linear rings',
        example=[
            [
                [-77.456654, 42.241133, 494],
                [-75.414133, 41.508282, 571],
                [-76.506042, 42.417373, 123],
                [-77.456654, 42.241133, 346],
            ]
        ],
    )


class PolygonGeometry(BaseModel):
    coordinates: Optional[Polygon] = None
    type: Optional[str] = Field(
        'Polygon', description='The literal string "Polygon"', example='Polygon'
    )


class SeedLotTransactionListResponseResult(BaseModel):
    data: List[SeedLotTransaction]


class CrossNewRequest(BaseModel):
    additionalInfo: Optional[Dict[str, AdditionalInfo]] = Field(
        None, description='Additional arbitrary info'
    )
    crossAttributes: Optional[List[CrossNewRequestCrossAttributes]] = Field(
        None, description='Set of custom attributes associated with a cross'
    )
    crossName: Optional[str] = Field(
        None,
        description='the human readable name for a cross',
        example='my_Crosses_2018_01',
    )
    crossType: Optional[CrossType] = Field(
        None, description='the type of cross', example='BIPARENTAL'
    )
    crossingProjectDbId: Optional[str] = Field(
        None,
        description='the unique identifier for a crossing project',
        example='696d7c92',
    )
    crossingProjectName: Optional[str] = Field(
        None,
        description='the human readable name for a crossing project',
        example='my_Crosses_2018',
    )
    externalReferences: Optional[ExternalReferences] = None
    parent1: Optional[CrossParent] = None
    parent2: Optional[CrossParent] = None
    pollinationTimeStamp: Optional[datetime] = Field(
        None, description='the timestamp when the pollination took place'
    )


class CrossingProjectNewRequest(BaseModel):
    additionalInfo: Optional[Dict[str, AdditionalInfo]] = Field(
        None, description='Additional arbitrary info'
    )
    commonCropName: Optional[str] = Field(
        None,
        description='the common name of a crop (for multi-crop systems)',
        example='Cassava',
    )
    crossingProjectDescription: Optional[str] = Field(
        None,
        description='the description for a crossing project',
        example='Crosses between germplasm X and germplasm Y in male nursery study X_2018 and female nursery study Y_2018',
    )
    crossingProjectName: Optional[str] = Field(
        None,
        description='the human readable name for a crossing project',
        example='Crosses_2018',
    )
    externalReferences: Optional[ExternalReferences] = None
    programDbId: Optional[str] = Field(
        None, description='the unique identifier for a program', example='a088176c'
    )
    programName: Optional[str] = Field(
        None,
        description='the human readable name for a program',
        example='IITA Cassava',
    )


class GermplasmAttributeValue(GermplasmAttributeValueNewRequest):
    attributeValueDbId: str = Field(
        ...,
        description='The ID which uniquely identifies this attribute value within the given database server',
        example='33edbab7',
    )


class MethodBaseClass(BaseModel):
    additionalInfo: Optional[Dict[str, AdditionalInfo]] = Field(
        None, description='Additional arbitrary info'
    )
    bibliographicalReference: Optional[str] = Field(
        None,
        description='Bibliographical reference describing the method.\n\nMIAPPE V1.1 (DM-91) Reference associated to the method - URI/DOI of reference describing the method.',
        example='Smith, 1893, Really Cool Paper, Popular Journal',
    )
    description: Optional[str] = Field(
        None,
        description='Method description\n\nMIAPPE V1.1 (DM-90) Method description - Textual description of the method, which may extend a method defined in an external reference with specific parameters, e.g. growth stage, inoculation precise organ (leaf number)',
        example='A measuring tape was used',
    )
    externalReferences: Optional[ExternalReferences] = None
    formula: Optional[str] = Field(
        None,
        description='For computational methods i.e., when the method consists in assessing the trait by computing measurements, write the generic formula used for the calculation',
        example='a^2 + b^2 = c^2',
    )
    methodClass: Optional[str] = Field(
        None,
        description='Method class (examples: "Measurement", "Counting", "Estimation", "Computation", etc.)',
        example='Measurement',
    )
    methodName: Optional[str] = Field(
        None,
        description='Human readable name for the method\n\nMIAPPE V1.1 (DM-88) Method  Name of the method of observation',
        example='Measuring Tape',
    )
    ontologyReference: Optional[OntologyReference] = None


class PlannedCross(PlannedCrossNewRequest):
    plannedCrossDbId: Optional[str] = Field(
        None, description='the unique identifier for a cross', example='c8905568'
    )


class Scale(ScaleBaseClass):
    scaleDbId: str = Field(
        ...,
        description='Unique identifier of the scale. If left blank, the upload system will automatically generate a scale ID.',
        example='af730171',
    )


class SeedLot(SeedLotNewRequest):
    seedLotDbId: str = Field(
        ..., description='Unique DbId for the Seed Lot', example='261ecb09'
    )


class Trait(TraitBaseClass):
    traitDbId: Optional[str] = Field(
        None, description='The ID which uniquely identifies a trait', example='9b2e34f5'
    )


#class Method1(MethodBaseClass):
class Method(MethodBaseClass):
    methodDbId: Optional[str] = Field(
        None, description='Method unique identifier', example='0adb2764'
    )


class VariableBaseClass(BaseModel):
    additionalInfo: Optional[Dict[str, AdditionalInfo]] = Field(
        None, description='Additional arbitrary info'
    )
    commonCropName: Optional[str] = Field(
        None, description='Crop name (examples: "Maize", "Wheat")', example='Maize'
    )
    contextOfUse: Optional[List[str]] = Field(
        None,
        description='Indication of how trait is routinely used. (examples: ["Trial evaluation", "Nursery evaluation"])',
        example=['Trial evaluation', 'Nursery evaluation'],
    )
    defaultValue: Optional[str] = Field(
        None,
        description='Variable default value. (examples: "red", "2.3", etc.)',
        example='2.0',
    )
    documentationURL: Optional[AnyUrl] = Field(
        None,
        description='A URL to the human readable documentation of this object',
        example='https://wiki.brapi.org/documentation.html',
    )
    externalReferences: Optional[ExternalReferences] = None
    growthStage: Optional[str] = Field(
        None,
        description='Growth stage at which measurement is made (examples: "flowering")',
        example='flowering',
    )
    institution: Optional[str] = Field(
        None,
        description='Name of institution submitting the variable',
        example='The BrAPI Institute',
    )
    language: Optional[str] = Field(
        None,
        description='2 letter ISO 639-1 code for the language of submission of the variable.',
        example='en',
    )
    method: Method
    ontologyReference: Optional[OntologyReference] = None
    scale: Scale
    scientist: Optional[str] = Field(
        None,
        description='Name of scientist submitting the variable.',
        example='Dr. Bob Robertson',
    )
    status: Optional[str] = Field(
        None,
        description='Variable status. (examples: "recommended", "obsolete", "legacy", etc.)',
        example='recommended',
    )
    submissionTimestamp: Optional[datetime] = Field(
        None, description='Timestamp when the Variable was added (ISO 8601)'
    )
    synonyms: Optional[List[str]] = Field(
        None,
        description='Other variable names',
        example=['Maize Height', 'Stalk Height', 'Corn Height'],
    )
    trait: Trait


class GeoJSON(BaseModel):
    geometry: Optional[Union[PointGeometry, PolygonGeometry]] = Field(
        None,
        description='A geometry as defined by GeoJSON (RFC 7946). In this context, only Point or Polygon geometry are allowed.',
        example={'coordinates': [-76.506042, 42.417373, 123], 'type': 'Point'},
        title='GeoJSON Geometry',
    )
    type: Optional[str] = Field(
        'Feature', description='The literal string "Feature"', example='Feature'
    )


class GeoJSONSearchArea(GeoJSON):
    pass


class Metadata(MetadataBase):
    pagination: Optional[IndexPagination] = None


class GermplasmAttributeCategoryListResponse(BaseModel):
    _context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: GermplasmAttributeCategoryListResponseResult


class GermplasmAttributeValueSingleResponse(BaseModel):
    _context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: GermplasmAttributeValue


class BreedingMethodListResponse(BaseModel):
    _context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: BreedingMethodListResponseResult


class BreedingMethodSingleResponse(BaseModel):
    _context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: BreedingMethod


class GermplasmMCPDResponse(BaseModel):
    _context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: GermplasmMCPD


class GermplasmPedigreeResponse(BaseModel):
    _context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: PedigreeNode


class GermplasmProgenyResponse(BaseModel):
    _context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: ProgenyNode


class Field202AcceptedSearchResponse(BaseModel):
    _context: Optional[Context] = Field(None, alias='@context')
    metadata: Optional[Metadata] = None
    result: Optional[Field202AcceptedSearchResponseResult] = None


class SeedLotTransactionListResponse(BaseModel):
    _context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: SeedLotTransactionListResponseResult


class SeedLotSingleResponse(BaseModel):
    _context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: SeedLot


class GermplasmAttributeValueListResponseResult(BaseModel):
    data: List[GermplasmAttributeValue]


class PlannedCrossesListResponseResult(BaseModel):
    data: List[PlannedCross]


class SeedLotListResponseResult(BaseModel):
    data: List[SeedLot]


class Cross(CrossNewRequest):
    crossDbId: Optional[str] = Field(
        None, description='the unique identifier for a cross', example='d105fd6f'
    )


class CrossingProject(CrossingProjectNewRequest):
    crossingProjectDbId: Optional[str] = Field(
        None,
        description='the unique identifier for a crossing project',
        example='ce0e1c29',
    )


class GermplasmAttributeNewRequest(VariableBaseClass):
    attributeCategory: Optional[str] = Field(
        None,
        description='General category for the attribute. very similar to Trait class.',
        example='Morphological',
    )
    attributeDescription: Optional[str] = Field(
        None,
        description='A human readable description of this attribute',
        example='Height of the plant measured in meters by a tape',
    )
    attributeName: str = Field(
        ...,
        description='A human readable name for this attribute',
        example='Plant Height 1',
    )


class GermplasmOrigin(BaseModel):
    coordinateUncertainty: Optional[str] = Field(
        None,
        description='Uncertainty associated with the coordinates in meters. Leave the value empty if the uncertainty is unknown.',
        example='20',
    )
    coordinates: Optional[GeoJSON] = None


# note: Commented out from the Auto-generated because it is duplicated above
# class Method(MethodBaseClass):
#     methodDbId: Optional[str] = Field(
#         None, description='Method unique identifier', example='0adb2764'
#     )


class GermplasmAttributeValueListResponse(BaseModel):
    _context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: GermplasmAttributeValueListResponseResult


class CrossingProjectsSingleResponse(BaseModel):
    _context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: CrossingProject


class PlannedCrossesListResponse(BaseModel):
    _context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: PlannedCrossesListResponseResult


class SeedLotListResponse(BaseModel):
    _context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: SeedLotListResponseResult


class CrossesListResponseResult(BaseModel):
    data: List[Cross]


class CrossingProjectsListResponseResult(BaseModel):
    data: List[CrossingProject]


class GermplasmAttribute(GermplasmAttributeNewRequest):
    attributeDbId: str = Field(
        ...,
        description='The ID which uniquely identifies this attribute within the given database server',
        example='2f08b902',
    )


class GermplasmNewRequest(BaseModel):
    accessionNumber: Optional[str] = Field(
        None,
        description='This is the unique identifier for accessions within a genebank, and is assigned when a sample is entered into the genebank collection\n\nMCPD (v2.1) (ACCENUMB) 2. This is the unique identifier for accessions within a genebank, and is assigned when a sample is entered into the genebank collection (e.g. "PI 113869").',
        example='A0000003',
    )
    acquisitionDate: Optional[date] = Field(
        None,
        description='The date this germplasm was acquired by the genebank \n\nMCPD (v2.1) (ACQDATE) 12. Date on which the accession entered the collection [YYYYMMDD] where YYYY is the year, MM is the month and DD is the day. Missing data (MM or DD) should be indicated with hyphens or "00" [double zero].',
    )
    additionalInfo: Optional[Dict[str, AdditionalInfo]] = Field(
        None, description='Additional arbitrary info'
    )
    biologicalStatusOfAccessionCode: Optional[BiologicalStatusOfAccessionCode] = Field(
        None,
        description='MCPD (v2.1) (SAMPSTAT) 19. The coding scheme proposed can be used at 3 different levels of detail: either by using the general codes such as 100, 200, 300, 400, or by using the more specific codes such as 110, 120, etc. \n\n100) Wild \n110) Natural \n120) Semi-natural/wild \n130) Semi-natural/sown \n200) Weedy \n300) Traditional cultivar/landrace \n400) Breeding/research material \n410) Breeders line \n411) Synthetic population \n412) Hybrid \n413) Founder stock/base population \n414) Inbred line (parent of hybrid cultivar) \n415) Segregating population \n416) Clonal selection \n420) Genetic stock \n421) Mutant (e.g. induced/insertion mutants, tilling populations) \n422) Cytogenetic stocks (e.g. chromosome addition/substitution, aneuploids,  amphiploids) \n423) Other genetic stocks (e.g. mapping populations) \n500) Advanced or improved cultivar (conventional breeding methods) \n600) GMO (by genetic engineering) \n999) Other (Elaborate in REMARKS field)',
        example='420',
    )
    biologicalStatusOfAccessionDescription: Optional[str] = Field(
        None,
        description="Supplemental text description for 'biologicalStatusOfAccessionCode'",
        example='Genetic stock',
    )
    breedingMethodDbId: Optional[str] = Field(
        None,
        description='The unique identifier for the breeding method used to create this germplasm',
        example='ffcce7ef',
    )
    collection: Optional[str] = Field(
        None,
        description='A specific panel/collection/population name this germplasm belongs to.',
        example='Rice Diversity Panel 1 (RDP1)',
    )
    commonCropName: str = Field(
        ...,
        description='Common name for the crop \n\nMCPD (v2.1) (CROPNAME) 10. Common name of the crop. Example: "malting barley", "mas".',
        example='Maize',
    )
    countryOfOriginCode: Optional[str] = Field(
        None,
        description='3-letter ISO 3166-1 code of the country in which the sample was originally collected \n\nMCPD (v2.1) (ORIGCTY) 13. 3-letter ISO 3166-1 code of the country in which the sample was originally collected (e.g. landrace, crop wild relative, farmers variety), bred or selected (breeding lines, GMOs, segregating populations, hybrids, modern cultivars, etc.). Note- Descriptors 14 to 16 below should be completed accordingly only if it was "collected".',
        example='BES',
    )
    defaultDisplayName: Optional[str] = Field(
        None,
        description='Human readable name used for display purposes',
        example='A0000003',
    )
    documentationURL: Optional[AnyUrl] = Field(
        None,
        description='A URL to the human readable documentation of this object',
        example='https://wiki.brapi.org',
    )
    donors: Optional[List[GermplasmNewRequestDonors]] = Field(
        None, description='List of donor institutes'
    )
    externalReferences: Optional[ExternalReferences] = None
    genus: Optional[str] = Field(
        None,
        description='Genus name for taxon. Initial uppercase letter required.\n\nMCPD (v2.1) (GENUS) 5. Genus name for taxon. Initial uppercase letter required.\n\nMIAPPE V1.1 (DM-43) Genus - Genus name for the organism under study, according to standard scientific nomenclature.',
        example='Aspergillus',
    )
    germplasmName: str = Field(
        ...,
        description='Name of the germplasm. It can be the preferred name and does not have to be unique.\n\nMCPD (v2.1) (ACCENAME) 11. Either a registered or other designation given to the material received, other than the donors accession number (23) or collecting number (3). First letter uppercase. Multiple names are separated by a semicolon without space.',
        example='A0000003',
    )
    germplasmOrigin: Optional[List[GermplasmOrigin]] = Field(
        None,
        description='Information for material (orchard, natural sites, ...). Geographic identification of the plants from which seeds or cutting have been taken to produce that germplasm.',
    )
    germplasmPUI: str = Field(
        ...,
        description='The Permanent Unique Identifier which represents a germplasm\n\nMIAPPE V1.1 (DM-41) Biological material ID - Code used to identify the biological material in the data file. Should be unique within the Investigation. Can correspond to experimental plant ID, seed lot ID, etc This material identification is different from a BiosampleID which corresponds to Observation Unit or Samples sections below.\n\nMCPD (v2.1) (PUID) 0. Any persistent, unique identifier assigned to the accession so it can be unambiguously referenced at the global level and the information associated with it harvested through automated means. Report one PUID for each accession. The Secretariat of the International Treaty on Plant Genetic Resources for Food and Agriculture (PGRFA) is facilitating the assignment of a persistent unique identifier (PUID), in the form of a DOI, to PGRFA at the accession level. Genebanks not applying a true PUID to their accessions should use, and request recipients to use, the concatenation of INSTCODE, ACCENUMB, and GENUS as a globally unique identifier similar in most respects to the PUID whenever they exchange information on accessions with third parties.',
        example='http://pui.per/accession/A0000003',
    )
    germplasmPreprocessing: Optional[str] = Field(
        None,
        description='Description of any process or treatment applied uniformly to the germplasm, prior to the study itself. Can be provided as free text or as an accession number from a suitable controlled vocabulary.',
        example='EO:0007210; transplanted from study 2351 observation unit ID: pot:894',
    )
    instituteCode: Optional[str] = Field(
        None,
        description='The code for the institute that maintains the material. \n\nMCPD (v2.1) (INSTCODE) 1. FAO WIEWS code of the institute where the accession is maintained. The codes consist of the 3-letter ISO 3166 country code of the country where the institute is located plus a number (e.g. PER001). The current set of institute codes is available from http://www.fao.org/wiews. For those institutes not yet having an FAO Code, or for those with "obsolete" codes, see "Common formatting rules (v)".',
        example='PER001',
    )
    instituteName: Optional[str] = Field(
        None,
        description='The name of the institute that maintains the material',
        example='The BrAPI Institute',
    )
    pedigree: Optional[str] = Field(
        None,
        description="The cross name and optional selection history.\n\nMCPD (v2.1) (ANCEST) 20. Information about either pedigree or other description of ancestral information (e.g. parent variety in case of mutant or selection). For example a pedigree 'Hanna/7*Atlas//Turk/8*Atlas' or a description 'mutation found in Hanna', 'selection from Irene' or 'cross involving amongst others Hanna and Irene'.",
        example='A0000001/A0000002',
    )
    seedSource: Optional[str] = Field(
        None, description='The source of the seed ', example='A0000001/A0000002'
    )
    seedSourceDescription: Optional[str] = Field(
        None,
        description='Description of the material source\n\nMIAPPE V1.1 (DM-56) Material source description - Description of the material source',
        example='Branches were collected from a 10-year-old tree growing in a progeny trial established in a loamy brown earth soil.',
    )
    species: Optional[str] = Field(
        None,
        description='Specific epithet portion of the scientific name in lowercase letters.\n\nMCPD (v2.1) (SPECIES) 6. Specific epithet portion of the scientific name in lowercase letters. Only the following abbreviation is allowed: "sp." \n\nMIAPPE V1.1 (DM-44) Species - Species name (formally: specific epithet) for the organism under study, according to standard scientific nomenclature.',
        example='fructus',
    )
    speciesAuthority: Optional[str] = Field(
        None,
        description='The authority organization responsible for tracking and maintaining the species name \n\nMCPD (v2.1) (SPAUTHOR) 7. Provide the authority for the species name.',
        example='Smith, 1822',
    )
    storageTypes: Optional[List[GermplasmNewRequestStorageTypes]] = Field(
        None,
        description='The type of storage this germplasm is kept in at a genebank.',
        example=[
            {'code': '20', 'description': 'Field collection'},
            {'code': '11', 'description': 'Short term'},
        ],
    )
    subtaxa: Optional[str] = Field(
        None,
        description='Subtaxon can be used to store any additional taxonomic identifier.\n\nMCPD (v2.1) (SUBTAXA) 8. Subtaxon can be used to store any additional taxonomic identifier. The following abbreviations are allowed: "subsp." (for subspecies); "convar." (for convariety); "var." (for variety); "f." (for form); "Group" (for "cultivar group").\n\nMIAPPE V1.1 (DM-44) Infraspecific name - Name of any subtaxa level, including variety, crossing name, etc. It can be used to store any additional taxonomic identifier. Either free text description or key-value pair list format (the key is the name of the rank and the value is the value of  the rank). Ranks can be among the following terms: subspecies, cultivar, variety, subvariety, convariety, group, subgroup, hybrid, line, form, subform. For MCPD compliance, the following abbreviations are allowed: subsp. (subspecies); convar. (convariety); var. (variety); f. (form); Group (cultivar group).',
        example='Aspergillus fructus A',
    )
    subtaxaAuthority: Optional[str] = Field(
        None,
        description='The authority organization responsible for tracking and maintaining the subtaxon information\n\nMCPD (v2.1) (SUBTAUTHOR) 9. Provide the subtaxon authority at the most detailed taxonomic level.',
        example='Smith, 1822',
    )
    synonyms: Optional[List[GermplasmNewRequestSynonyms]] = Field(
        None,
        description='List of alternative names or IDs used to reference this germplasm\n\nMCPD (v2.1) (OTHERNUMB) 24. Any other identifiers known to exist in other collections for this accession. Use the following format: INSTCODE:ACCENUMB;INSTCODE:identifier;INSTCODE and identifier are separated by a colon without space. Pairs of INSTCODE and identifier are separated by a semicolon without space. When the institute is not known, the identifier should be preceded by a colon.',
    )
    taxonIds: Optional[List[TaxonID]] = Field(
        None,
        description='The list of IDs for this SPECIES from different sources. If present, NCBI Taxon should be always listed as "ncbiTaxon" preferably with a purl. The rank of this ID should be species.\n\nMIAPPE V1.1 (DM-42) Organism - An identifier for the organism at the species level. Use of the NCBI taxon ID is recommended.',
    )


class GermplasmAttributeSingleResponse(BaseModel):
    _context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: GermplasmAttribute


class CrossesListResponse(BaseModel):
    _context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: CrossesListResponseResult


class CrossingProjectsListResponse(BaseModel):
    _context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: CrossingProjectsListResponseResult


class GermplasmAttributeListResponseResult(BaseModel):
    data: List[GermplasmAttribute]


class Germplasm(GermplasmNewRequest):
    germplasmDbId: str = Field(
        ...,
        description='The ID which uniquely identifies a germplasm within the given database server\n\nMIAPPE V1.1 (DM-41) Biological material ID - Code used to identify the biological material in the data file. Should be unique within the Investigation. Can correspond to experimental plant ID, seed lot ID, etc. This material identification is different from a BiosampleID which corresponds to Observation Unit or Samples sections below.',
        example='d4076594',
    )


class GermplasmAttributeListResponse(BaseModel):
    _context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: GermplasmAttributeListResponseResult


class GermplasmSingleResponse(BaseModel):
    _context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: Germplasm


class GermplasmListResponseResult(BaseModel):
    data: List[Germplasm]


class GermplasmListResponse(BaseModel):
    _context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: GermplasmListResponseResult
