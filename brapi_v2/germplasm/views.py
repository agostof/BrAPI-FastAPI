# generated by fastapi-codegen:
#   filename:  PlantBreedingAPI-BrAPI-Germplasm-2.0-resolved_MOD.yaml
#   timestamp: 2021-03-24T21:04:22+00:00
# Note: The auto-generated code was edited to remove 
#   redundancies and errors, and add examples.
#   See modelgen_utils for details.

from __future__ import annotations

from typing import List, Optional, Union

from fastapi import FastAPI, Query
from pydantic import constr

# To keep each module independent we are going to use the router 
# as a replacement for the app
from fastapi import APIRouter
router = APIRouter(
    tags = ["germplasm"]
)
app = router

# from brapi_v2.core.models import (
from .. core.models import (
    AdditionalInfo, 
    Metadata,
    Method,
    IndexPagination,
    Field202AcceptedSearchResponse,
    # Field202AcceptedSearchResponseResult,
    WSMIMEDataTypes,
)

from .models import (
    BreedingMethodListResponse,
    BreedingMethodSingleResponse,
    CrossesListResponse,
    CrossesPutRequest,
    CrossingProjectNewRequest,
    CrossingProjectsListResponse,
    CrossingProjectsSingleResponse,
    CrossNewRequest,
    # Field202AcceptedSearchResponse,
    GermplasmAttributeCategoryListResponse,
    GermplasmAttributeListResponse,
    GermplasmAttributeNewRequest,
    GermplasmAttributeSearchRequest,
    GermplasmAttributeSingleResponse,
    GermplasmAttributeValueListResponse,
    GermplasmAttributeValueNewRequest,
    GermplasmAttributeValueSearchRequest,
    GermplasmAttributeValueSingleResponse,
    GermplasmListResponse,
    GermplasmMCPDResponse,
    GermplasmNewRequest,
    GermplasmPedigreeResponse,
    GermplasmProgenyResponse,
    GermplasmSearchRequest,
    GermplasmSingleResponse,
    PlannedCrossesListResponse,
    PlannedcrossesPutRequest,
    PlannedCrossNewRequest,
    SeedLotListResponse,
    SeedLotNewRequest,
    SeedLotNewTransactionRequest,
    SeedLotSingleResponse,
    SeedLotTransactionListResponse,
)


@app.get('/attributes', response_model=GermplasmAttributeListResponse)
def get_attributes(
    attribute_category: Optional[str] = Query(None, alias='attributeCategory'),
    attribute_db_id: Optional[str] = Query(None, alias='attributeDbId'),
    attribute_name: Optional[str] = Query(None, alias='attributeName'),
    germplasm_db_id: Optional[str] = Query(None, alias='germplasmDbId'),
    external_reference_i_d: Optional[str] = Query(None, alias='externalReferenceID'),
    external_reference_source: Optional[str] = Query(
        None, alias='externalReferenceSource'
    ),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> GermplasmAttributeListResponse:
    """
    Get the Germplasm Attributes
    """
    pass

    # here we construct a dummy GermplasmAttribute just to show the functionaliy
    from .models import GermplasmAttribute, GermplasmAttributeListResponseResult, Trait, Scale
    trait = Trait(traitDbId = '9b2e34f5', traitName="Test Trait Example")
    method = Method(methodDbId='0adb2764')
    scale = Scale(scaleDbId='af730171', scaleName="Dummy Scale")
    
    additional_info_test = {}
    additional_info_test["some_variable"] = AdditionalInfo("Some value!")

    attributes = [
        GermplasmAttribute(attributeName="Plant Height Example",
                           scale=scale, attributeDbId="123456789", trait=trait, method=method,
                           additionalInfo=additional_info_test),
        GermplasmAttribute(attributeName="Dry Weight Example",
                           scale=scale, attributeDbId="91231", trait=trait, method=method,
                           additionalInfo=additional_info_test),
        GermplasmAttribute(attributeName="Leaf Weight Example",
                           scale=scale, attributeDbId="987", trait=trait, method=method,
                           additionalInfo=additional_info_test)
                           ]
    # build pagination and metadata objects
    total_count = len(attributes)
    pagination = IndexPagination(currentPage = 0, pageSize=1000, 
                                totalCount=total_count, totalPages=1)
    metadata = Metadata(datafiles=[], status=[], pagination=pagination)

    result = GermplasmAttributeListResponseResult(data=attributes)
    response = GermplasmAttributeListResponse(metadata=metadata, result=result)
    return response


@app.post('/attributes', response_model=GermplasmAttributeListResponse)
def post_attributes(
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
    body: List[GermplasmAttributeNewRequest] = None,
) -> GermplasmAttributeListResponse:
    """
    Create new Germplasm Attributes
    """
    pass


@app.get(
    '/attributes/categories', response_model=GermplasmAttributeCategoryListResponse
)
def get_attributes_categories(
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> GermplasmAttributeCategoryListResponse:
    """
    Get the Categories of Germplasm Attributes
    """
    pass


@app.get(
    '/attributes/{attribute_db_id}', response_model=GermplasmAttributeSingleResponse
)
def get_attributes_attribute_db_id(
    attribute_db_id: str = Query(..., alias='attributeDbId'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> GermplasmAttributeSingleResponse:
    """
    Get the details for a specific Germplasm Attribute
    """
    pass


@app.put(
    '/attributes/{attribute_db_id}', response_model=GermplasmAttributeSingleResponse
)
def put_attributes_attribute_db_id(
    attribute_db_id: str = Query(..., alias='attributeDbId'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
    body: GermplasmAttributeNewRequest = None,
) -> GermplasmAttributeSingleResponse:
    """
    Update an existing Germplasm Attribute
    """
    pass


@app.get('/attributevalues', response_model=GermplasmAttributeValueListResponse)
def get_attributevalues(
    attribute_value_db_id: Optional[str] = Query(None, alias='attributeValueDbId'),
    attribute_db_id: Optional[str] = Query(None, alias='attributeDbId'),
    attribute_name: Optional[str] = Query(None, alias='attributeName'),
    germplasm_db_id: Optional[str] = Query(None, alias='germplasmDbId'),
    external_reference_i_d: Optional[str] = Query(None, alias='externalReferenceID'),
    external_reference_source: Optional[str] = Query(
        None, alias='externalReferenceSource'
    ),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> GermplasmAttributeValueListResponse:
    """
    Get the Germplasm Attribute Values
    """
    pass


@app.post('/attributevalues', response_model=GermplasmAttributeValueListResponse)
def post_attributevalues(
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
    body: List[GermplasmAttributeValueNewRequest] = None,
) -> GermplasmAttributeValueListResponse:
    """
    Create new Germplasm Attribute Values
    """
    pass


@app.get(
    '/attributevalues/{attribute_value_db_id}',
    response_model=GermplasmAttributeValueSingleResponse,
)
def get_attributevalues_attribute_value_db_id(
    attribute_value_db_id: str = Query(..., alias='attributeValueDbId'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> GermplasmAttributeValueSingleResponse:
    """
    Get the details for a specific Germplasm Attribute
    """
    pass


@app.put(
    '/attributevalues/{attribute_value_db_id}',
    response_model=GermplasmAttributeValueSingleResponse,
)
def put_attributevalues_attribute_value_db_id(
    attribute_value_db_id: str = Query(..., alias='attributeValueDbId'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
    body: GermplasmAttributeValueNewRequest = None,
) -> GermplasmAttributeValueSingleResponse:
    """
    Update an existing Germplasm Attribute Value
    """
    pass


@app.get('/breedingmethods', response_model=BreedingMethodListResponse)
def get_breedingmethods(
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> BreedingMethodListResponse:
    """
    Get the Breeding Methods
    """
    pass


@app.get(
    '/breedingmethods/{breeding_method_db_id}',
    response_model=BreedingMethodSingleResponse,
)
def get_breedingmethods_breeding_method_db_id(
    breeding_method_db_id: str = Query(..., alias='breedingMethodDbId'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> BreedingMethodSingleResponse:
    """
    Get the details of a specific Breeding Method
    """
    pass


@app.get('/crosses', response_model=CrossesListResponse)
def get_crosses(
    crossing_project_db_id: Optional[str] = Query(None, alias='crossingProjectDbId'),
    cross_db_id: Optional[str] = Query(None, alias='crossDbId'),
    external_reference_i_d: Optional[str] = Query(None, alias='externalReferenceID'),
    external_reference_source: Optional[str] = Query(
        None, alias='externalReferenceSource'
    ),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> CrossesListResponse:
    """
    Get a filtered list of Cross entities
    """
    pass


@app.put('/crosses', response_model=CrossesListResponse)
def put_crosses(
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
    body: CrossesPutRequest = None,
) -> CrossesListResponse:
    """
    Update existing Cross entities on this server
    """
    pass


@app.post('/crosses', response_model=CrossesListResponse)
def post_crosses(
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
    body: List[CrossNewRequest] = None,
) -> CrossesListResponse:
    """
    Create new Cross entities on this server
    """
    pass


@app.get('/crossingprojects', response_model=CrossingProjectsListResponse)
def get_crossingprojects(
    crossing_project_db_id: Optional[str] = Query(None, alias='crossingProjectDbId'),
    external_reference_i_d: Optional[str] = Query(None, alias='externalReferenceID'),
    external_reference_source: Optional[str] = Query(
        None, alias='externalReferenceSource'
    ),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> CrossingProjectsListResponse:
    """
    Get a filtered list of Crossing Projects
    """
    pass


@app.post('/crossingprojects', response_model=CrossingProjectsListResponse)
def post_crossingprojects(
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
    body: List[CrossingProjectNewRequest] = None,
) -> CrossingProjectsListResponse:
    """
    Create new Crossing Project entities on this server
    """
    pass


@app.get(
    '/crossingprojects/{crossing_project_db_id}',
    response_model=CrossingProjectsSingleResponse,
)
def get_crossingprojects_crossing_project_db_id(
    crossing_project_db_id: str = Query(..., alias='crossingProjectDbId'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> CrossingProjectsSingleResponse:
    """
    Get a filtered list of Crossing Projects
    """
    pass


@app.put(
    '/crossingprojects/{crossing_project_db_id}',
    response_model=CrossingProjectsSingleResponse,
)
def put_crossingprojects_crossing_project_db_id(
    crossing_project_db_id: str = Query(..., alias='crossingProjectDbId'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
    body: CrossingProjectNewRequest = None,
) -> CrossingProjectsSingleResponse:
    """
    Update an existing Crossing Project
    """
    pass


@app.get('/germplasm', response_model=GermplasmListResponse)
def get_germplasm(
    germplasm_p_u_i: Optional[str] = Query(None, alias='germplasmPUI'),
    germplasm_db_id: Optional[str] = Query(None, alias='germplasmDbId'),
    germplasm_name: Optional[str] = Query(None, alias='germplasmName'),
    common_crop_name: Optional[str] = Query(None, alias='commonCropName'),
    accession_number: Optional[str] = Query(None, alias='accessionNumber'),
    collection: Optional[str] = None,
    genus: Optional[str] = None,
    species: Optional[str] = None,
    study_db_id: Optional[str] = Query(None, alias='studyDbId'),
    synonym: Optional[str] = None,
    parent_db_id: Optional[str] = Query(None, alias='parentDbId'),
    progeny_db_id: Optional[str] = Query(None, alias='progenyDbId'),
    external_reference_i_d: Optional[str] = Query(None, alias='externalReferenceID'),
    external_reference_source: Optional[str] = Query(
        None, alias='externalReferenceSource'
    ),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> GermplasmListResponse:
    """
    Get a filtered list of Germplasm
    """
    pass


@app.post('/germplasm', response_model=GermplasmListResponse)
def post_germplasm(
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
    body: List[GermplasmNewRequest] = None,
) -> GermplasmListResponse:
    """
    Create new Germplasm entities on this server
    """
    pass


@app.get('/germplasm/{germplasm_db_id}', response_model=GermplasmSingleResponse)
def get_germplasm_germplasm_db_id(
    germplasm_db_id: str = Query(..., alias='germplasmDbId'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> GermplasmSingleResponse:
    """
    Get the details of a specific Germplasm
    """
    pass


@app.put('/germplasm/{germplasm_db_id}', response_model=GermplasmSingleResponse)
def put_germplasm_germplasm_db_id(
    germplasm_db_id: str = Query(..., alias='germplasmDbId'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
    body: GermplasmNewRequest = None,
) -> GermplasmSingleResponse:
    """
    Update the details of an existing Germplasm
    """
    pass


@app.get('/germplasm/{germplasm_db_id}/mcpd', response_model=GermplasmMCPDResponse)
def get_germplasm_germplasm_db_id_mcpd(
    germplasm_db_id: str = Query(..., alias='germplasmDbId'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> GermplasmMCPDResponse:
    """
    Get the details of a specific Germplasm in MCPD format
    """
    pass


@app.get(
    '/germplasm/{germplasm_db_id}/pedigree', response_model=GermplasmPedigreeResponse
)
def get_germplasm_germplasm_db_id_pedigree(
    germplasm_db_id: str = Query(..., alias='germplasmDbId'),
    notation: Optional[str] = None,
    include_siblings: Optional[bool] = Query(None, alias='includeSiblings'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> GermplasmPedigreeResponse:
    """
    Get the pedigree details of a specific Germplasm
    """
    pass


@app.get(
    '/germplasm/{germplasm_db_id}/progeny', response_model=GermplasmProgenyResponse
)
def get_germplasm_germplasm_db_id_progeny(
    germplasm_db_id: str = Query(..., alias='germplasmDbId'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> GermplasmProgenyResponse:
    """
    Get the progeny details of a specific Germplasm
    """
    pass


@app.get('/plannedcrosses', response_model=PlannedCrossesListResponse)
def get_plannedcrosses(
    crossing_project_db_id: Optional[str] = Query(None, alias='crossingProjectDbId'),
    planned_cross_db_id: Optional[str] = Query(None, alias='plannedCrossDbId'),
    external_reference_i_d: Optional[str] = Query(None, alias='externalReferenceID'),
    external_reference_source: Optional[str] = Query(
        None, alias='externalReferenceSource'
    ),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> PlannedCrossesListResponse:
    """
    Get a filtered list of Planned Cross entities
    """
    pass


@app.put('/plannedcrosses', response_model=PlannedCrossesListResponse)
def put_plannedcrosses(
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
    body: PlannedcrossesPutRequest = None,
) -> PlannedCrossesListResponse:
    """
    Update existing Planned Cross entities on this server
    """
    pass


@app.post('/plannedcrosses', response_model=PlannedCrossesListResponse)
def post_plannedcrosses(
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
    body: List[PlannedCrossNewRequest] = None,
) -> PlannedCrossesListResponse:
    """
    Create new Planned Cross entities on this server
    """
    pass


@app.post(
    '/search/attributes',
    response_model=Union[
        GermplasmAttributeListResponse, Field202AcceptedSearchResponse
    ],
)
def post_search_attributes(
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
    body: GermplasmAttributeSearchRequest = None,
) -> Union[GermplasmAttributeListResponse, Field202AcceptedSearchResponse]:
    """
    Submit a search request for Germplasm Attributes
    """
    pass


@app.get(
    '/search/attributes/{search_results_db_id}',
    response_model=Union[
        GermplasmAttributeListResponse, Field202AcceptedSearchResponse
    ],
)
def get_search_attributes_search_results_db_id(
    search_results_db_id: str = Query(..., alias='searchResultsDbId'),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> Union[GermplasmAttributeListResponse, Field202AcceptedSearchResponse]:
    """
    Get the results of a Germplasm Attributes search request
    """
    pass


@app.post(
    '/search/attributevalues',
    response_model=Union[
        GermplasmAttributeValueListResponse, Field202AcceptedSearchResponse
    ],
)
def post_search_attributevalues(
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
    body: GermplasmAttributeValueSearchRequest = None,
) -> Union[GermplasmAttributeValueListResponse, Field202AcceptedSearchResponse]:
    """
    Submit a search request for Germplasm Attribute Values
    """
    pass


@app.get(
    '/search/attributevalues/{search_results_db_id}',
    response_model=Union[
        GermplasmAttributeValueListResponse, Field202AcceptedSearchResponse
    ],
)
def get_search_attributevalues_search_results_db_id(
    search_results_db_id: str = Query(..., alias='searchResultsDbId'),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> Union[GermplasmAttributeValueListResponse, Field202AcceptedSearchResponse]:
    """
    Get the results of a Germplasm Attribute Values search request
    """
    pass


@app.post(
    '/search/germplasm',
    response_model=Union[GermplasmListResponse, Field202AcceptedSearchResponse],
)
def post_search_germplasm(
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
    body: GermplasmSearchRequest = None,
) -> Union[GermplasmListResponse, Field202AcceptedSearchResponse]:
    """
    Submit a search request for Germplasm
    """
    pass


@app.get(
    '/search/germplasm/{search_results_db_id}',
    response_model=Union[GermplasmListResponse, Field202AcceptedSearchResponse],
)
def get_search_germplasm_search_results_db_id(
    search_results_db_id: str = Query(..., alias='searchResultsDbId'),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> Union[GermplasmListResponse, Field202AcceptedSearchResponse]:
    """
    Get the results of a Germplasm search request
    """
    pass


@app.get('/seedlots', response_model=SeedLotListResponse)
def get_seedlots(
    seed_lot_db_id: Optional[str] = Query(None, alias='seedLotDbId'),
    germplasm_db_id: Optional[str] = Query(None, alias='germplasmDbId'),
    external_reference_i_d: Optional[str] = Query(None, alias='externalReferenceID'),
    external_reference_source: Optional[str] = Query(
        None, alias='externalReferenceSource'
    ),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> SeedLotListResponse:
    """
    Get a filtered list of Seed Lot descriptions
    """
    pass


@app.post('/seedlots', response_model=SeedLotListResponse)
def post_seedlots(
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
    body: List[SeedLotNewRequest] = None,
) -> SeedLotListResponse:
    """
    Add new Seed Lot descriptions to a server
    """
    pass


@app.get('/seedlots/transactions', response_model=SeedLotTransactionListResponse)
def get_seedlots_transactions(
    transaction_db_id: Optional[str] = Query(None, alias='transactionDbId'),
    seed_lot_db_id: Optional[str] = Query(None, alias='seedLotDbId'),
    germplasm_db_id: Optional[str] = Query(None, alias='germplasmDbId'),
    external_reference_i_d: Optional[str] = Query(None, alias='externalReferenceID'),
    external_reference_source: Optional[str] = Query(
        None, alias='externalReferenceSource'
    ),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> SeedLotTransactionListResponse:
    """
    Get a filtered list of Seed Lot Transactions
    """
    pass


@app.post('/seedlots/transactions', response_model=SeedLotTransactionListResponse)
def post_seedlots_transactions(
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
    body: List[SeedLotNewTransactionRequest] = None,
) -> SeedLotTransactionListResponse:
    """
    Add new Seed Lot Transaction to be recorded
    """
    pass


@app.get('/seedlots/{seed_lot_db_id}', response_model=SeedLotSingleResponse)
def get_seedlots_seed_lot_db_id(
    seed_lot_db_id: str = Query(..., alias='seedLotDbId'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> SeedLotSingleResponse:
    """
    Get a specific Seed Lot
    """
    pass


@app.put('/seedlots/{seed_lot_db_id}', response_model=SeedLotSingleResponse)
def put_seedlots_seed_lot_db_id(
    seed_lot_db_id: str = Query(..., alias='seedLotDbId'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
    body: SeedLotNewRequest = None,
) -> SeedLotSingleResponse:
    """
    Update an existing Seed Lot
    """
    pass


@app.get(
    '/seedlots/{seed_lot_db_id}/transactions',
    response_model=SeedLotTransactionListResponse,
)
def get_seedlots_seed_lot_db_id_transactions(
    seed_lot_db_id: str = Query(..., alias='seedLotDbId'),
    transaction_db_id: Optional[str] = Query(None, alias='transactionDbId'),
    transaction_direction: Optional[str] = Query(None, alias='transactionDirection'),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> SeedLotTransactionListResponse:
    """
    Get all Transactions related to a specific Seed Lot
    """
    pass
