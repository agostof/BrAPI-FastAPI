# generated by fastapi-codegen:
#   filename:  PlantBreedingAPI-BrAPI-Germplasm-2.0-swagger.yaml
#   timestamp: 2021-02-18T03:03:43+00:00

from __future__ import annotations

from typing import List, Optional

from fastapi import FastAPI, Query
from pydantic import constr

from .models import (
    AttributesCategoriesGetResponse,
    AttributesGetResponse,
    AttributesPostResponse,
    AttributesttributeDbIdGetResponse,
    AttributesttributeDbIdPutResponse,
    AttributevaluesGetResponse,
    AttributevaluesPostResponse,
    AttributevaluesttributeValueDbIdGetResponse,
    AttributevaluesttributeValueDbIdPutResponse,
    BreedingmethodsGetResponse,
    BreedingmethodsreedingMethodDbIdGetResponse,
    CrossesGetResponse,
    CrossesPostResponse,
    CrossesPutRequest,
    CrossesPutResponse,
    CrossingProjectNewRequest,
    CrossingprojectsGetResponse,
    CrossingprojectsPostResponse,
    CrossingprojectsrossingProjectDbIdGetResponse,
    CrossingprojectsrossingProjectDbIdPutResponse,
    CrossNewRequest,
    GermplasmAttributeNewRequest,
    GermplasmAttributeSearchRequest,
    GermplasmAttributeValueNewRequest,
    GermplasmAttributeValueSearchRequest,
    GermplasmermplasmDbIdGetResponse,
    GermplasmermplasmDbIdPutResponse,
    GermplasmermplasmDbImcpdGetResponse,
    GermplasmermplasmDbIpedigreeGetResponse,
    GermplasmermplasmDbIprogenyGetResponse,
    GermplasmGetResponse,
    GermplasmNewRequest,
    GermplasmPostResponse,
    GermplasmSearchRequest,
    PlannedcrossesGetResponse,
    PlannedcrossesPostResponse,
    PlannedcrossesPutRequest,
    PlannedcrossesPutResponse,
    PlannedCrossNewRequest,
    SearchAttributesearchResultsDbIdGetResponse,
    SearchAttributesPostResponse,
    SearchAttributevaluesearchResultsDbIdGetResponse,
    SearchAttributevaluesPostResponse,
    SearchGermplasmearchResultsDbIdGetResponse,
    SearchGermplasmPostResponse,
    SeedLotNewRequest,
    SeedLotNewTransactionRequest,
    SeedlotseedLotDbIdGetResponse,
    SeedlotseedLotDbIdPutResponse,
    SeedlotseedLotDbItransactionsGetResponse,
    SeedlotsGetResponse,
    SeedlotsPostResponse,
    SeedlotsTransactionsGetResponse,
    SeedlotsTransactionsPostResponse,
)

app = FastAPI(
    description='The Breeding API (BrAPI) is a Standardized REST ful Web Service API Specification for communicating Plant Breeding Data. BrAPI allows for easy data sharing between databases and tools involved in plant breeding.\n<div class="brapi-section">\n<h2 class="brapi-section-title">General Reference Documentation</h2>\n<div class="gen-info-link"><a href="https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/URL_Structure.md">URL Structure</a></div>\n<div class="gen-info-link"><a href="https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Response_Structure.md">Response Structure</a></div>\n<div class="gen-info-link"><a href="https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Date_Time_Encoding.md">Date/Time Encoding</a></div>\n<div class="gen-info-link"><a href="https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Location_Encoding.md">Location Encoding</a></div>\n<div class="gen-info-link"><a href="https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Error_Handling.md">Error Handling</a></div>\n<div class="gen-info-link"><a href="https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Search_Services.md">Search Services</a></div>\n</div>\n\n<div class="brapi-section">\n<h2 class="brapi-section-title">BrAPI Core</h2>\n<div class="brapi-section-description">The BrAPI Core module contains high level entities used for organization and management. This includes Programs, Trials, Studies, Locations, People, and Lists</div>\n<div class="version-number">V2.0</div>\n<div class="link-btn"><a href="https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Core">GitHub</a></div>\n<div class="link-btn"><a href="https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Core">SwaggerHub</a></div>\n<div class="link-btn"><a href="https://brapicore.docs.apiary.io">Apiary</a></div>\n<div class="stop-float"></div>\n</div>\n\n<div class="brapi-section">\n<h2 class="brapi-section-title">BrAPI Phenotyping</h2>\n<div class="brapi-section-description">The BrAPI Phenotyping module contains entities related to phenotypic observations. This includes Observation Units, Observations, Observation Variables, Traits, Scales, Methods, and Images</div>\n<div class="version-number">V2.0</div>\n<div class="link-btn"><a href="https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Phenotyping">GitHub</a></div>\n<div class="link-btn"><a href="https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Phenotyping">SwaggerHub</a></div>\n<div class="link-btn"><a href="https://brapiphenotyping.docs.apiary.io">Apiary</a></div>\n<div class="stop-float"></div>\n</div>\n\n<div class="brapi-section">\n<h2 class="brapi-section-title">BrAPI Genotyping</h2>\n<div class="brapi-section-description">The BrAPI Genotyping module contains entities related to genotyping analysis. This includes Samples, Markers, Variant Sets, Variants, Call Sets, Calls, References, Reads, and Vendor Orders</div>\n<div class="version-number">V2.0</div>\n<div class="link-btn"><a href="https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Genotyping">GitHub</a></div>\n<div class="link-btn"><a href="https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Genotyping">SwaggerHub</a></div>\n<div class="link-btn"><a href="https://brapigenotyping.docs.apiary.io">Apiary</a></div>\n<div class="stop-float"></div>\n</div>\n\n<div class="current-brapi-section brapi-section">\n<h2 class="brapi-section-title">BrAPI Germplasm</h2>\n<div class="brapi-section-description">The BrAPI Germplasm module contains entities related to germplasm management. This includes Germplasm, Germplasm Attributes, Seed Lots, Crosses, Pedigree, and Progeny</div>\n<div class="version-number">V2.0</div>\n<div class="link-btn"><a href="https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Germplasm">GitHub</a></div>\n<div class="link-btn"><a href="https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Germplasm">SwaggerHub</a></div>\n<div class="link-btn"><a href="https://brapigermplasm.docs.apiary.io">Apiary</a></div>\n<div class="stop-float"></div>\n</div>\n\n<style>\n.link-btn{\nfloat: left; \nmargin: 2px 10px 0 0; \npadding: 0 5px; \nborder-radius: 5px; \nbackground-color: #ddd;\n}\n.stop-float{\n  clear: both;\n}\n.version-number{\n  float: left; \n  margin: 5px 10px 0 5px;\n}\n.brapi-section-title{\n  margin: 0 10px 0 0;\n  font-size: 20px;\n}\n.current-brapi-section{\n  font-weight: bolder;\n  border-radius: 5px; \n  background-color: #ddd;\n}\n.brapi-section{\n  padding: 5px 5px; \n}\n.brapi-section-description{\n  margin: 5px 0 0 5px;\n}\n</style>',
    title='BrAPI-Germplasm',
    version='2.0',
)


@app.get('/attributes', response_model=AttributesGetResponse)
def get_attributes(
    attribute_category: Optional[str] = Query(None, alias='attributeCategory'),
    attribute_db_id: Optional[str] = Query(None, alias='attributeDbId'),
    attribute_name: Optional[str] = Query(None, alias='attributeName'),
    germplasm_db_id: Optional[str] = Query(None, alias='germplasmDbId'),
    external_reference_i_d: Optional[str] = Query(None, alias='externalReferenceID'),
    external_reference_source: Optional[str] = Query(
        None, alias='externalReferenceSource'
    ),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> AttributesGetResponse:
    """
    Get the Germplasm Attributes
    """
    pass


@app.post('/attributes', response_model=AttributesPostResponse)
def post_attributes(
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
    body: List[GermplasmAttributeNewRequest] = None,
) -> AttributesPostResponse:
    """
    Create new Germplasm Attributes
    """
    pass


@app.get('/attributes/categories', response_model=AttributesCategoriesGetResponse)
def get_attributes_categories(
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> AttributesCategoriesGetResponse:
    """
    Get the Categories of Germplasm Attributes
    """
    pass


@app.get(
    '/attributes/{attribute_db_id}', response_model=AttributesttributeDbIdGetResponse
)
def get_attributes_attribute_db_id(
    attribute_db_id: str = Query(..., alias='attributeDbId'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> AttributesttributeDbIdGetResponse:
    """
    Get the details for a specific Germplasm Attribute
    """
    pass


@app.put(
    '/attributes/{attribute_db_id}', response_model=AttributesttributeDbIdPutResponse
)
def put_attributes_attribute_db_id(
    attribute_db_id: str = Query(..., alias='attributeDbId'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
    body: GermplasmAttributeNewRequest = None,
) -> AttributesttributeDbIdPutResponse:
    """
    Update an existing Germplasm Attribute
    """
    pass


@app.get('/attributevalues', response_model=AttributevaluesGetResponse)
def get_attributevalues(
    attribute_value_db_id: Optional[str] = Query(None, alias='attributeValueDbId'),
    attribute_db_id: Optional[str] = Query(None, alias='attributeDbId'),
    attribute_name: Optional[str] = Query(None, alias='attributeName'),
    germplasm_db_id: Optional[str] = Query(None, alias='germplasmDbId'),
    external_reference_i_d: Optional[str] = Query(None, alias='externalReferenceID'),
    external_reference_source: Optional[str] = Query(
        None, alias='externalReferenceSource'
    ),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> AttributevaluesGetResponse:
    """
    Get the Germplasm Attribute Values
    """
    pass


@app.post('/attributevalues', response_model=AttributevaluesPostResponse)
def post_attributevalues(
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
    body: List[GermplasmAttributeValueNewRequest] = None,
) -> AttributevaluesPostResponse:
    """
    Create new Germplasm Attribute Values
    """
    pass


@app.get(
    '/attributevalues/{attribute_value_db_id}',
    response_model=AttributevaluesttributeValueDbIdGetResponse,
)
def get_attributevalues_attribute_value_db_id(
    attribute_value_db_id: str = Query(..., alias='attributeValueDbId'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> AttributevaluesttributeValueDbIdGetResponse:
    """
    Get the details for a specific Germplasm Attribute
    """
    pass


@app.put(
    '/attributevalues/{attribute_value_db_id}',
    response_model=AttributevaluesttributeValueDbIdPutResponse,
)
def put_attributevalues_attribute_value_db_id(
    attribute_value_db_id: str = Query(..., alias='attributeValueDbId'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
    body: GermplasmAttributeValueNewRequest = None,
) -> AttributevaluesttributeValueDbIdPutResponse:
    """
    Update an existing Germplasm Attribute Value
    """
    pass


@app.get('/breedingmethods', response_model=BreedingmethodsGetResponse)
def get_breedingmethods(
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> BreedingmethodsGetResponse:
    """
    Get the Breeding Methods
    """
    pass


@app.get(
    '/breedingmethods/{breeding_method_db_id}',
    response_model=BreedingmethodsreedingMethodDbIdGetResponse,
)
def get_breedingmethods_breeding_method_db_id(
    breeding_method_db_id: str = Query(..., alias='breedingMethodDbId'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> BreedingmethodsreedingMethodDbIdGetResponse:
    """
    Get the details of a specific Breeding Method
    """
    pass


@app.get('/crosses', response_model=CrossesGetResponse)
def get_crosses(
    crossing_project_db_id: Optional[str] = Query(None, alias='crossingProjectDbId'),
    cross_db_id: Optional[str] = Query(None, alias='crossDbId'),
    external_reference_i_d: Optional[str] = Query(None, alias='externalReferenceID'),
    external_reference_source: Optional[str] = Query(
        None, alias='externalReferenceSource'
    ),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> CrossesGetResponse:
    """
    Get a filtered list of Cross entities
    """
    pass


@app.put('/crosses', response_model=CrossesPutResponse)
def put_crosses(
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
    body: CrossesPutRequest = None,
) -> CrossesPutResponse:
    """
    Update existing Cross entities on this server
    """
    pass


@app.post('/crosses', response_model=CrossesPostResponse)
def post_crosses(
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
    body: List[CrossNewRequest] = None,
) -> CrossesPostResponse:
    """
    Create new Cross entities on this server
    """
    pass


@app.get('/crossingprojects', response_model=CrossingprojectsGetResponse)
def get_crossingprojects(
    crossing_project_db_id: Optional[str] = Query(None, alias='crossingProjectDbId'),
    external_reference_i_d: Optional[str] = Query(None, alias='externalReferenceID'),
    external_reference_source: Optional[str] = Query(
        None, alias='externalReferenceSource'
    ),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> CrossingprojectsGetResponse:
    """
    Get a filtered list of Crossing Projects
    """
    pass


@app.post('/crossingprojects', response_model=CrossingprojectsPostResponse)
def post_crossingprojects(
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
    body: List[CrossingProjectNewRequest] = None,
) -> CrossingprojectsPostResponse:
    """
    Create new Crossing Project entities on this server
    """
    pass


@app.get(
    '/crossingprojects/{crossing_project_db_id}',
    response_model=CrossingprojectsrossingProjectDbIdGetResponse,
)
def get_crossingprojects_crossing_project_db_id(
    crossing_project_db_id: str = Query(..., alias='crossingProjectDbId'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> CrossingprojectsrossingProjectDbIdGetResponse:
    """
    Get a filtered list of Crossing Projects
    """
    pass


@app.put(
    '/crossingprojects/{crossing_project_db_id}',
    response_model=CrossingprojectsrossingProjectDbIdPutResponse,
)
def put_crossingprojects_crossing_project_db_id(
    crossing_project_db_id: str = Query(..., alias='crossingProjectDbId'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
    body: CrossingProjectNewRequest = None,
) -> CrossingprojectsrossingProjectDbIdPutResponse:
    """
    Update an existing Crossing Project
    """
    pass


@app.get('/germplasm', response_model=GermplasmGetResponse)
def get_germplasm(
    germplasm_p_u_i: Optional[str] = Query(None, alias='germplasmPUI'),
    germplasm_db_id: Optional[str] = Query(None, alias='germplasmDbId'),
    germplasm_name: Optional[str] = Query(None, alias='germplasmName'),
    common_crop_name: Optional[str] = Query(None, alias='commonCropName'),
    accession_number: Optional[str] = Query(None, alias='accessionNumber'),
    collection: Optional[str] = None,
    genus: Optional[str] = None,
    species: Optional[str] = None,
    study_db_id: Optional[str] = Query(None, alias='studyDbId'),
    synonym: Optional[str] = None,
    parent_db_id: Optional[str] = Query(None, alias='parentDbId'),
    progeny_db_id: Optional[str] = Query(None, alias='progenyDbId'),
    external_reference_i_d: Optional[str] = Query(None, alias='externalReferenceID'),
    external_reference_source: Optional[str] = Query(
        None, alias='externalReferenceSource'
    ),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> GermplasmGetResponse:
    """
    Get a filtered list of Germplasm
    """
    pass


@app.post('/germplasm', response_model=GermplasmPostResponse)
def post_germplasm(
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
    body: List[GermplasmNewRequest] = None,
) -> GermplasmPostResponse:
    """
    Create new Germplasm entities on this server
    """
    pass


@app.get(
    '/germplasm/{germplasm_db_id}', response_model=GermplasmermplasmDbIdGetResponse
)
def get_germplasm_germplasm_db_id(
    germplasm_db_id: str = Query(..., alias='germplasmDbId'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> GermplasmermplasmDbIdGetResponse:
    """
    Get the details of a specific Germplasm
    """
    pass


@app.put(
    '/germplasm/{germplasm_db_id}', response_model=GermplasmermplasmDbIdPutResponse
)
def put_germplasm_germplasm_db_id(
    germplasm_db_id: str = Query(..., alias='germplasmDbId'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
    body: GermplasmNewRequest = None,
) -> GermplasmermplasmDbIdPutResponse:
    """
    Update the details of an existing Germplasm
    """
    pass


@app.get(
    '/germplasm/{germplasm_db_id}/mcpd',
    response_model=GermplasmermplasmDbImcpdGetResponse,
)
def get_germplasm_germplasm_db_id_mcpd(
    germplasm_db_id: str = Query(..., alias='germplasmDbId'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> GermplasmermplasmDbImcpdGetResponse:
    """
    Get the details of a specific Germplasm in MCPD format
    """
    pass


@app.get(
    '/germplasm/{germplasm_db_id}/pedigree',
    response_model=GermplasmermplasmDbIpedigreeGetResponse,
)
def get_germplasm_germplasm_db_id_pedigree(
    germplasm_db_id: str = Query(..., alias='germplasmDbId'),
    notation: Optional[str] = None,
    include_siblings: Optional[bool] = Query(None, alias='includeSiblings'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> GermplasmermplasmDbIpedigreeGetResponse:
    """
    Get the pedigree details of a specific Germplasm
    """
    pass


@app.get(
    '/germplasm/{germplasm_db_id}/progeny',
    response_model=GermplasmermplasmDbIprogenyGetResponse,
)
def get_germplasm_germplasm_db_id_progeny(
    germplasm_db_id: str = Query(..., alias='germplasmDbId'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> GermplasmermplasmDbIprogenyGetResponse:
    """
    Get the progeny details of a specific Germplasm
    """
    pass


@app.get('/plannedcrosses', response_model=PlannedcrossesGetResponse)
def get_plannedcrosses(
    crossing_project_db_id: Optional[str] = Query(None, alias='crossingProjectDbId'),
    planned_cross_db_id: Optional[str] = Query(None, alias='plannedCrossDbId'),
    external_reference_i_d: Optional[str] = Query(None, alias='externalReferenceID'),
    external_reference_source: Optional[str] = Query(
        None, alias='externalReferenceSource'
    ),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> PlannedcrossesGetResponse:
    """
    Get a filtered list of Planned Cross entities
    """
    pass


@app.put('/plannedcrosses', response_model=PlannedcrossesPutResponse)
def put_plannedcrosses(
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
    body: PlannedcrossesPutRequest = None,
) -> PlannedcrossesPutResponse:
    """
    Update existing Planned Cross entities on this server
    """
    pass


@app.post('/plannedcrosses', response_model=PlannedcrossesPostResponse)
def post_plannedcrosses(
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
    body: List[PlannedCrossNewRequest] = None,
) -> PlannedcrossesPostResponse:
    """
    Create new Planned Cross entities on this server
    """
    pass


@app.post(
    '/search/attributes',
    response_model=Union[SearchAttributesPostResponse, SearchAttributesPostResponse],
)
def post_search_attributes(
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
    body: GermplasmAttributeSearchRequest = None,
) -> Union[SearchAttributesPostResponse, SearchAttributesPostResponse]:
    """
    Submit a search request for Germplasm Attributes
    """
    pass


@app.get(
    '/search/attributes/{search_results_db_id}',
    response_model=Union[
        SearchAttributesearchResultsDbIdGetResponse,
        SearchAttributesearchResultsDbIdGetResponse,
    ],
)
def get_search_attributes_search_results_db_id(
    search_results_db_id: str = Query(..., alias='searchResultsDbId'),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> Union[
    SearchAttributesearchResultsDbIdGetResponse,
    SearchAttributesearchResultsDbIdGetResponse,
]:
    """
    Get the results of a Germplasm Attributes search request
    """
    pass


@app.post(
    '/search/attributevalues',
    response_model=Union[
        SearchAttributevaluesPostResponse, SearchAttributevaluesPostResponse
    ],
)
def post_search_attributevalues(
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
    body: GermplasmAttributeValueSearchRequest = None,
) -> Union[SearchAttributevaluesPostResponse, SearchAttributevaluesPostResponse]:
    """
    Submit a search request for Germplasm Attribute Values
    """
    pass


@app.get(
    '/search/attributevalues/{search_results_db_id}',
    response_model=Union[
        SearchAttributevaluesearchResultsDbIdGetResponse,
        SearchAttributevaluesearchResultsDbIdGetResponse,
    ],
)
def get_search_attributevalues_search_results_db_id(
    search_results_db_id: str = Query(..., alias='searchResultsDbId'),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> Union[
    SearchAttributevaluesearchResultsDbIdGetResponse,
    SearchAttributevaluesearchResultsDbIdGetResponse,
]:
    """
    Get the results of a Germplasm Attribute Values search request
    """
    pass


@app.post(
    '/search/germplasm',
    response_model=Union[SearchGermplasmPostResponse, SearchGermplasmPostResponse],
)
def post_search_germplasm(
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
    body: GermplasmSearchRequest = None,
) -> Union[SearchGermplasmPostResponse, SearchGermplasmPostResponse]:
    """
    Submit a search request for Germplasm
    """
    pass


@app.get(
    '/search/germplasm/{search_results_db_id}',
    response_model=Union[
        SearchGermplasmearchResultsDbIdGetResponse,
        SearchGermplasmearchResultsDbIdGetResponse,
    ],
)
def get_search_germplasm_search_results_db_id(
    search_results_db_id: str = Query(..., alias='searchResultsDbId'),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> Union[
    SearchGermplasmearchResultsDbIdGetResponse,
    SearchGermplasmearchResultsDbIdGetResponse,
]:
    """
    Get the results of a Germplasm search request
    """
    pass


@app.get('/seedlots', response_model=SeedlotsGetResponse)
def get_seedlots(
    seed_lot_db_id: Optional[str] = Query(None, alias='seedLotDbId'),
    germplasm_db_id: Optional[str] = Query(None, alias='germplasmDbId'),
    external_reference_i_d: Optional[str] = Query(None, alias='externalReferenceID'),
    external_reference_source: Optional[str] = Query(
        None, alias='externalReferenceSource'
    ),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> SeedlotsGetResponse:
    """
    Get a filtered list of Seed Lot descriptions
    """
    pass


@app.post('/seedlots', response_model=SeedlotsPostResponse)
def post_seedlots(
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
    body: List[SeedLotNewRequest] = None,
) -> SeedlotsPostResponse:
    """
    Add new Seed Lot descriptions to a server
    """
    pass


@app.get('/seedlots/transactions', response_model=SeedlotsTransactionsGetResponse)
def get_seedlots_transactions(
    transaction_db_id: Optional[str] = Query(None, alias='transactionDbId'),
    seed_lot_db_id: Optional[str] = Query(None, alias='seedLotDbId'),
    germplasm_db_id: Optional[str] = Query(None, alias='germplasmDbId'),
    external_reference_i_d: Optional[str] = Query(None, alias='externalReferenceID'),
    external_reference_source: Optional[str] = Query(
        None, alias='externalReferenceSource'
    ),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> SeedlotsTransactionsGetResponse:
    """
    Get a filtered list of Seed Lot Transactions
    """
    pass


@app.post('/seedlots/transactions', response_model=SeedlotsTransactionsPostResponse)
def post_seedlots_transactions(
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
    body: List[SeedLotNewTransactionRequest] = None,
) -> SeedlotsTransactionsPostResponse:
    """
    Add new Seed Lot Transaction to be recorded
    """
    pass


@app.get('/seedlots/{seed_lot_db_id}', response_model=SeedlotseedLotDbIdGetResponse)
def get_seedlots_seed_lot_db_id(
    seed_lot_db_id: str = Query(..., alias='seedLotDbId'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> SeedlotseedLotDbIdGetResponse:
    """
    Get a specific Seed Lot
    """
    pass


@app.put('/seedlots/{seed_lot_db_id}', response_model=SeedlotseedLotDbIdPutResponse)
def put_seedlots_seed_lot_db_id(
    seed_lot_db_id: str = Query(..., alias='seedLotDbId'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
    body: SeedLotNewRequest = None,
) -> SeedlotseedLotDbIdPutResponse:
    """
    Update an existing Seed Lot
    """
    pass


@app.get(
    '/seedlots/{seed_lot_db_id}/transactions',
    response_model=SeedlotseedLotDbItransactionsGetResponse,
)
def get_seedlots_seed_lot_db_id_transactions(
    seed_lot_db_id: str = Query(..., alias='seedLotDbId'),
    transaction_db_id: Optional[str] = Query(None, alias='transactionDbId'),
    transaction_direction: Optional[str] = Query(None, alias='transactionDirection'),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> SeedlotseedLotDbItransactionsGetResponse:
    """
    Get all Transactions related to a specific Seed Lot
    """
    pass
