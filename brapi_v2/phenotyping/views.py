# generated by fastapi-codegen:
#   filename:  PlantBreedingAPI-BrAPI-Phenotyping-2.0-swagger.yaml
#   timestamp: 2021-03-22T18:14:57+00:00

from __future__ import annotations

from datetime import datetime
from typing import List, Optional, Union

from fastapi import FastAPI, Query
from pydantic import constr

# To keep each module independent we are going to use the router 
# as a replacement for the app
from fastapi import APIRouter
router = APIRouter()
app = router

from .models import (
    EventsGetResponse,
    ImageNewRequest,
    ImageSearchRequest,
    ImagesGetResponse,
    ImagesmageDbIdGetResponse,
    ImagesmageDbIdPutResponse,
    ImagesmageDbIimagecontentPutResponse,
    ImagesPostResponse,
    MethodNewRequest,
    MethodsethodDbIdGetResponse,
    MethodsethodDbIdPutResponse,
    MethodsGetResponse,
    MethodsPostResponse,
    ObservationlevelsGetResponse,
    ObservationNewRequest,
    ObservationsbservationDbIdGetResponse,
    ObservationsbservationDbIdPutResponse,
    ObservationSearchRequest,
    ObservationsGetResponse,
    ObservationsPostResponse,
    ObservationsPutRequest,
    ObservationsPutResponse,
    ObservationsTableGetResponse,
    ObservationUnitNewRequest,
    ObservationunitsbservationUnitDbIdGetResponse,
    ObservationunitsbservationUnitDbIdPutResponse,
    ObservationUnitSearchRequest,
    ObservationunitsGetResponse,
    ObservationunitsPostResponse,
    ObservationunitsPutRequest,
    ObservationunitsPutResponse,
    ObservationunitsTableGetResponse,
    ObservationVariableNewRequest,
    ObservationVariableSearchRequest,
    OntologiesGetResponse,
    ScaleNewRequest,
    ScalescaleDbIdGetResponse,
    ScalescaleDbIdPutResponse,
    ScalesGetResponse,
    ScalesPostResponse,
    SearchImagesearchResultsDbIdGetResponse,
    SearchImagesPostResponse,
    SearchObservationsearchResultsDbIdGetResponse,
    SearchObservationsPostResponse,
    SearchObservationunitsearchResultsDbIdGetResponse,
    SearchObservationunitsPostResponse,
    SearchVariablesearchResultsDbIdGetResponse,
    SearchVariablesPostResponse,
    TraitNewRequest,
    TraitsGetResponse,
    TraitsPostResponse,
    TraitsraitDbIdGetResponse,
    TraitsraitDbIdPutResponse,
    VariablesbservationVariableDbIdGetResponse,
    VariablesbservationVariableDbIdPutResponse,
    VariablesGetResponse,
    VariablesPostResponse,
    WSMIMEDataTypes,
)

# app = FastAPI(
#     description='The Breeding API (BrAPI) is a Standardized REST ful Web Service API Specification for communicating Plant Breeding Data. BrAPI allows for easy data sharing between databases and tools involved in plant breeding.\n<div class="brapi-section">\n<h2 class="brapi-section-title">General Reference Documentation</h2>\n<div class="gen-info-link"><a href="https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/URL_Structure.md">URL Structure</a></div>\n<div class="gen-info-link"><a href="https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Response_Structure.md">Response Structure</a></div>\n<div class="gen-info-link"><a href="https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Date_Time_Encoding.md">Date/Time Encoding</a></div>\n<div class="gen-info-link"><a href="https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Location_Encoding.md">Location Encoding</a></div>\n<div class="gen-info-link"><a href="https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Error_Handling.md">Error Handling</a></div>\n<div class="gen-info-link"><a href="https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Search_Services.md">Search Services</a></div>\n</div>\n\n<div class="brapi-section">\n<h2 class="brapi-section-title">BrAPI Core</h2>\n<div class="brapi-section-description">The BrAPI Core module contains high level entities used for organization and management. This includes Programs, Trials, Studies, Locations, People, and Lists</div>\n<div class="version-number">V2.0</div>\n<div class="link-btn"><a href="https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Core">GitHub</a></div>\n<div class="link-btn"><a href="https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Core">SwaggerHub</a></div>\n<div class="link-btn"><a href="https://brapicore.docs.apiary.io">Apiary</a></div>\n<div class="stop-float"></div>\n</div>\n\n<div class="current-brapi-section brapi-section">\n<h2 class="brapi-section-title">BrAPI Phenotyping</h2>\n<div class="brapi-section-description">The BrAPI Phenotyping module contains entities related to phenotypic observations. This includes Observation Units, Observations, Observation Variables, Traits, Scales, Methods, and Images</div>\n<div class="version-number">V2.0</div>\n<div class="link-btn"><a href="https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Phenotyping">GitHub</a></div>\n<div class="link-btn"><a href="https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Phenotyping">SwaggerHub</a></div>\n<div class="link-btn"><a href="https://brapiphenotyping.docs.apiary.io">Apiary</a></div>\n<div class="stop-float"></div>\n</div>\n\n<div class="brapi-section">\n<h2 class="brapi-section-title">BrAPI Genotyping</h2>\n<div class="brapi-section-description">The BrAPI Genotyping module contains entities related to genotyping analysis. This includes Samples, Markers, Variant Sets, Variants, Call Sets, Calls, References, Reads, and Vendor Orders</div>\n<div class="version-number">V2.0</div>\n<div class="link-btn"><a href="https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Genotyping">GitHub</a></div>\n<div class="link-btn"><a href="https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Genotyping">SwaggerHub</a></div>\n<div class="link-btn"><a href="https://brapigenotyping.docs.apiary.io">Apiary</a></div>\n<div class="stop-float"></div>\n</div>\n\n<div class="brapi-section">\n<h2 class="brapi-section-title">BrAPI Germplasm</h2>\n<div class="brapi-section-description">The BrAPI Germplasm module contains entities related to germplasm management. This includes Germplasm, Germplasm Attributes, Seed Lots, Crosses, Pedigree, and Progeny</div>\n<div class="version-number">V2.0</div>\n<div class="link-btn"><a href="https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Germplasm">GitHub</a></div>\n<div class="link-btn"><a href="https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Germplasm">SwaggerHub</a></div>\n<div class="link-btn"><a href="https://brapigermplasm.docs.apiary.io">Apiary</a></div>\n<div class="stop-float"></div>\n</div>\n\n<style>\n.link-btn{\nfloat: left; \nmargin: 2px 10px 0 0; \npadding: 0 5px; \nborder-radius: 5px; \nbackground-color: #ddd;\n}\n.stop-float{\n  clear: both;\n}\n.version-number{\n  float: left; \n  margin: 5px 10px 0 5px;\n}\n.brapi-section-title{\n  margin: 0 10px 0 0;\n  font-size: 20px;\n}\n.current-brapi-section{\n  font-weight: bolder;\n  border-radius: 5px; \n  background-color: #ddd;\n}\n.brapi-section{\n  padding: 5px 5px; \n}\n.brapi-section-description{\n  margin: 5px 0 0 5px;\n}\n</style>',
#     title='BrAPI-Phenotyping',
#     version='2.0',
# )


@app.get('/events', response_model=EventsGetResponse)
def get_events(
    study_db_id: Optional[str] = Query(None, alias='studyDbId'),
    observation_unit_db_id: Optional[str] = Query(None, alias='observationUnitDbId'),
    event_db_id: Optional[str] = Query(None, alias='eventDbId'),
    event_type: Optional[str] = Query(None, alias='eventType'),
    date_range_start: Optional[datetime] = Query(None, alias='dateRangeStart'),
    date_range_end: Optional[datetime] = Query(None, alias='dateRangeEnd'),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> EventsGetResponse:
    """
    Get the Events
    """
    pass


@app.get('/images', response_model=ImagesGetResponse)
def get_images(
    image_db_id: Optional[str] = Query(None, alias='imageDbId'),
    image_name: Optional[str] = Query(None, alias='imageName'),
    observation_unit_db_id: Optional[str] = Query(None, alias='observationUnitDbId'),
    observation_db_id: Optional[str] = Query(None, alias='observationDbId'),
    descriptive_ontology_term: Optional[str] = Query(
        None, alias='descriptiveOntologyTerm'
    ),
    external_reference_i_d: Optional[str] = Query(None, alias='externalReferenceID'),
    external_reference_source: Optional[str] = Query(
        None, alias='externalReferenceSource'
    ),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> ImagesGetResponse:
    """
    Get the image meta data summaries
    """
    pass


@app.post('/images', response_model=ImagesPostResponse)
def post_images(
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
    body: List[ImageNewRequest] = None,
) -> ImagesPostResponse:
    """
    Create new image meta data objects
    """
    pass


@app.get('/images/{image_db_id}', response_model=ImagesmageDbIdGetResponse)
def get_images_image_db_id(
    image_db_id: str = Query(..., alias='imageDbId'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> ImagesmageDbIdGetResponse:
    """
    Get the an image meta data summary
    """
    pass


@app.put('/images/{image_db_id}', response_model=ImagesmageDbIdPutResponse)
def put_images_image_db_id(
    image_db_id: str = Query(..., alias='imageDbId'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
    body: ImageNewRequest = None,
) -> ImagesmageDbIdPutResponse:
    """
    Update an image meta data
    """
    pass


@app.put(
    '/images/{image_db_id}/imagecontent',
    response_model=ImagesmageDbIimagecontentPutResponse,
)
def put_images_image_db_id_imagecontent(
    image_db_id: str = Query(..., alias='imageDbId'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> ImagesmageDbIimagecontentPutResponse:
    """
    Update an image with the image file content
    """
    pass


@app.get('/methods', response_model=MethodsGetResponse)
def get_methods(
    method_db_id: Optional[str] = Query(None, alias='methodDbId'),
    observation_variable_db_id: Optional[str] = Query(
        None, alias='observationVariableDbId'
    ),
    external_reference_i_d: Optional[str] = Query(None, alias='externalReferenceID'),
    external_reference_source: Optional[str] = Query(
        None, alias='externalReferenceSource'
    ),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> MethodsGetResponse:
    """
    Get the Methods
    """
    pass


@app.post('/methods', response_model=MethodsPostResponse)
def post_methods(
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
    body: List[MethodNewRequest] = None,
) -> MethodsPostResponse:
    """
    Add new Methods
    """
    pass


@app.get('/methods/{method_db_id}', response_model=MethodsethodDbIdGetResponse)
def get_methods_method_db_id(
    method_db_id: str = Query(..., alias='methodDbId'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> MethodsethodDbIdGetResponse:
    """
    Get the details for a specific Method
    """
    pass


@app.put('/methods/{method_db_id}', response_model=MethodsethodDbIdPutResponse)
def put_methods_method_db_id(
    method_db_id: str = Query(..., alias='methodDbId'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
    body: MethodNewRequest = None,
) -> MethodsethodDbIdPutResponse:
    """
    Update an existing Method
    """
    pass


@app.get('/observationlevels', response_model=ObservationlevelsGetResponse)
def get_observationlevels(
    study_db_id: Optional[str] = Query(None, alias='studyDbId'),
    trial_db_id: Optional[str] = Query(None, alias='trialDbId'),
    program_db_id: Optional[str] = Query(None, alias='programDbId'),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> ObservationlevelsGetResponse:
    """
    Get the Observation Levels
    """
    pass


@app.get('/observations', response_model=ObservationsGetResponse)
def get_observations(
    observation_db_id: Optional[str] = Query(None, alias='observationDbId'),
    observation_unit_db_id: Optional[str] = Query(None, alias='observationUnitDbId'),
    germplasm_db_id: Optional[str] = Query(None, alias='germplasmDbId'),
    observation_variable_db_id: Optional[str] = Query(
        None, alias='observationVariableDbId'
    ),
    study_db_id: Optional[str] = Query(None, alias='studyDbId'),
    location_db_id: Optional[str] = Query(None, alias='locationDbId'),
    trial_db_id: Optional[str] = Query(None, alias='trialDbId'),
    program_db_id: Optional[str] = Query(None, alias='programDbId'),
    season_db_id: Optional[str] = Query(None, alias='seasonDbId'),
    observation_unit_level_name: Optional[str] = Query(
        None, alias='observationUnitLevelName'
    ),
    observation_unit_level_order: Optional[str] = Query(
        None, alias='observationUnitLevelOrder'
    ),
    observation_unit_level_code: Optional[str] = Query(
        None, alias='observationUnitLevelCode'
    ),
    observation_time_stamp_range_start: Optional[datetime] = Query(
        None, alias='observationTimeStampRangeStart'
    ),
    observation_time_stamp_range_end: Optional[datetime] = Query(
        None, alias='observationTimeStampRangeEnd'
    ),
    external_reference_i_d: Optional[str] = Query(None, alias='externalReferenceID'),
    external_reference_source: Optional[str] = Query(
        None, alias='externalReferenceSource'
    ),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> ObservationsGetResponse:
    """
    Get a filtered set of Observations
    """
    pass


@app.put('/observations', response_model=ObservationsPutResponse)
def put_observations(
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
    body: ObservationsPutRequest = None,
) -> ObservationsPutResponse:
    """
    Update multiple Observation entities
    """
    pass


@app.post('/observations', response_model=ObservationsPostResponse)
def post_observations(
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
    body: List[ObservationNewRequest] = None,
) -> ObservationsPostResponse:
    """
    Add new Observation entities
    """
    pass


@app.get('/observations/table', response_model=ObservationsTableGetResponse)
def get_observations_table(
    observation_unit_db_id: Optional[str] = Query(None, alias='observationUnitDbId'),
    germplasm_db_id: Optional[str] = Query(None, alias='germplasmDbId'),
    observation_variable_db_id: Optional[str] = Query(
        None, alias='observationVariableDbId'
    ),
    study_db_id: Optional[str] = Query(None, alias='studyDbId'),
    location_db_id: Optional[str] = Query(None, alias='locationDbId'),
    trial_db_id: Optional[str] = Query(None, alias='trialDbId'),
    program_db_id: Optional[str] = Query(None, alias='programDbId'),
    season_db_id: Optional[str] = Query(None, alias='seasonDbId'),
    observation_level: Optional[str] = Query(None, alias='observationLevel'),
    search_results_db_id: Optional[str] = Query(None, alias='searchResultsDbId'),
    observation_time_stamp_range_start: Optional[datetime] = Query(
        None, alias='observationTimeStampRangeStart'
    ),
    observation_time_stamp_range_end: Optional[datetime] = Query(
        None, alias='observationTimeStampRangeEnd'
    ),
    accept: WSMIMEDataTypes = Query(..., alias='Accept'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> ObservationsTableGetResponse:
    """
    Get a list of Observations in a table format
    """
    pass


@app.get(
    '/observations/{observation_db_id}',
    response_model=ObservationsbservationDbIdGetResponse,
)
def get_observations_observation_db_id(
    observation_db_id: str = Query(..., alias='observationDbId'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> ObservationsbservationDbIdGetResponse:
    """
    Get the details of a specific Observations
    """
    pass


@app.put(
    '/observations/{observation_db_id}',
    response_model=ObservationsbservationDbIdPutResponse,
)
def put_observations_observation_db_id(
    observation_db_id: str = Query(..., alias='observationDbId'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
    body: ObservationNewRequest = None,
) -> ObservationsbservationDbIdPutResponse:
    """
    Update an existing Observation
    """
    pass


@app.get('/observationunits', response_model=ObservationunitsGetResponse)
def get_observationunits(
    observation_unit_db_id: Optional[str] = Query(None, alias='observationUnitDbId'),
    germplasm_db_id: Optional[str] = Query(None, alias='germplasmDbId'),
    study_db_id: Optional[str] = Query(None, alias='studyDbId'),
    location_db_id: Optional[str] = Query(None, alias='locationDbId'),
    trial_db_id: Optional[str] = Query(None, alias='trialDbId'),
    program_db_id: Optional[str] = Query(None, alias='programDbId'),
    season_db_id: Optional[str] = Query(None, alias='seasonDbId'),
    observation_unit_level_name: Optional[str] = Query(
        None, alias='observationUnitLevelName'
    ),
    observation_unit_level_order: Optional[str] = Query(
        None, alias='observationUnitLevelOrder'
    ),
    observation_unit_level_code: Optional[str] = Query(
        None, alias='observationUnitLevelCode'
    ),
    include_observations: Optional[bool] = Query(None, alias='includeObservations'),
    external_reference_i_d: Optional[str] = Query(None, alias='externalReferenceID'),
    external_reference_source: Optional[str] = Query(
        None, alias='externalReferenceSource'
    ),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> ObservationunitsGetResponse:
    """
    Get a filtered set of Observation Units
    """
    pass


@app.put('/observationunits', response_model=ObservationunitsPutResponse)
def put_observationunits(
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
    body: ObservationunitsPutRequest = None,
) -> ObservationunitsPutResponse:
    """
    Update a set of Observation Units
    """
    pass


@app.post('/observationunits', response_model=ObservationunitsPostResponse)
def post_observationunits(
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
    body: List[ObservationUnitNewRequest] = None,
) -> ObservationunitsPostResponse:
    """
    Add new Observation Units
    """
    pass


@app.get('/observationunits/table', response_model=ObservationunitsTableGetResponse)
def get_observationunits_table(
    observation_unit_db_id: Optional[str] = Query(None, alias='observationUnitDbId'),
    germplasm_db_id: Optional[str] = Query(None, alias='germplasmDbId'),
    observation_variable_db_id: Optional[str] = Query(
        None, alias='observationVariableDbId'
    ),
    study_db_id: Optional[str] = Query(None, alias='studyDbId'),
    location_db_id: Optional[str] = Query(None, alias='locationDbId'),
    trial_db_id: Optional[str] = Query(None, alias='trialDbId'),
    program_db_id: Optional[str] = Query(None, alias='programDbId'),
    season_db_id: Optional[str] = Query(None, alias='seasonDbId'),
    observation_level: Optional[str] = Query(None, alias='observationLevel'),
    accept: WSMIMEDataTypes = Query(..., alias='Accept'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> ObservationunitsTableGetResponse:
    """
    Get a list of Observations in a table format
    """
    pass


@app.get(
    '/observationunits/{observation_unit_db_id}',
    response_model=ObservationunitsbservationUnitDbIdGetResponse,
)
def get_observationunits_observation_unit_db_id(
    observation_unit_db_id: str = Query(..., alias='observationUnitDbId'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> ObservationunitsbservationUnitDbIdGetResponse:
    """
    Get the details of a specific Observation Unit
    """
    pass


@app.put(
    '/observationunits/{observation_unit_db_id}',
    response_model=ObservationunitsbservationUnitDbIdPutResponse,
)
def put_observationunits_observation_unit_db_id(
    observation_unit_db_id: str = Query(..., alias='observationUnitDbId'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
    body: ObservationUnitNewRequest = None,
) -> ObservationunitsbservationUnitDbIdPutResponse:
    """
    Update an existing Observation Units
    """
    pass


@app.get('/ontologies', response_model=OntologiesGetResponse)
def get_ontologies(
    ontology_db_id: Optional[str] = Query(None, alias='ontologyDbId'),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> OntologiesGetResponse:
    """
    Get the Ontologies
    """
    pass


@app.get('/scales', response_model=ScalesGetResponse)
def get_scales(
    scale_db_id: Optional[str] = Query(None, alias='scaleDbId'),
    observation_variable_db_id: Optional[str] = Query(
        None, alias='observationVariableDbId'
    ),
    external_reference_i_d: Optional[str] = Query(None, alias='externalReferenceID'),
    external_reference_source: Optional[str] = Query(
        None, alias='externalReferenceSource'
    ),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> ScalesGetResponse:
    """
    Get the Scales
    """
    pass


@app.post('/scales', response_model=ScalesPostResponse)
def post_scales(
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
    body: List[ScaleNewRequest] = None,
) -> ScalesPostResponse:
    """
    Add new Scales
    """
    pass


@app.get('/scales/{scale_db_id}', response_model=ScalescaleDbIdGetResponse)
def get_scales_scale_db_id(
    scale_db_id: str = Query(..., alias='scaleDbId'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> ScalescaleDbIdGetResponse:
    """
    Get the details of a specific Scale
    """
    pass


@app.put('/scales/{scale_db_id}', response_model=ScalescaleDbIdPutResponse)
def put_scales_scale_db_id(
    scale_db_id: str = Query(..., alias='scaleDbId'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
    body: ScaleNewRequest = None,
) -> ScalescaleDbIdPutResponse:
    """
    Update an existing Scale
    """
    pass


@app.post(
    '/search/images',
    response_model=Union[SearchImagesPostResponse, SearchImagesPostResponse],
)
def post_search_images(
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
    body: ImageSearchRequest = None,
) -> Union[SearchImagesPostResponse, SearchImagesPostResponse]:
    """
    Submit a search request for Images
    """
    pass


@app.get(
    '/search/images/{search_results_db_id}',
    response_model=Union[
        SearchImagesearchResultsDbIdGetResponse, SearchImagesearchResultsDbIdGetResponse
    ],
)
def get_search_images_search_results_db_id(
    search_results_db_id: str = Query(..., alias='searchResultsDbId'),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> Union[
    SearchImagesearchResultsDbIdGetResponse, SearchImagesearchResultsDbIdGetResponse
]:
    """
    Get the results of an Images search request
    """
    pass


@app.post(
    '/search/observations',
    response_model=Union[
        SearchObservationsPostResponse, SearchObservationsPostResponse
    ],
)
def post_search_observations(
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
    body: ObservationSearchRequest = None,
) -> Union[SearchObservationsPostResponse, SearchObservationsPostResponse]:
    """
    Submit a search request for a set of Observations
    """
    pass


@app.get(
    '/search/observations/{search_results_db_id}',
    response_model=Union[
        SearchObservationsearchResultsDbIdGetResponse,
        SearchObservationsearchResultsDbIdGetResponse,
    ],
)
def get_search_observations_search_results_db_id(
    accept: WSMIMEDataTypes = Query(..., alias='Accept'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
    search_results_db_id: str = Query(..., alias='searchResultsDbId'),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
) -> Union[
    SearchObservationsearchResultsDbIdGetResponse,
    SearchObservationsearchResultsDbIdGetResponse,
]:
    """
    Returns a list of Observations based on search criteria.
    """
    pass


@app.post(
    '/search/observationunits',
    response_model=Union[
        SearchObservationunitsPostResponse, SearchObservationunitsPostResponse
    ],
)
def post_search_observationunits(
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
    body: ObservationUnitSearchRequest = None,
) -> Union[SearchObservationunitsPostResponse, SearchObservationunitsPostResponse]:
    """
    Submit a search request for Observation Units
    """
    pass


@app.get(
    '/search/observationunits/{search_results_db_id}',
    response_model=Union[
        SearchObservationunitsearchResultsDbIdGetResponse,
        SearchObservationunitsearchResultsDbIdGetResponse,
    ],
)
def get_search_observationunits_search_results_db_id(
    search_results_db_id: str = Query(..., alias='searchResultsDbId'),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> Union[
    SearchObservationunitsearchResultsDbIdGetResponse,
    SearchObservationunitsearchResultsDbIdGetResponse,
]:
    """
    Observation Unit Search
    """
    pass


@app.post(
    '/search/variables',
    response_model=Union[SearchVariablesPostResponse, SearchVariablesPostResponse],
)
def post_search_variables(
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
    body: ObservationVariableSearchRequest = None,
) -> Union[SearchVariablesPostResponse, SearchVariablesPostResponse]:
    """
    Submit a search request for Observation Variables
    """
    pass


@app.get(
    '/search/variables/{search_results_db_id}',
    response_model=Union[
        SearchVariablesearchResultsDbIdGetResponse,
        SearchVariablesearchResultsDbIdGetResponse,
    ],
)
def get_search_variables_search_results_db_id(
    search_results_db_id: str = Query(..., alias='searchResultsDbId'),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> Union[
    SearchVariablesearchResultsDbIdGetResponse,
    SearchVariablesearchResultsDbIdGetResponse,
]:
    """
    Get the results of a Observation Variable search request
    """
    pass


@app.get('/traits', response_model=TraitsGetResponse)
def get_traits(
    trait_db_id: Optional[str] = Query(None, alias='traitDbId'),
    observation_variable_db_id: Optional[str] = Query(
        None, alias='observationVariableDbId'
    ),
    external_reference_i_d: Optional[str] = Query(None, alias='externalReferenceID'),
    external_reference_source: Optional[str] = Query(
        None, alias='externalReferenceSource'
    ),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> TraitsGetResponse:
    """
    Get the Traits
    """
    pass


@app.post('/traits', response_model=TraitsPostResponse)
def post_traits(
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
    body: List[TraitNewRequest] = None,
) -> TraitsPostResponse:
    """
    Add new Traits
    """
    pass


@app.get('/traits/{trait_db_id}', response_model=TraitsraitDbIdGetResponse)
def get_traits_trait_db_id(
    trait_db_id: str = Query(..., alias='traitDbId'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> TraitsraitDbIdGetResponse:
    """
    Get the details of a specific Trait
    """
    pass


@app.put('/traits/{trait_db_id}', response_model=TraitsraitDbIdPutResponse)
def put_traits_trait_db_id(
    trait_db_id: str = Query(..., alias='traitDbId'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
    body: TraitNewRequest = None,
) -> TraitsraitDbIdPutResponse:
    """
    Update an existing Trait
    """
    pass


@app.get('/variables', response_model=VariablesGetResponse)
def get_variables(
    observation_variable_db_id: Optional[str] = Query(
        None, alias='observationVariableDbId'
    ),
    trait_class: Optional[str] = Query(None, alias='traitClass'),
    study_db_id: Optional[str] = Query(None, alias='studyDbId'),
    external_reference_i_d: Optional[str] = Query(None, alias='externalReferenceID'),
    external_reference_source: Optional[str] = Query(
        None, alias='externalReferenceSource'
    ),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> VariablesGetResponse:
    """
    Get the Observation Variables
    """
    pass


@app.post('/variables', response_model=VariablesPostResponse)
def post_variables(
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
    body: List[ObservationVariableNewRequest] = None,
) -> VariablesPostResponse:
    """
    Add new Observation Variables
    """
    pass


@app.get(
    '/variables/{observation_variable_db_id}',
    response_model=VariablesbservationVariableDbIdGetResponse,
)
def get_variables_observation_variable_db_id(
    observation_variable_db_id: str = Query(..., alias='observationVariableDbId'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> VariablesbservationVariableDbIdGetResponse:
    """
    Get the details for a specific Observation Variable
    """
    pass


@app.put(
    '/variables/{observation_variable_db_id}',
    response_model=VariablesbservationVariableDbIdPutResponse,
)
def put_variables_observation_variable_db_id(
    observation_variable_db_id: str = Query(..., alias='observationVariableDbId'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
    body: ObservationVariableNewRequest = None,
) -> VariablesbservationVariableDbIdPutResponse:
    """
    Update an existing Observation Variable
    """
    pass
