# generated by fastapi-codegen:
#   filename:  PlantBreedingAPI-BrAPI-Core-2.0-swagger.yaml
#   timestamp: 2021-02-18T03:06:35+00:00

from __future__ import annotations

from datetime import date
from typing import List, Optional, Union

from fastapi import FastAPI, Query
from pydantic import constr

from .models import (
    CommoncropnamesGetResponse,
    # ListNewRequest,
    # ListSearchRequest,
    # ListsGetResponse,
    # ListsistDbIdGetResponse,
    # ListsistDbIdPutResponse,
    # ListsistDbIitemsPostResponse,
    # ListsPostResponse,
    # ListTypes,
    # LocationNewRequest,
    # LocationSearchRequest,
    # LocationsGetResponse,
    # LocationsocationDbIdGetResponse,
    # LocationsocationDbIdPutResponse,
    # LocationsPostResponse,
    # PeopleersonDbIdGetResponse,
    # PeopleersonDbIdPutResponse,
    # PeopleGetResponse,
    # PeoplePostResponse,
    # PersonNewRequest,
    # PersonSearchRequest,
    # ProgramNewRequest,
    # ProgramSearchRequest,
    # ProgramsGetResponse,
    # ProgramsPostResponse,
    # ProgramsrogramDbIdGetResponse,
    # ProgramsrogramDbIdPutResponse,
    # SearchListsearchResultsDbIdGetResponse,
    # SearchListsPostResponse,
    # SearchLocationsearchResultsDbIdGetResponse,
    # SearchLocationsPostResponse,
    # SearchPeopleearchResultsDbIdGetResponse,
    # SearchPeoplePostResponse,
    # SearchProgramsearchResultsDbIdGetResponse,
    # SearchProgramsPostResponse,
    # SearchStudiesearchResultsDbIdGetResponse,
    # SearchStudiesPostResponse,
    # SearchTrialsearchResultsDbIdGetResponse,
    # SearchTrialsPostResponse,
    # Season,
    # SeasonseasonDbIdGetResponse,
    # SeasonseasonDbIdPutResponse,
    # SeasonsGetResponse,
    # SeasonsPostResponse,
    ServerinfoGetResponse,
    # StudiesGetResponse,
    # StudiesPostResponse,
    # StudiestudyDbIdGetResponse,
    # StudiestudyDbIdPutResponse,
    # StudyNewRequest,
    # StudySearchRequest,
    # StudytypesGetResponse,
    # TrialNewRequest,
    # TrialSearchRequest,
    # TrialsGetResponse,
    # TrialsPostResponse,
    # TrialsrialDbIdGetResponse,
    # TrialsrialDbIdPutResponse,
    WSMIMEDataTypes,
)

app = FastAPI(
    description='The Breeding API (BrAPI) is a Standardized REST ful Web Service API Specification for communicating Plant Breeding Data. BrAPI allows for easy data sharing between databases and tools involved in plant breeding.\n<div class="brapi-section">\n<h2 class="brapi-section-title">General Reference Documentation</h2>\n<div class="gen-info-link"><a href="https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/URL_Structure.md">URL Structure</a></div>\n<div class="gen-info-link"><a href="https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Response_Structure.md">Response Structure</a></div>\n<div class="gen-info-link"><a href="https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Date_Time_Encoding.md">Date/Time Encoding</a></div>\n<div class="gen-info-link"><a href="https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Location_Encoding.md">Location Encoding</a></div>\n<div class="gen-info-link"><a href="https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Error_Handling.md">Error Handling</a></div>\n<div class="gen-info-link"><a href="https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Search_Services.md">Search Services</a></div>\n</div>\n\n<div class="current-brapi-section brapi-section">\n<h2 class="brapi-section-title">BrAPI Core</h2>\n<div class="brapi-section-description">The BrAPI Core module contains high level entities used for organization and management. This includes Programs, Trials, Studies, Locations, People, and Lists</div>\n<div class="version-number">V2.0</div>\n<div class="link-btn"><a href="https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Core">GitHub</a></div>\n<div class="link-btn"><a href="https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Core">SwaggerHub</a></div>\n<div class="link-btn"><a href="https://brapicore.docs.apiary.io">Apiary</a></div>\n<div class="stop-float"></div>\n</div>\n\n<div class="brapi-section">\n<h2 class="brapi-section-title">BrAPI Phenotyping</h2>\n<div class="brapi-section-description">The BrAPI Phenotyping module contains entities related to phenotypic observations. This includes Observation Units, Observations, Observation Variables, Traits, Scales, Methods, and Images</div>\n<div class="version-number">V2.0</div>\n<div class="link-btn"><a href="https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Phenotyping">GitHub</a></div>\n<div class="link-btn"><a href="https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Phenotyping">SwaggerHub</a></div>\n<div class="link-btn"><a href="https://brapiphenotyping.docs.apiary.io">Apiary</a></div>\n<div class="stop-float"></div>\n</div>\n\n<div class="brapi-section">\n<h2 class="brapi-section-title">BrAPI Genotyping</h2>\n<div class="brapi-section-description">The BrAPI Genotyping module contains entities related to genotyping analysis. This includes Samples, Markers, Variant Sets, Variants, Call Sets, Calls, References, Reads, and Vendor Orders</div>\n<div class="version-number">V2.0</div>\n<div class="link-btn"><a href="https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Genotyping">GitHub</a></div>\n<div class="link-btn"><a href="https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Genotyping">SwaggerHub</a></div>\n<div class="link-btn"><a href="https://brapigenotyping.docs.apiary.io">Apiary</a></div>\n<div class="stop-float"></div>\n</div>\n\n<div class="brapi-section">\n<h2 class="brapi-section-title">BrAPI Germplasm</h2>\n<div class="brapi-section-description">The BrAPI Germplasm module contains entities related to germplasm management. This includes Germplasm, Germplasm Attributes, Seed Lots, Crosses, Pedigree, and Progeny</div>\n<div class="version-number">V2.0</div>\n<div class="link-btn"><a href="https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Germplasm">GitHub</a></div>\n<div class="link-btn"><a href="https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Germplasm">SwaggerHub</a></div>\n<div class="link-btn"><a href="https://brapigermplasm.docs.apiary.io">Apiary</a></div>\n<div class="stop-float"></div>\n</div>\n\n<style>\n.link-btn{\nfloat: left; \nmargin: 2px 10px 0 0; \npadding: 0 5px; \nborder-radius: 5px; \nbackground-color: #ddd;\n}\n.stop-float{\n  clear: both;\n}\n.version-number{\n  float: left; \n  margin: 5px 10px 0 5px;\n}\n.brapi-section-title{\n  margin: 0 10px 0 0;\n  font-size: 20px;\n}\n.current-brapi-section{\n  font-weight: bolder;\n  border-radius: 5px; \n  background-color: #ddd;\n}\n.brapi-section{\n  padding: 5px 5px; \n}\n.brapi-section-description{\n  margin: 5px 0 0 5px;\n}\n</style>',
    title='BrAPI-Core',
    version='2.0',
)


@app.get('/commoncropnames', response_model=CommoncropnamesGetResponse)
def get_commoncropnames(
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> CommoncropnamesGetResponse:
    """
    Get the Common Crop Names
    """
    pass


# @app.get('/lists', response_model=ListsGetResponse)
# def get_lists(
#     list_type: Optional[ListTypes] = Query(None, alias='listType'),
#     list_name: Optional[str] = Query(None, alias='listName'),
#     list_db_id: Optional[str] = Query(None, alias='listDbId'),
#     list_source: Optional[str] = Query(None, alias='listSource'),
#     external_reference_i_d: Optional[str] = Query(None, alias='externalReferenceID'),
#     external_reference_source: Optional[str] = Query(
#         None, alias='externalReferenceSource'
#     ),
#     page: Optional[int] = None,
#     page_size: Optional[int] = Query(None, alias='pageSize'),
#     authorization: Optional[constr(regex='^Bearer .*$')] = Query(
#         None, alias='Authorization'
#     ),
# ) -> ListsGetResponse:
#     """
#     Get filtered set of generic lists
#     """
#     pass


# @app.post('/lists', response_model=ListsPostResponse)
# def post_lists(
#     authorization: Optional[constr(regex='^Bearer .*$')] = Query(
#         None, alias='Authorization'
#     ),
#     body: List[ListNewRequest] = None,
# ) -> ListsPostResponse:
#     """
#     Create New List Objects
#     """
#     pass


# @app.get('/lists/{list_db_id}', response_model=ListsistDbIdGetResponse)
# def get_lists_list_db_id(
#     list_db_id: str = Query(..., alias='listDbId'),
#     authorization: Optional[constr(regex='^Bearer .*$')] = Query(
#         None, alias='Authorization'
#     ),
# ) -> ListsistDbIdGetResponse:
#     """
#     Get the details of a specific List
#     """
#     pass


# @app.put('/lists/{list_db_id}', response_model=ListsistDbIdPutResponse)
# def put_lists_list_db_id(
#     list_db_id: str = Query(..., alias='listDbId'),
#     authorization: Optional[constr(regex='^Bearer .*$')] = Query(
#         None, alias='Authorization'
#     ),
#     body: ListNewRequest = None,
# ) -> ListsistDbIdPutResponse:
#     """
#     Update an existing generic list
#     """
#     pass


# @app.post('/lists/{list_db_id}/items', response_model=ListsistDbIitemsPostResponse)
# def post_lists_list_db_id_items(
#     list_db_id: str = Query(..., alias='listDbId'),
#     authorization: Optional[constr(regex='^Bearer .*$')] = Query(
#         None, alias='Authorization'
#     ),
#     body: List[str] = None,
# ) -> ListsistDbIitemsPostResponse:
#     """
#     Add Items to a specific List
#     """
#     pass


# @app.get('/locations', response_model=LocationsGetResponse)
# def get_locations(
#     location_type: Optional[str] = Query(None, alias='locationType'),
#     location_db_id: Optional[str] = Query(None, alias='locationDbId'),
#     external_reference_i_d: Optional[str] = Query(None, alias='externalReferenceID'),
#     external_reference_source: Optional[str] = Query(
#         None, alias='externalReferenceSource'
#     ),
#     page: Optional[int] = None,
#     page_size: Optional[int] = Query(None, alias='pageSize'),
#     authorization: Optional[constr(regex='^Bearer .*$')] = Query(
#         None, alias='Authorization'
#     ),
# ) -> LocationsGetResponse:
#     """
#     Get a filtered list of Locations
#     """
#     pass


# @app.post('/locations', response_model=LocationsPostResponse)
# def post_locations(
#     authorization: Optional[constr(regex='^Bearer .*$')] = Query(
#         None, alias='Authorization'
#     ),
#     body: List[LocationNewRequest] = None,
# ) -> LocationsPostResponse:
#     """
#     Create new Locations
#     """
#     pass


# @app.get('/locations/{location_db_id}', response_model=LocationsocationDbIdGetResponse)
# def get_locations_location_db_id(
#     location_db_id: str = Query(..., alias='locationDbId'),
#     authorization: Optional[constr(regex='^Bearer .*$')] = Query(
#         None, alias='Authorization'
#     ),
# ) -> LocationsocationDbIdGetResponse:
#     """
#     Get the details of a specific Location
#     """
#     pass


# @app.put('/locations/{location_db_id}', response_model=LocationsocationDbIdPutResponse)
# def put_locations_location_db_id(
#     location_db_id: str = Query(..., alias='locationDbId'),
#     authorization: Optional[constr(regex='^Bearer .*$')] = Query(
#         None, alias='Authorization'
#     ),
#     body: LocationNewRequest = None,
# ) -> LocationsocationDbIdPutResponse:
#     """
#     Update the details for an existing Location
#     """
#     pass


# @app.get('/people', response_model=PeopleGetResponse)
# def get_people(
#     first_name: Optional[str] = Query(None, alias='firstName'),
#     last_name: Optional[str] = Query(None, alias='lastName'),
#     person_db_id: Optional[str] = Query(None, alias='personDbId'),
#     user_i_d: Optional[str] = Query(None, alias='userID'),
#     external_reference_i_d: Optional[str] = Query(None, alias='externalReferenceID'),
#     external_reference_source: Optional[str] = Query(
#         None, alias='externalReferenceSource'
#     ),
#     page: Optional[int] = None,
#     page_size: Optional[int] = Query(None, alias='pageSize'),
#     authorization: Optional[constr(regex='^Bearer .*$')] = Query(
#         None, alias='Authorization'
#     ),
# ) -> PeopleGetResponse:
#     """
#     Get filtered list of People
#     """
#     pass


# @app.post('/people', response_model=PeoplePostResponse)
# def post_people(
#     authorization: Optional[constr(regex='^Bearer .*$')] = Query(
#         None, alias='Authorization'
#     ),
#     body: List[PersonNewRequest] = None,
# ) -> PeoplePostResponse:
#     """
#     Create new People
#     """
#     pass


# @app.get('/people/{person_db_id}', response_model=PeopleersonDbIdGetResponse)
# def get_people_person_db_id(
#     person_db_id: str = Query(..., alias='personDbId'),
#     authorization: Optional[constr(regex='^Bearer .*$')] = Query(
#         None, alias='Authorization'
#     ),
# ) -> PeopleersonDbIdGetResponse:
#     """
#     Get the details for a specific Person
#     """
#     pass


# @app.put('/people/{person_db_id}', response_model=PeopleersonDbIdPutResponse)
# def put_people_person_db_id(
#     person_db_id: str = Query(..., alias='personDbId'),
#     authorization: Optional[constr(regex='^Bearer .*$')] = Query(
#         None, alias='Authorization'
#     ),
#     body: PersonNewRequest = None,
# ) -> PeopleersonDbIdPutResponse:
#     """
#     Update an existing Person
#     """
#     pass


# @app.get('/programs', response_model=ProgramsGetResponse)
# def get_programs(
#     common_crop_name: Optional[str] = Query(None, alias='commonCropName'),
#     program_db_id: Optional[str] = Query(None, alias='programDbId'),
#     program_name: Optional[str] = Query(None, alias='programName'),
#     abbreviation: Optional[str] = None,
#     external_reference_i_d: Optional[str] = Query(None, alias='externalReferenceID'),
#     external_reference_source: Optional[str] = Query(
#         None, alias='externalReferenceSource'
#     ),
#     page: Optional[int] = None,
#     page_size: Optional[int] = Query(None, alias='pageSize'),
#     authorization: Optional[constr(regex='^Bearer .*$')] = Query(
#         None, alias='Authorization'
#     ),
# ) -> ProgramsGetResponse:
#     """
#     Get a filtered list of breeding Programs
#     """
#     pass


# @app.post('/programs', response_model=ProgramsPostResponse)
# def post_programs(
#     authorization: Optional[constr(regex='^Bearer .*$')] = Query(
#         None, alias='Authorization'
#     ),
#     body: List[ProgramNewRequest] = None,
# ) -> ProgramsPostResponse:
#     """
#     Add new breeding Programs to the database
#     """
#     pass


# @app.get('/programs/{program_db_id}', response_model=ProgramsrogramDbIdGetResponse)
# def get_programs_program_db_id(
#     program_db_id: str = Query(..., alias='programDbId'),
#     authorization: Optional[constr(regex='^Bearer .*$')] = Query(
#         None, alias='Authorization'
#     ),
# ) -> ProgramsrogramDbIdGetResponse:
#     """
#     Get a breeding Program by Id
#     """
#     pass


# @app.put('/programs/{program_db_id}', response_model=ProgramsrogramDbIdPutResponse)
# def put_programs_program_db_id(
#     program_db_id: str = Query(..., alias='programDbId'),
#     authorization: Optional[constr(regex='^Bearer .*$')] = Query(
#         None, alias='Authorization'
#     ),
#     body: ProgramNewRequest = None,
# ) -> ProgramsrogramDbIdPutResponse:
#     """
#     Update an existing Program
#     """
#     pass


# @app.post(
#     '/search/lists',
#     response_model=Union[SearchListsPostResponse, SearchListsPostResponse],
# )
# def post_search_lists(
#     authorization: Optional[constr(regex='^Bearer .*$')] = Query(
#         None, alias='Authorization'
#     ),
#     body: ListSearchRequest = None,
# ) -> Union[SearchListsPostResponse, SearchListsPostResponse]:
#     """
#     Submit a search request for Lists
#     """
#     pass


# @app.get(
#     '/search/lists/{search_results_db_id}',
#     response_model=Union[
#         SearchListsearchResultsDbIdGetResponse, SearchListsearchResultsDbIdGetResponse
#     ],
# )
# def get_search_lists_search_results_db_id(
#     search_results_db_id: str = Query(..., alias='searchResultsDbId'),
#     page: Optional[int] = None,
#     page_size: Optional[int] = Query(None, alias='pageSize'),
#     authorization: Optional[constr(regex='^Bearer .*$')] = Query(
#         None, alias='Authorization'
#     ),
# ) -> Union[
#     SearchListsearchResultsDbIdGetResponse, SearchListsearchResultsDbIdGetResponse
# ]:
#     """
#     Get the results of a List search request
#     """
#     pass


# @app.post(
#     '/search/locations',
#     response_model=Union[SearchLocationsPostResponse, SearchLocationsPostResponse],
# )
# def post_search_locations(
#     authorization: Optional[constr(regex='^Bearer .*$')] = Query(
#         None, alias='Authorization'
#     ),
#     body: LocationSearchRequest = None,
# ) -> Union[SearchLocationsPostResponse, SearchLocationsPostResponse]:
#     """
#     Submit a search request for Locations
#     """
#     pass


# @app.get(
#     '/search/locations/{search_results_db_id}',
#     response_model=Union[
#         SearchLocationsearchResultsDbIdGetResponse,
#         SearchLocationsearchResultsDbIdGetResponse,
#     ],
# )
# def get_search_locations_search_results_db_id(
#     search_results_db_id: str = Query(..., alias='searchResultsDbId'),
#     page: Optional[int] = None,
#     page_size: Optional[int] = Query(None, alias='pageSize'),
#     authorization: Optional[constr(regex='^Bearer .*$')] = Query(
#         None, alias='Authorization'
#     ),
# ) -> Union[
#     SearchLocationsearchResultsDbIdGetResponse,
#     SearchLocationsearchResultsDbIdGetResponse,
# ]:
#     """
#     Get the results of a Locations search request
#     """
#     pass


# @app.post(
#     '/search/people',
#     response_model=Union[SearchPeoplePostResponse, SearchPeoplePostResponse],
# )
# def post_search_people(
#     authorization: Optional[constr(regex='^Bearer .*$')] = Query(
#         None, alias='Authorization'
#     ),
#     body: PersonSearchRequest = None,
# ) -> Union[SearchPeoplePostResponse, SearchPeoplePostResponse]:
#     """
#     Submit a search request for People
#     """
#     pass


# @app.get(
#     '/search/people/{search_results_db_id}',
#     response_model=Union[
#         SearchPeopleearchResultsDbIdGetResponse, SearchPeopleearchResultsDbIdGetResponse
#     ],
# )
# def get_search_people_search_results_db_id(
#     search_results_db_id: str = Query(..., alias='searchResultsDbId'),
#     page: Optional[int] = None,
#     page_size: Optional[int] = Query(None, alias='pageSize'),
#     authorization: Optional[constr(regex='^Bearer .*$')] = Query(
#         None, alias='Authorization'
#     ),
# ) -> Union[
#     SearchPeopleearchResultsDbIdGetResponse, SearchPeopleearchResultsDbIdGetResponse
# ]:
#     """
#     Get the results of a People search request
#     """
#     pass


# @app.post(
#     '/search/programs',
#     response_model=Union[SearchProgramsPostResponse, SearchProgramsPostResponse],
# )
# def post_search_programs(
#     authorization: Optional[constr(regex='^Bearer .*$')] = Query(
#         None, alias='Authorization'
#     ),
#     body: ProgramSearchRequest = None,
# ) -> Union[SearchProgramsPostResponse, SearchProgramsPostResponse]:
#     """
#     Submit a search request for Programs
#     """
#     pass


# @app.get(
#     '/search/programs/{search_results_db_id}',
#     response_model=Union[
#         SearchProgramsearchResultsDbIdGetResponse,
#         SearchProgramsearchResultsDbIdGetResponse,
#     ],
# )
# def get_search_programs_search_results_db_id(
#     search_results_db_id: str = Query(..., alias='searchResultsDbId'),
#     page: Optional[int] = None,
#     page_size: Optional[int] = Query(None, alias='pageSize'),
#     authorization: Optional[constr(regex='^Bearer .*$')] = Query(
#         None, alias='Authorization'
#     ),
# ) -> Union[
#     SearchProgramsearchResultsDbIdGetResponse, SearchProgramsearchResultsDbIdGetResponse
# ]:
#     """
#     Get the results of a Programs search request
#     """
#     pass


# @app.post(
#     '/search/studies',
#     response_model=Union[SearchStudiesPostResponse, SearchStudiesPostResponse],
# )
# def post_search_studies(
#     authorization: Optional[constr(regex='^Bearer .*$')] = Query(
#         None, alias='Authorization'
#     ),
#     body: StudySearchRequest = None,
# ) -> Union[SearchStudiesPostResponse, SearchStudiesPostResponse]:
#     """
#     Submit a search request for Studies
#     """
#     pass


# @app.get(
#     '/search/studies/{search_results_db_id}',
#     response_model=Union[
#         SearchStudiesearchResultsDbIdGetResponse,
#         SearchStudiesearchResultsDbIdGetResponse,
#     ],
# )
# def get_search_studies_search_results_db_id(
#     search_results_db_id: str = Query(..., alias='searchResultsDbId'),
#     page: Optional[int] = None,
#     page_size: Optional[int] = Query(None, alias='pageSize'),
#     authorization: Optional[constr(regex='^Bearer .*$')] = Query(
#         None, alias='Authorization'
#     ),
# ) -> Union[
#     SearchStudiesearchResultsDbIdGetResponse, SearchStudiesearchResultsDbIdGetResponse
# ]:
#     """
#     Get the results of a Studies search request
#     """
#     pass


# @app.post(
#     '/search/trials',
#     response_model=Union[SearchTrialsPostResponse, SearchTrialsPostResponse],
# )
# def post_search_trials(
#     authorization: Optional[constr(regex='^Bearer .*$')] = Query(
#         None, alias='Authorization'
#     ),
#     body: TrialSearchRequest = None,
# ) -> Union[SearchTrialsPostResponse, SearchTrialsPostResponse]:
#     """
#     Submit a search request for Trials
#     """
#     pass


# @app.get(
#     '/search/trials/{search_results_db_id}',
#     response_model=Union[
#         SearchTrialsearchResultsDbIdGetResponse, SearchTrialsearchResultsDbIdGetResponse
#     ],
# )
# def get_search_trials_search_results_db_id(
#     search_results_db_id: str = Query(..., alias='searchResultsDbId'),
#     page: Optional[int] = None,
#     page_size: Optional[int] = Query(None, alias='pageSize'),
#     authorization: Optional[constr(regex='^Bearer .*$')] = Query(
#         None, alias='Authorization'
#     ),
# ) -> Union[
#     SearchTrialsearchResultsDbIdGetResponse, SearchTrialsearchResultsDbIdGetResponse
# ]:
#     """
#     Get the results of a Trials search request
#     """
#     pass


# @app.get('/seasons', response_model=SeasonsGetResponse)
# def get_seasons(
#     season_db_id: Optional[str] = Query(None, alias='seasonDbId'),
#     season: Optional[str] = None,
#     year: Optional[int] = None,
#     page: Optional[int] = None,
#     page_size: Optional[int] = Query(None, alias='pageSize'),
#     authorization: Optional[constr(regex='^Bearer .*$')] = Query(
#         None, alias='Authorization'
#     ),
# ) -> SeasonsGetResponse:
#     """
#     Get the Seasons
#     """
#     pass


# @app.post('/seasons', response_model=SeasonsPostResponse)
# def post_seasons(
#     authorization: Optional[constr(regex='^Bearer .*$')] = Query(
#         None, alias='Authorization'
#     ),
#     body: List[Season] = None,
# ) -> SeasonsPostResponse:
#     """
#     POST new Seasons
#     """
#     pass


# @app.get('/seasons/{season_db_id}', response_model=SeasonseasonDbIdGetResponse)
# def get_seasons_season_db_id(
#     season_db_id: str = Query(..., alias='seasonDbId'),
#     authorization: Optional[constr(regex='^Bearer .*$')] = Query(
#         None, alias='Authorization'
#     ),
# ) -> SeasonseasonDbIdGetResponse:
#     """
#     Get the a single Season
#     """
#     pass


# @app.put('/seasons/{season_db_id}', response_model=SeasonseasonDbIdPutResponse)
# def put_seasons_season_db_id(
#     season_db_id: str = Query(..., alias='seasonDbId'),
#     authorization: Optional[constr(regex='^Bearer .*$')] = Query(
#         None, alias='Authorization'
#     ),
#     body: Season = None,
# ) -> SeasonseasonDbIdPutResponse:
#     """
#     Update existing Seasons
#     """
#     pass

## TODO: Rename main.py to views.py
#@app.get('/serverinfo', response_model=ServerinfoGetResponse)
@app.get('/serverinfo')
def get_serverinfo(
    data_type: Optional[WSMIMEDataTypes] = Query(None, alias='dataType'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> ServerinfoGetResponse:
    """
    Get the list of implemented Calls
    """
    from .models import Metadata, ServerInfo, Service, Method

    metadata = Metadata(datafiles=[], status=[])
    services = []
    services.append( Service(methods=[Method.GET, Method.POST],
                service= 'germplasm/{germplasmDbId}/pedigree',
                versions= ['2.0', '2.1']))

    serverinfo = ServerInfo(serverName = 'MontyDB Express, v1.0; BrAPIv2 Test Server.', contactEmail='fco@agostof.com', calls=services)

    import time
    serverinfo.serverName += ' Current server time: ' + str(time.asctime())
    response = ServerinfoGetResponse(metadata=metadata, result=serverinfo)

    return response


# @app.get('/studies', response_model=StudiesGetResponse)
# def get_studies(
#     common_crop_name: Optional[str] = Query(None, alias='commonCropName'),
#     study_type: Optional[str] = Query(None, alias='studyType'),
#     program_db_id: Optional[str] = Query(None, alias='programDbId'),
#     location_db_id: Optional[str] = Query(None, alias='locationDbId'),
#     season_db_id: Optional[str] = Query(None, alias='seasonDbId'),
#     trial_db_id: Optional[str] = Query(None, alias='trialDbId'),
#     study_db_id: Optional[str] = Query(None, alias='studyDbId'),
#     study_name: Optional[str] = Query(None, alias='studyName'),
#     study_code: Optional[str] = Query(None, alias='studyCode'),
#     study_p_u_i: Optional[str] = Query(None, alias='studyPUI'),
#     germplasm_db_id: Optional[str] = Query(None, alias='germplasmDbId'),
#     observation_variable_db_id: Optional[str] = Query(
#         None, alias='observationVariableDbId'
#     ),
#     active: Optional[bool] = None,
#     sort_by: Optional[str] = Query(None, alias='sortBy'),
#     sort_order: Optional[str] = Query(None, alias='sortOrder'),
#     external_reference_i_d: Optional[str] = Query(None, alias='externalReferenceID'),
#     external_reference_source: Optional[str] = Query(
#         None, alias='externalReferenceSource'
#     ),
#     page: Optional[int] = None,
#     page_size: Optional[int] = Query(None, alias='pageSize'),
#     authorization: Optional[constr(regex='^Bearer .*$')] = Query(
#         None, alias='Authorization'
#     ),
# ) -> StudiesGetResponse:
#     """
#     Get a filtered list of Studies
#     """
#     pass


# @app.post('/studies', response_model=StudiesPostResponse)
# def post_studies(
#     authorization: Optional[constr(regex='^Bearer .*$')] = Query(
#         None, alias='Authorization'
#     ),
#     body: List[StudyNewRequest] = None,
# ) -> StudiesPostResponse:
#     """
#     Create new Studies.
#     """
#     pass


# @app.get('/studies/{study_db_id}', response_model=StudiestudyDbIdGetResponse)
# def get_studies_study_db_id(
#     study_db_id: str = Query(..., alias='studyDbId'),
#     authorization: Optional[constr(regex='^Bearer .*$')] = Query(
#         None, alias='Authorization'
#     ),
# ) -> StudiestudyDbIdGetResponse:
#     """
#     Get the details for a specific Study
#     """
#     pass


# @app.put('/studies/{study_db_id}', response_model=StudiestudyDbIdPutResponse)
# def put_studies_study_db_id(
#     study_db_id: str = Query(..., alias='studyDbId'),
#     authorization: Optional[constr(regex='^Bearer .*$')] = Query(
#         None, alias='Authorization'
#     ),
#     body: StudyNewRequest = None,
# ) -> StudiestudyDbIdPutResponse:
#     """
#     Update an existing Study
#     """
#     pass


# @app.get('/studytypes', response_model=StudytypesGetResponse)
# def get_studytypes(
#     page: Optional[int] = None,
#     page_size: Optional[int] = Query(None, alias='pageSize'),
#     authorization: Optional[constr(regex='^Bearer .*$')] = Query(
#         None, alias='Authorization'
#     ),
# ) -> StudytypesGetResponse:
#     """
#     Get the Study Types
#     """
#     pass


# @app.get('/trials', response_model=TrialsGetResponse)
# def get_trials(
#     active: Optional[bool] = None,
#     common_crop_name: Optional[str] = Query(None, alias='commonCropName'),
#     contact_db_id: Optional[str] = Query(None, alias='contactDbId'),
#     program_db_id: Optional[str] = Query(None, alias='programDbId'),
#     location_db_id: Optional[str] = Query(None, alias='locationDbId'),
#     search_date_range_start: Optional[date] = Query(None, alias='searchDateRangeStart'),
#     search_date_range_end: Optional[date] = Query(None, alias='searchDateRangeEnd'),
#     study_db_id: Optional[str] = Query(None, alias='studyDbId'),
#     trial_db_id: Optional[str] = Query(None, alias='trialDbId'),
#     trial_name: Optional[str] = Query(None, alias='trialName'),
#     trial_p_u_i: Optional[str] = Query(None, alias='trialPUI'),
#     sort_by: Optional[str] = Query(None, alias='sortBy'),
#     sort_order: Optional[str] = Query(None, alias='sortOrder'),
#     external_reference_i_d: Optional[str] = Query(None, alias='externalReferenceID'),
#     external_reference_source: Optional[str] = Query(
#         None, alias='externalReferenceSource'
#     ),
#     page: Optional[int] = None,
#     page_size: Optional[int] = Query(None, alias='pageSize'),
#     authorization: Optional[constr(regex='^Bearer .*$')] = Query(
#         None, alias='Authorization'
#     ),
# ) -> TrialsGetResponse:
#     """
#     Get a filtered list of Trials
#     """
#     pass


# @app.post('/trials', response_model=TrialsPostResponse)
# def post_trials(
#     authorization: Optional[constr(regex='^Bearer .*$')] = Query(
#         None, alias='Authorization'
#     ),
#     body: List[TrialNewRequest] = None,
# ) -> TrialsPostResponse:
#     """
#     Create new trials
#     """
#     pass


# @app.get('/trials/{trial_db_id}', response_model=TrialsrialDbIdGetResponse)
# def get_trials_trial_db_id(
#     trial_db_id: str = Query(..., alias='trialDbId'),
#     authorization: Optional[constr(regex='^Bearer .*$')] = Query(
#         None, alias='Authorization'
#     ),
# ) -> TrialsrialDbIdGetResponse:
#     """
#     Get the details of a specific Trial
#     """
#     pass


# @app.put('/trials/{trial_db_id}', response_model=TrialsrialDbIdPutResponse)
# def put_trials_trial_db_id(
#     trial_db_id: str = Query(..., alias='trialDbId'),
#     authorization: Optional[constr(regex='^Bearer .*$')] = Query(
#         None, alias='Authorization'
#     ),
#     body: TrialNewRequest = None,
# ) -> TrialsrialDbIdPutResponse:
#     """
#     Update the details of an existing Trial
#     """
#     pass
