# generated by fastapi-codegen:
#   filename:  PlantBreedingAPI-BrAPI-Core-2.0-resolved.yaml
#   timestamp: 2021-03-24T20:58:23+00:00

from __future__ import annotations

from datetime import date, datetime
from enum import Enum
from typing import Dict, List, Optional, Union

from pydantic import AnyUrl, BaseModel, Extra, Field


class Contact(BaseModel):
    contactDbId: str = Field(
        ...,
        description='The ID which uniquely identifies this contact\n\nMIAPPE V1.1 (DM-33) Person ID - An identifier for the data submitter. If that submitter is an individual, ORCID identifiers are recommended.',
        example='5f4e5509',
    )
    email: Optional[str] = Field(
        None,
        description='The contacts email address\n\nMIAPPE V1.1 (DM-32) Person email - The electronic mail address of the person.',
        example='bob@bob.com',
    )
    instituteName: Optional[str] = Field(
        None,
        description='The name of the institution which this contact is part of\n\nMIAPPE V1.1 (DM-35) Person affiliation - The institution the person belongs to',
        example='The BrAPI Institute',
    )
    name: Optional[str] = Field(
        None,
        description='The full name of this contact person\n\nMIAPPE V1.1 (DM-31) Person name - The name of the person (either full name or as used in scientific publications)',
        example='Bob Robertson',
    )
    orcid: Optional[str] = Field(
        None,
        description='The Open Researcher and Contributor ID for this contact person (orcid.org)\n\nMIAPPE V1.1 (DM-33) Person ID - An identifier for the data submitter. If that submitter is an individual, ORCID identifiers are recommended.',
        example='http://orcid.org/0000-0001-8640-1750',
    )
    type: Optional[str] = Field(
        None,
        description='The type of person this contact represents (ex: Coordinator, Scientist, PI, etc.)\n\nMIAPPE V1.1 (DM-34) Person role - Type of contribution of the person to the investigation',
        example='PI',
    )


class Context(BaseModel):
    __root__: List[AnyUrl] = Field(
        ...,
        description='The JSON-LD Context is used to provide JSON-LD definitions to each field in a JSON object. By providing an array of context file urls, a BrAPI response object becomes JSON-LD compatible.  \n\nFor more information, see https://w3c.github.io/json-ld-syntax/#the-context',
        example=['https://brapi.org/jsonld/context/metadata.jsonld'],
        title='context',
    )


class DataLink(BaseModel):
    dataFormat: Optional[str] = Field(
        None,
        description='The structure of the data within a file. For example - VCF, table, image archive, multispectral image archives in EDAM ontology (used in Galaxy)\n\nMIAPPE V1.1 (DM-38) Data file description - Description of the format of the data file. May be a standard file format name, or a description of organization of the data in a tabular file.',
        example='Image Archive',
    )
    description: Optional[str] = Field(
        None,
        description='The general description of this data link\n\nMIAPPE V1.1 (DM-38) Data file description - Description of the format of the data file. May be a standard file format name, or a description of organization of the data in a tabular file.',
        example='Raw drone images collected for this study',
    )
    fileFormat: Optional[str] = Field(
        None,
        description='The MIME type of the file (ie text/csv, application/excel, application/zip).\n\nMIAPPE V1.1 (DM-38) Data file description - Description of the format of the data file. May be a standard file format name, or a description of organization of the data in a tabular file.',
        example='application/zip',
    )
    name: Optional[str] = Field(
        None,
        description='The name of the external data link\n\nMIAPPE V1.1 (DM-38) Data file description - Description of the format of the data file. May be a standard file format name, or a description of organization of the data in a tabular file.',
        example='image-archive.zip',
    )
    provenance: Optional[str] = Field(
        None,
        description='The description of the origin or ownership of this linked data. Could be a formal reference to software, method, or workflow.',
        example='Image Processing Pipeline, built at the University of Antarctica: https://github.com/antarctica/pipeline',
    )
    scientificType: Optional[str] = Field(
        None,
        description='The general type of data. For example- Genotyping, Phenotyping raw data, Phenotyping reduced data, Environmental, etc',
        example='Environmental',
    )
    url: Optional[AnyUrl] = Field(
        None,
        description='URL describing the location of this data file to view or download\n\nMIAPPE V1.1 (DM-37) Data file link - Link to the data file (or digital object) in a public database or in a persistent institutional repository; or identifier of the data file when submitted together with the MIAPPE submission.',
        example='https://brapi.org/image-archive.zip',
    )
    version: Optional[str] = Field(
        None,
        description='The version number for this data \n\nMIAPPE V1.1 (DM-39) Data file version - The version of the dataset (the actual data).',
        example='1.0.3',
    )


class EnvironmentParameter(BaseModel):
    description: str = Field(
        ...,
        description='Human-readable value of the environment parameter (defined above) constant within the experiment',
        example='the soil type was clay',
    )
    parameterName: str = Field(
        ...,
        description='Name of the environment parameter constant within the experiment\n\nMIAPPE V1.1 (DM-58) Environment parameter - Name of the environment parameter constant within the experiment. ',
        example='soil type',
    )
    parameterPUI: Optional[str] = Field(
        None,
        description='URI pointing to an ontology class for the parameter',
        example='PECO:0007155',
    )
    unit: Optional[str] = Field(
        None, description='Unit of the value for this parameter', example='pH'
    )
    unitPUI: Optional[str] = Field(
        None,
        description='URI pointing to an ontology class for the unit',
        example='PECO:0007059',
    )
    value: Optional[str] = Field(
        None,
        description='Numerical or categorical value\n\nMIAPPE V1.1 (DM-59) Environment parameter value - Value of the environment parameter (defined above) constant within the experiment.',
        example='clay soil',
    )
    valuePUI: Optional[str] = Field(
        None,
        description='URI pointing to an ontology class for the parameter value',
        example='ENVO:00002262',
    )


class AdditionalInfo(BaseModel):
    class Config:
        extra = Extra.allow

    __root__: str


class ListTypes(Enum):
    germplasm = 'germplasm'
    markers = 'markers'
    programs = 'programs'
    trials = 'trials'
    studies = 'studies'
    observationUnits = 'observationUnits'
    observations = 'observations'
    observationVariables = 'observationVariables'
    samples = 'samples'


class LevelName(Enum):
    study = 'study'
    field = 'field'
    entry = 'entry'
    rep = 'rep'
    block = 'block'
    sub_block = 'sub-block'
    plot = 'plot'
    sub_plot = 'sub-plot'
    plant = 'plant'
    pot = 'pot'
    sample = 'sample'


class ObservationUnitHierarchyLevel(BaseModel):
    levelName: Optional[LevelName] = Field(
        None, description='A name for this level', example='plot'
    )
    levelOrder: Optional[int] = Field(
        None,
        description="`levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`'s lower numbers are at the top of the hierarchy (ie field -> 1) and higher numbers are at the bottom of the hierarchy (ie plant -> 9).",
        example=2,
    )


class SearchRequestParametersCommonCropNames(BaseModel):
    commonCropNames: Optional[List[str]] = Field(
        None,
        description='Common name for the crop which this program is for',
        example=['Tomatillo', 'Paw Paw'],
    )


class SearchRequestParametersExternalReferences(BaseModel):
    externalReferenceIDs: Optional[List[str]] = Field(
        None,
        description='List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)',
        example=['http://purl.obolibrary.org/obo/ro.owl', '14a19841'],
    )
    externalReferenceSources: Optional[List[str]] = Field(
        None,
        description='List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)',
        example=['OBO Library', 'Field App Name'],
    )


class SearchRequestParametersGermplasm(BaseModel):
    germplasmDbIds: Optional[List[str]] = Field(
        None,
        description='List of IDs which uniquely identify germplasm to search for',
        example=['e9c6edd7', '1b1df4a6'],
    )
    germplasmNames: Optional[List[str]] = Field(
        None,
        description='List of human readable names to identify germplasm to search for',
        example=['A0000003', 'A0000477'],
    )


class SearchRequestParametersLocations(BaseModel):
    locationDbIds: Optional[List[str]] = Field(
        None,
        description='The location ids to search for',
        example=['b28911cf', '5071d1e4'],
    )
    locationNames: Optional[List[str]] = Field(
        None,
        description='A human readable names to search for',
        example=['Location Alpha', 'The Large Hadron Collider'],
    )


class SearchRequestParametersObservationVariables(BaseModel):
    observationVariableDbIds: Optional[List[str]] = Field(
        None,
        description='The DbIds of Variables to search for',
        example=['a646187d', '6d23513b'],
    )
    observationVariableNames: Optional[List[str]] = Field(
        None,
        description='The names of Variables to search for',
        example=['Plant Height in meters', 'Wheat rust score 1-5'],
    )


class SearchRequestParametersPaging(BaseModel):
    page: Optional[int] = Field(
        None,
        description="Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
        example=0,
    )
    pageSize: Optional[int] = Field(
        None,
        description='The size of the pages to be returned. Default is `1000`.',
        example=1000,
    )


class SearchRequestParametersPrograms(BaseModel):
    programDbIds: Optional[List[str]] = Field(
        None,
        description='A program identifier to search for',
        example=['8f5de35b', '0e2d4a13'],
    )
    programNames: Optional[List[str]] = Field(
        None,
        description='A name of a program to search for',
        example=['Better Breeding Program', 'Best Breeding Program'],
    )


class SearchRequestParametersStudies(BaseModel):
    studyDbIds: Optional[List[str]] = Field(
        None,
        description='List of study identifiers to search for',
        example=['cf6c4bd4', '691e69d6'],
    )
    studyNames: Optional[List[str]] = Field(
        None,
        description='List of study names to filter search results',
        example=['The First Bob Study 2017', 'Wheat Yield Trial 246'],
    )


class SearchRequestParametersTokenPaging(BaseModel):
    pageSize: Optional[int] = Field(
        None,
        description='The size of the pages to be returned. Default is `1000`.',
        example=1000,
    )
    pageToken: Optional[str] = Field(
        None,
        description='Used to request a specific page of data to be returned.\n\nTokenized pages are for large data sets which can not be efficiently broken into indexed pages. Use the nextPageToken and prevPageToken from a prior response to construct a query and move to the next or previous page respectively. ',
        example='33c27874',
    )


class SearchRequestParametersTrials(BaseModel):
    trialDbIds: Optional[List[str]] = Field(
        None,
        description='The ID which uniquely identifies a trial to search for',
        example=['d2593dc2', '9431a731'],
    )
    trialNames: Optional[List[str]] = Field(
        None,
        description='The human readable name of a trial to search for',
        example=['All Yield Trials 2016', 'Disease Resistance Study Comparison Group'],
    )


class Season(BaseModel):
    seasonDbId: str = Field(
        ...,
        description="The ID which uniquely identifies a season. For backward compatibility it can be a string like '2012', '1957-2004'",
        example='Spring_2018',
    )
    seasonName: Optional[str] = Field(
        None,
        description="Name of the season. ex. 'Spring', 'Q2', 'Season A', etc.",
        example='Spring',
    )
    year: Optional[int] = Field(
        None, description='The 4 digit year of the season.', example=2018
    )


class Method(Enum):
    GET = 'GET'
    POST = 'POST'
    PUT = 'PUT'
    DELETE = 'DELETE'


class Version(Enum):
    # field_2_0 = '2.0'
    # field_2_1 = '2.1'
    # field_2_2 = '2.2'
    v2_0 = '2.0'
    v2_1 = '2.1'
    v2_2 = '2.2'


class SortBy(Enum):
    studyDbId = 'studyDbId'
    trialDbId = 'trialDbId'
    programDbId = 'programDbId'
    locationDbId = 'locationDbId'
    seasonDbId = 'seasonDbId'
    studyType = 'studyType'
    studyName = 'studyName'
    studyLocation = 'studyLocation'
    programName = 'programName'
    germplasmDbId = 'germplasmDbId'
    observationVariableDbId = 'observationVariableDbId'


class SortOrder(Enum):
    ASC = 'ASC'
    DESC = 'DESC'


class StudySearchRequest(
    SearchRequestParametersPaging,
    SearchRequestParametersCommonCropNames,
    SearchRequestParametersPrograms,
    SearchRequestParametersTrials,
    SearchRequestParametersStudies,
    SearchRequestParametersLocations,
    SearchRequestParametersGermplasm,
    SearchRequestParametersObservationVariables,
    SearchRequestParametersExternalReferences,
):
    active: Optional[bool] = Field(
        None, description='Is this study currently active', example=True
    )
    observationVariableDbIds: Optional[List[str]] = Field(
        None,
        description='List of observation variable IDs to search for',
        example=['819e508f', 'f540b703'],
    )
    seasonDbIds: Optional[List[str]] = Field(
        None,
        description='The ID which uniquely identifies a season',
        example=['Harvest Two 2017', 'Summer 2018'],
    )
    sortBy: Optional[SortBy] = Field(
        None,
        description='Name of one of the fields within the study object on which results can be sorted',
    )
    sortOrder: Optional[SortOrder] = Field(
        None, description='Order results should be sorted. ex. "ASC" or "DESC"'
    )
    studyCodes: Optional[List[str]] = Field(
        None,
        description='A short human readable code for a study',
        example=['Grape_Yield_Spring_2018', 'Walnut_Kenya'],
    )
    studyPUIs: Optional[List[str]] = Field(
        None,
        description='Permanent unique identifier associated with study data. For example, a URI or DOI',
        example=['doi:10.155454/12349537312', 'https://pui.per/d8dd35e1'],
    )
    studyTypes: Optional[List[str]] = Field(
        None,
        description='The type of study being performed. ex. "Yield Trial", etc',
        example=['Yield Trial', 'Disease Resistance Trial'],
    )


class TraitDataType(Enum):
    Code = 'Code'
    Date = 'Date'
    Duration = 'Duration'
    Nominal = 'Nominal'
    Numerical = 'Numerical'
    Ordinal = 'Ordinal'
    Text = 'Text'


class TrialSearchRequest(
    SearchRequestParametersPaging,
    SearchRequestParametersCommonCropNames,
    SearchRequestParametersPrograms,
    SearchRequestParametersTrials,
    SearchRequestParametersStudies,
    SearchRequestParametersLocations,
    SearchRequestParametersExternalReferences,
):
    active: Optional[bool] = Field(
        None, description='Is this trail currently active', example=True
    )
    contactDbIds: Optional[List[str]] = Field(
        None,
        description='List of contact entities associated with this trial',
        example=['e0f70c2a', 'b82f0967'],
    )
    searchDateRangeEnd: Optional[date] = Field(
        None,
        description='The end of the overlapping search date range. `searchDateRangeStart` must be before `searchDateRangeEnd`.\n\nReturn a Trial entity if any of the following cases are true\n\n- `searchDateRangeStart` is before `trial.endDate` AND `searchDateRangeEnd` is null \n\n- `searchDateRangeStart` is before `trial.endDate` AND `searchDateRangeEnd` is after `trial.startDate`\n\n- `searchDateRangeEnd` is after `trial.startDate` AND `searchDateRangeStart` is null\n\n- `searchDateRangeEnd` is after `trial.startDate` AND `searchDateRangeStart` is before `trial.endDate`',
    )
    searchDateRangeStart: Optional[date] = Field(
        None,
        description='The start of the overlapping search date range. `searchDateRangeStart` must be before `searchDateRangeEnd`.\n\nReturn a Trial entity if any of the following cases are true\n\n- `searchDateRangeStart` is before `trial.endDate` AND `searchDateRangeEnd` is null \n\n- `searchDateRangeStart` is before `trial.endDate` AND `searchDateRangeEnd` is after `trial.startDate`\n\n- `searchDateRangeEnd` is after `trial.startDate` AND `searchDateRangeStart` is null\n\n- `searchDateRangeEnd` is after `trial.startDate` AND `searchDateRangeStart` is before `trial.endDate`',
    )
    trialPUIs: Optional[List[str]] = Field(
        None,
        description='A permanent identifier for a trial. Could be DOI or other URI formatted identifier.',
        example=['https://doi.org/01093190', 'https://doi.org/11192409'],
    )


class WSMIMEDataTypes(Enum):
    application_json = 'application/json'
    text_csv = 'text/csv'
    text_tsv = 'text/tsv'
    application_flapjack = 'application/flapjack'


class BasePagination(BaseModel):
    pageSize: int = Field(
        ...,
        description='The number of data elements returned, aka the size of the current page. If the requested page does not have enough elements to fill a page at the requested page size, this field should indicate the actual number of elements returned.',
        example=1000,
    )
    totalCount: Optional[int] = Field(
        None,
        description='The total number of elements that are available on the server and match the requested query parameters.',
        example=10,
    )
    totalPages: Optional[int] = Field(
        None,
        description='The total number of pages of elements available on the server. This should be calculated with the following formula. \n\ntotalPages = CEILING( totalCount / requested_page_size)',
        example=1,
    )


class DataFile(BaseModel):
    fileDescription: Optional[str] = Field(
        None,
        description='A human readable description of the file contents',
        example='This is an Excel data file',
    )
    fileMD5Hash: Optional[str] = Field(
        None,
        description='The MD5 Hash of the file contents to be used as a check sum',
        example='c2365e900c81a89cf74d83dab60df146',
    )
    fileName: Optional[str] = Field(
        None, description='The name of the file', example='datafile.xlsx'
    )
    fileSize: Optional[int] = Field(
        None, description='The size of the file in bytes', example=4398
    )
    fileType: Optional[str] = Field(
        None,
        description='The type or format of the file. Preferably MIME Type.',
        example='application/vnd.ms-excel',
    )
    fileURL: AnyUrl = Field(
        ...,
        description='The absolute URL where the file is located',
        example='https://wiki.brapi.org/examples/datafile.xlsx',
    )


class IndexPagination(BasePagination):
    currentPage: int = Field(
        ...,
        description='The index number for the returned page of data. This should always match the requested page number or the default page (0).',
        example=0,
    )


class Position(BaseModel):
    __root__: List[float] = Field(
        ...,
        description='A single position',
        example=[-76.506042, 42.417373, 123],
        min_items=2,
    )


class MessageType(Enum):
    DEBUG = 'DEBUG'
    ERROR = 'ERROR'
    WARNING = 'WARNING'
    INFO = 'INFO'


class Status(BaseModel):
    message: str = Field(
        ...,
        description='A short message concerning the status of this request/response',
        example='Request accepted, response successful',
    )
    messageType: MessageType = Field(
        ..., description='The logging level for the attached message', example='INFO'
    )


class TokenPagination(BasePagination):
    currentPageToken: Optional[str] = Field(
        None,
        description='The string token used to query the current page of data.',
        example='48bc6ac1',
    )
    nextPageToken: str = Field(
        ...,
        description='The string token used to query the next page of data.',
        example='cb668f63',
    )
    prevPageToken: Optional[str] = Field(
        None,
        description='The string token used to query the previous page of data.',
        example='9659857e',
    )


class ExternalReferencesInner(BaseModel):
    referenceID: Optional[str] = Field(
        None,
        description='The external reference ID. Could be a simple string or a URI.',
    )
    referenceSource: Optional[str] = Field(
        None,
        description='An identifier for the source system or database of this reference',
    )


class Type(Enum):
    OBO = 'OBO'
    RDF = 'RDF'
    WEBPAGE = 'WEBPAGE'


class OntologyReferenceDocumentationLinks(BaseModel):
    URL: Optional[AnyUrl] = Field(None, example='http://purl.obolibrary.org/obo/ro.owl')
    type: Optional[Type] = Field(None, example='OBO')


class ScaleBaseClassValidValuesCategories(BaseModel):
    label: Optional[str] = Field(None, description='A text label for a category')
    value: Optional[str] = Field(None, description='The actual value for a category')


class ScaleBaseClassValidValues(BaseModel):
    categories: Optional[List[ScaleBaseClassValidValuesCategories]] = Field(
        None,
        description='List of possible values with optional labels',
        example=[
            {'label': 'low', 'value': '0'},
            {'label': 'medium', 'value': '5'},
            {'label': 'high', 'value': '10'},
        ],
    )
    max: Optional[int] = Field(
        None,
        description='Maximum value (used for field data capture control).',
        example=9999,
    )
    min: Optional[int] = Field(
        None,
        description='Minimum value (used for data capture control) for numerical and date scales',
        example=2,
    )


class StudyNewRequestExperimentalDesign(BaseModel):
    PUI: Optional[str] = Field(
        None,
        description='MIAPPE V1.1 (DM-23) Type of experimental design - Type of experimental  design of the study, in the form of an accession number from the Crop Ontology.',
        example='CO_715:0000145',
    )
    description: Optional[str] = Field(
        None,
        description='MIAPPE V1.1 (DM-22) Description of the experimental design - Short description of the experimental design, possibly including statistical design. In specific cases, e.g. legacy datasets or data computed from several studies, the experimental design can be "unknown"/"NA", "aggregated/reduced data", or simply \'none\'.',
        example='Lines were repeated twice at each location using a complete block design. In order to limit competition effects, each block was organized into four sub-blocks corresponding to earliest groups based on a prior information.',
    )


class StudyNewRequestGrowthFacility(BaseModel):
    PUI: Optional[str] = Field(
        None,
        description='MIAPPE V1.1 (DM-27) Type of growth facility - Type of growth facility in which the study was carried out, in the form of an accession number from the Crop Ontology.',
        example='CO_715:0000162',
    )
    description: Optional[str] = Field(
        None,
        description='MIAPPE V1.1 (DM-26) Description of growth facility - Short description of the facility in which the study was carried out.',
        example='field environment condition, greenhouse',
    )


class StudyNewRequestLastUpdate(BaseModel):
    timestamp: Optional[datetime] = None
    version: Optional[str] = Field(None, example='1.2.3')


class TrialNewRequestDatasetAuthorships(BaseModel):
    datasetPUI: Optional[str] = Field(None, example='doi:10.15454/312953986E3')
    license: Optional[str] = Field(
        None,
        description='MIAPPE V1.1 (DM-7) License - License for the reuse of the data associated with this investigation. The Creative Commons licenses cover most use cases and are recommended.',
        example='https://CreativeCommons.org/licenses/by/4.0',
    )
    publicReleaseDate: Optional[date] = Field(
        None,
        description='MIAPPE V1.1 (DM-6) Public release date - Date of first public release of the dataset presently being described.',
    )
    submissionDate: Optional[date] = Field(
        None,
        description='MIAPPE V1.1 (DM-5) Submission date - Date of submission of the dataset presently being described to a host repository.',
    )


class TrialNewRequestPublications(BaseModel):
    publicationPUI: Optional[str] = Field(None, example='doi:10.15454/312953986E3')
    publicationReference: Optional[str] = Field(
        None,
        example='Selby, BrAPI - An application programming interface for plant breeding applications, Bioinformatics, https://doi.org/10.1093/bioinformatics/190',
    )


class CommonCropNamesResponseResult(BaseModel):
    data: List[str] = Field(
        ...,
        description='array of crop names available on the server',
        example=['Tomatillo', 'Paw Paw'],
    )


class Field202AcceptedSearchResponseResult(BaseModel):
    searchResultsDbId: Optional[str] = Field(None, example='551ae08c')


class SeasonListResponseResult(BaseModel):
    data: List[Season]


class StudyTypesResponseResult(BaseModel):
    data: List[str] = Field(
        ...,
        description='the list of all study types available in this server.',
        example=['Crossing Nursery', 'Yield study'],
    )


class ExternalReferences(BaseModel):
    __root__: List[ExternalReferencesInner] = Field(
        ...,
        description='An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.',
        example=[
            {'referenceID': 'doi:10.155454/12341234', 'referenceSource': 'DOI'},
            {
                'referenceID': 'http://purl.obolibrary.org/obo/ro.owl',
                'referenceSource': 'OBO Library',
            },
            {
                'referenceID': '75a50e76',
                'referenceSource': 'Remote Data Collection Upload Tool',
            },
        ],
        title='ExternalReferences',
    )


class ListBaseFields(BaseModel):
    additionalInfo: Optional[Dict[str, AdditionalInfo]] = Field(
        None, description='Additional arbitrary info', example={}
    )
    dateCreated: Optional[datetime] = Field(
        None, description='Timestamp when the entity was first created'
    )
    dateModified: Optional[datetime] = Field(
        None, description='Timestamp when the entity was last updated'
    )
    externalReferences: Optional[ExternalReferences] = None
    listDescription: Optional[str] = Field(
        None,
        description='Description of a List',
        example='This is a list of germplasm I would like to investigate next season',
    )
    listName: Optional[str] = Field(
        None,
        description='Human readable name of a List',
        example='MyGermplasm_Sept_2020',
    )
    listOwnerName: Optional[str] = Field(
        None,
        description='Human readable name of a List Owner. (usually a user or person)',
        example='Bob Robertson',
    )
    listOwnerPersonDbId: Optional[str] = Field(
        None,
        description='The unique identifier for a List Owner. (usually a user or person)',
        example='58db0628',
    )
    listSize: Optional[int] = Field(
        None, description='The number of elements in a List', example=53
    )
    listSource: Optional[str] = Field(
        None,
        description='The description of where a List originated from',
        example='GeneBank Repository 1.3',
    )
    listType: ListTypes


class ListNewRequest(ListBaseFields):
    data: Optional[List[str]] = Field(
        None,
        description='The list of DbIds contained in this list',
        example=['758a78c0', '2c78f9ee'],
    )


class ListSearchRequest(
    SearchRequestParametersPaging, SearchRequestParametersExternalReferences
):
    dateCreatedRangeEnd: Optional[datetime] = None
    dateCreatedRangeStart: Optional[datetime] = None
    dateModifiedRangeEnd: Optional[datetime] = None
    dateModifiedRangeStart: Optional[datetime] = None
    listDbIds: Optional[List[str]] = Field(None, example=['55f20cf6', '3193ca3d'])
    listNames: Optional[List[str]] = Field(
        None, example=['Planing List 1', 'Bobs List']
    )
    listOwnerNames: Optional[List[str]] = Field(
        None, example=['Bob Robertson', 'Rob Robertson']
    )
    listOwnerPersonDbIds: Optional[List[str]] = Field(
        None, example=['bob@bob.com', 'rob@bob.com']
    )
    listSources: Optional[List[str]] = Field(
        None, example=['USER', 'SYSTEM', 'EXTERNAL']
    )
    listType: Optional[ListTypes] = None


class ListSummary(ListBaseFields):
    listDbId: str = Field(
        ..., description='The unique identifier for a List', example='6f621cfa'
    )


class OntologyReference(BaseModel):
    documentationLinks: Optional[List[OntologyReferenceDocumentationLinks]] = Field(
        None, description='links to various ontology documentation'
    )
    ontologyDbId: str = Field(
        ..., description='Ontology database unique identifier', example='6b071868'
    )
    ontologyName: str = Field(
        ..., description='Ontology name', example='The Crop Ontology'
    )
    version: Optional[str] = Field(
        None, description='Ontology version (no specific format)', example='7.2.3'
    )


class PersonNewRequest(BaseModel):
    additionalInfo: Optional[Dict[str, AdditionalInfo]] = Field(
        None, description='Additional arbitrary info'
    )
    description: Optional[str] = Field(
        None,
        description='description of this person',
        example='Bob likes pina coladas and getting caught in the rain.',
    )
    emailAddress: Optional[str] = Field(
        None, description='email address for this person', example='bob@bob.com'
    )
    externalReferences: Optional[ExternalReferences] = None
    firstName: Optional[str] = Field(
        None, description='Persons first name', example='Bob'
    )
    lastName: Optional[str] = Field(
        None, description='Persons last name', example='Robertson'
    )
    mailingAddress: Optional[str] = Field(
        None,
        description='physical address of this person',
        example='123 Street Ave, City, State, Country',
    )
    middleName: Optional[str] = Field(
        None, description='Persons middle name', example='Danger'
    )
    phoneNumber: Optional[str] = Field(
        None, description='phone number of this person', example='+1-555-555-5555'
    )
    userID: Optional[str] = Field(
        None,
        description='A systems user ID associated with this person. Different from personDbId because you could have a person who is not a user of the system.',
        example='bob-23',
    )


class PersonSearchRequest(
    SearchRequestParametersPaging, SearchRequestParametersExternalReferences
):
    emailAddresses: Optional[List[str]] = Field(
        None,
        description='email address for this person',
        example=['bob@bob.com', 'rob@bob.com'],
    )
    firstNames: Optional[List[str]] = Field(
        None, description='Persons first name', example=['Bob', 'Rob']
    )
    lastNames: Optional[List[str]] = Field(
        None, description='Persons last name', example=['Robertson', 'Smith']
    )
    mailingAddresses: Optional[List[str]] = Field(
        None,
        description='physical address of this person',
        example=['123 Main Street', '456 Side Street'],
    )
    middleNames: Optional[List[str]] = Field(
        None, description='Persons middle name', example=['Danger', 'Fight']
    )
    personDbIds: Optional[List[str]] = Field(
        None, description='Unique ID for this person', example=['1e7731ab', 'bc28cff8']
    )
    phoneNumbers: Optional[List[str]] = Field(
        None,
        description='phone number of this person',
        example=['9995555555', '8884444444'],
    )
    userIDs: Optional[List[str]] = Field(
        None,
        description='A systems user ID associated with this person. Different from personDbId because you could have a person who is not a user of the system.',
        example=['bob', 'rob'],
    )


class ProgramNewRequest(BaseModel):
    abbreviation: Optional[str] = Field(
        None, description='An abbreviation which represents this program', example='P1'
    )
    additionalInfo: Optional[Dict[str, AdditionalInfo]] = Field(
        None, description='Additional arbitrary info'
    )
    commonCropName: Optional[str] = Field(
        None,
        description='Common name for the crop which this program is for',
        example='Tomatillo',
    )
    documentationURL: Optional[AnyUrl] = Field(
        None,
        description='A URL to the human readable documentation of this object',
        example='https://wiki.brapi.org',
    )
    externalReferences: Optional[ExternalReferences] = None
    leadPersonDbId: Optional[str] = Field(
        None,
        description='The unique identifier of the program leader',
        example='fe6f5c50',
    )
    leadPersonName: Optional[str] = Field(
        None, description='The name of the program leader', example='Bob Robertson'
    )
    objective: Optional[str] = Field(
        None,
        description='The primary objective of the program',
        example='Make a better tomatillo',
    )
    programName: Optional[str] = Field(
        None,
        description='Human readable name of the program',
        example='Tomatillo_Breeding_Program',
    )


class ProgramSearchRequest(
    SearchRequestParametersPaging,
    SearchRequestParametersCommonCropNames,
    SearchRequestParametersPrograms,
    SearchRequestParametersExternalReferences,
):
    abbreviations: Optional[List[str]] = Field(
        None,
        description='An abbreviation of a program to search for',
        example=['P1', 'P2'],
    )
    leadPersonDbIds: Optional[List[str]] = Field(
        None,
        description='The person DbIds of the program leader to search for',
        example=['d8bd96c7', 'a2b9c8e7'],
    )
    leadPersonNames: Optional[List[str]] = Field(
        None,
        description='The names of the program leader to search for',
        example=['Bob Robertson', 'Rob Robertson'],
    )
    objectives: Optional[List[str]] = Field(
        None,
        description='A program objective to search for',
        example=['Objective Code One', 'This is a longer objective search query'],
    )


class ScaleBaseClass(BaseModel):
    additionalInfo: Optional[Dict[str, AdditionalInfo]] = Field(
        None, description='Additional arbitrary info'
    )
    dataType: Optional[TraitDataType] = None
    decimalPlaces: Optional[int] = Field(
        None,
        description='For numerical, number of decimal places to be reported',
        example=2,
    )
    externalReferences: Optional[ExternalReferences] = None
    ontologyReference: Optional[OntologyReference] = None
    scaleName: str = Field(
        ...,
        description='Name of the scale\n\nMIAPPE V1.1 (DM-92) Scale Name of the scale associated with the variable',
        example='Meters',
    )
    validValues: Optional[ScaleBaseClassValidValues] = None


class Service(BaseModel):
    dataTypes: Optional[List[WSMIMEDataTypes]] = Field(
        None,
        description='The possible data formats returned by the available call',
        example=['application/json'],
    )
    methods: List[Method] = Field(
        ...,
        description='The possible HTTP Methods to be used with the available call',
        example=['GET', 'POST'],
    )
    service: str = Field(
        ...,
        description='The name of the available call as recorded in the documentation',
        example='germplasm/{germplasmDbId}/pedigree',
    )
    versions: List[Version] = Field(
        ...,
        description='The supported versions of a particular call',
        example=['2.0', '2.1'],
    )


class StudyNewRequest(BaseModel):
    active: Optional[bool] = Field(
        None, description='Is this study currently active', example=True
    )
    additionalInfo: Optional[Dict[str, AdditionalInfo]] = Field(
        None, description='Additional arbitrary info'
    )
    commonCropName: Optional[str] = Field(
        None,
        description='Common name for the crop associated with this study',
        example='Grape',
    )
    contacts: Optional[List[Contact]] = Field(
        None, description='List of contact entities associated with this study'
    )
    culturalPractices: Optional[str] = Field(
        None,
        description='MIAPPE V1.1 (DM-28) Cultural practices - General description of the cultural practices of the study.',
        example='Irrigation was applied according needs during summer to prevent water stress.',
    )
    dataLinks: Optional[List[DataLink]] = Field(
        None,
        description='List of links to extra data files associated with this study. Extra data could include notes, images, and reference data.',
    )
    documentationURL: Optional[AnyUrl] = Field(
        None,
        description='A URL to the human readable documentation of this object',
        example='https://wiki.brapi.org',
    )
    endDate: Optional[datetime] = Field(
        None,
        description='The date the study ends\n\nMIAPPE V1.1 (DM-15) End date of study - Date and, if relevant, time when the experiment ended',
    )
    environmentParameters: Optional[List[EnvironmentParameter]] = Field(
        None,
        description='Environmental parameters that were kept constant throughout the study and did not change between observation units.\n\nMIAPPE V1.1 (DM-57) Environment - Environmental parameters that were kept constant throughout the study and did not change between observation units or assays. Environment characteristics that vary over time, i.e. environmental variables, should be recorded as Observed Variables (see below).',
    )
    experimentalDesign: Optional[StudyNewRequestExperimentalDesign] = None
    externalReferences: Optional[ExternalReferences] = None
    growthFacility: Optional[StudyNewRequestGrowthFacility] = None
    lastUpdate: Optional[StudyNewRequestLastUpdate] = None
    license: Optional[str] = Field(
        None,
        description='The usage license associated with the study data',
        example='MIT License',
    )
    locationDbId: Optional[str] = Field(
        None, description='The unique identifier for a Location', example='3cfdd67d'
    )
    locationName: Optional[str] = Field(
        None,
        description='A human readable name for this location\n\nMIAPPE V1.1 (DM-18) Experimental site name - The name of the natural site, experimental field, greenhouse, phenotyping facility, etc. where the experiment took place.',
        example='Location 1',
    )
    observationLevels: Optional[List[ObservationUnitHierarchyLevel]] = Field(
        None,
        description='Observation levels indicate the granularity level at which the measurements are taken. `levelName` defines the level, `levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`s lower numbers are at the top of the hierarchy (ie field > 0) and higher numbers are at the bottom of the hierarchy (ie plant > 6). ',
        example=[
            {'levelName': 'field', 'levelOrder': 0},
            {'levelName': 'block', 'levelOrder': 1},
            {'levelName': 'plot', 'levelOrder': 2},
        ],
    )
    observationUnitsDescription: Optional[str] = Field(
        None,
        description='MIAPPE V1.1 (DM-25) Observation unit description - General description of the observation units in the study.',
        example='Observation units consisted in individual plots themselves consisting of a row of 15 plants at a density of approximately six plants per square meter.',
    )
    seasons: Optional[List[str]] = Field(
        None,
        description='List of seasons over which this study was performed.',
        example=['Spring_2018'],
    )
    startDate: Optional[datetime] = Field(
        None,
        description='The date this study started\n\nMIAPPE V1.1 (DM-14) Start date of study - Date and, if relevant, time when the experiment started',
    )
    studyCode: Optional[str] = Field(
        None,
        description='A short human readable code for a study',
        example='Grape_Yield_Spring_2018',
    )
    studyDescription: Optional[str] = Field(
        None,
        description='The description of this study\n\nMIAPPE V1.1 (DM-13) Study description - Human-readable text describing the study',
        example='This is a yield study for Spring 2018',
    )
    studyName: Optional[str] = Field(
        None,
        description='The human readable name for a study\n\nMIAPPE V1.1 (DM-12) Study title - Human-readable text summarising the study',
        example="INRA's Walnut Genetic Resources Observation at Kenya",
    )
    studyPUI: Optional[str] = Field(
        None,
        description='A permanent unique identifier associated with this study data. For example, a URI or DOI',
        example='doi:10.155454/12349537312',
    )
    studyType: Optional[str] = Field(
        None,
        description='The type of study being performed. ex. "Yield Trial", etc',
        example='Phenotyping',
    )
    trialDbId: Optional[str] = Field(
        None, description='The ID which uniquely identifies a trial', example='48b327ea'
    )
    trialName: Optional[str] = Field(
        None,
        description='The human readable name of a trial',
        example='Grape_Yield_Trial',
    )


class TraitBaseClass(BaseModel):
    additionalInfo: Optional[Dict[str, AdditionalInfo]] = Field(
        None, description='Additional arbitrary info'
    )
    alternativeAbbreviations: Optional[List[str]] = Field(
        None,
        description='Other frequent abbreviations of the trait, if any. These abbreviations do not have to follow a convention',
        example=['H', 'PH', 'H1'],
    )
    attribute: Optional[str] = Field(
        None,
        description='A trait can be decomposed as "Trait" = "Entity" + "Attribute", the attribute is the observed feature (or characteristic) of the entity e.g., for "grain colour", attribute = "colour"',
        example='height',
    )
    entity: Optional[str] = Field(
        None,
        description='A trait can be decomposed as "Trait" = "Entity" + "Attribute", the entity is the part of the plant that the trait refers to e.g., for "grain colour", entity = "grain"',
        example='Stalk',
    )
    externalReferences: Optional[ExternalReferences] = None
    mainAbbreviation: Optional[str] = Field(
        None,
        description='Main abbreviation for trait name. (examples: "Carotenoid content" => "CC")',
        example='PH',
    )
    ontologyReference: Optional[OntologyReference] = None
    status: Optional[str] = Field(
        None,
        description='Trait status (examples: "recommended", "obsolete", "legacy", etc.)',
        example='recommended',
    )
    synonyms: Optional[List[str]] = Field(
        None,
        description='Other trait names',
        example=['Height', 'Plant Height', 'Stalk Height', 'Canopy Height'],
    )
    traitClass: Optional[str] = Field(
        None,
        description='Trait class. (examples: "morphological", "phenological", "agronomical", "physiological", "abiotic stress", "biotic stress", "biochemical", "quality traits", "fertility", etc.)',
        example='phenological',
    )
    traitDescription: Optional[str] = Field(
        None,
        description='The description of a trait',
        example='The height of the plant',
    )
    traitName: Optional[str] = Field(
        None,
        description='The human readable name of a trait\n\nMIAPPE V1.1 (DM-86) Trait - Name of the (plant or environmental) trait under observation',
        example='Height',
    )


class TrialNewRequest(BaseModel):
    active: Optional[bool] = Field(
        None, description='Is this trail currently active', example=True
    )
    additionalInfo: Optional[Dict[str, AdditionalInfo]] = Field(
        None, description='Additional arbitrary info'
    )
    commonCropName: Optional[str] = Field(
        None,
        description='Common name for the crop associated with this trial',
        example='Wheat',
    )
    contacts: Optional[List[Contact]] = Field(
        None, description='List of contact entities associated with this trial'
    )
    datasetAuthorships: Optional[List[TrialNewRequestDatasetAuthorships]] = Field(
        None, description='License and citation information for the data in this trial'
    )
    documentationURL: Optional[AnyUrl] = Field(
        None,
        description='A URL to the human readable documentation of this object',
        example='https://wiki.brapi.org',
    )
    endDate: Optional[date] = Field(None, description='The date this trial ends')
    externalReferences: Optional[ExternalReferences] = None
    programDbId: Optional[str] = Field(
        None, description='A program identifier to search for', example='673f378a'
    )
    programName: Optional[str] = Field(
        None,
        description='Human readable name of the program',
        example='Tomatillo_Breeding_Program',
    )
    publications: Optional[List[TrialNewRequestPublications]] = Field(
        None,
        description='MIAPPE V1.1 (DM-9) Associated publication - An identifier for a literature publication where the investigation is described. Use of DOIs is recommended.',
    )
    startDate: Optional[date] = Field(None, description='The date this trial started')
    trialDescription: Optional[str] = Field(
        None,
        description='The human readable description of a trial\n\nMIAPPE V1.1 (DM-4) Investigation description - Human-readable text describing the investigation in more detail.',
        example='General drought resistance trial initiated in Peru before duplication in Africa',
    )
    trialName: Optional[str] = Field(
        None,
        description='The human readable name of a trial\n\nMIAPPE V1.1 (DM-3) Investigation title - Human-readable string summarising the investigation.',
        example='Peru Yield Trial 1',
    )
    trialPUI: Optional[str] = Field(
        None,
        description='A permanent identifier for a trial. Could be DOI or other URI formatted identifier.',
        example='https://doi.org/101093190',
    )


class Scale(ScaleBaseClass):
    scaleDbId: str = Field(
        ...,
        description='Unique identifier of the scale. If left blank, the upload system will automatically generate a scale ID.',
        example='af730171',
    )


class Trait(TraitBaseClass):
    traitDbId: Optional[str] = Field(
        None, description='The ID which uniquely identifies a trait', example='9b2e34f5'
    )


class LinearRing(BaseModel):
    __root__: List[Position] = Field(
        ...,
        description='An array of at least four positions where the first equals the last',
        example=[
            [-77.456654, 42.241133, 494],
            [-75.414133, 41.508282, 571],
            [-76.506042, 42.417373, 123],
            [-77.456654, 42.241133, 346],
        ],
        min_items=4,
    )


class MetadataBase(BaseModel):
    datafiles: Optional[List[DataFile]] = Field(
        None,
        description='The datafiles contains a list of file URLs and metadata. \nThese files contain additional information related to the returned object and can be retrieved by a subsequent call. \nThis could be a supplementary data file, an informational file, the uploaded file where the data originated from, a generated file representing the whole dataset in a particular format, or any other related file. ',
    )
    status: Optional[List[Status]] = Field(
        None,
        description='The status field contains a list of informational status messages from the server. \nIf no status is reported, an empty list should be returned. See Error Reporting for more information.',
    )


class MetadataTokenPagination(MetadataBase):
    pagination: Optional[TokenPagination] = None


class PointGeometry(BaseModel):
    coordinates: Optional[Position] = None
    type: Optional[str] = Field(
        'Point', description='The literal string "Point"', example='Point'
    )


class Polygon(BaseModel):
    __root__: List[LinearRing] = Field(
        ...,
        description='An array of linear rings',
        example=[
            [
                [-77.456654, 42.241133, 494],
                [-75.414133, 41.508282, 571],
                [-76.506042, 42.417373, 123],
                [-77.456654, 42.241133, 346],
            ]
        ],
    )


class PolygonGeometry(BaseModel):
    coordinates: Optional[Polygon] = None
    type: Optional[str] = Field(
        'Polygon', description='The literal string "Polygon"', example='Polygon'
    )


class ListsListResponseResult(BaseModel):
    data: List[ListSummary]


class ListDetails(ListSummary, ListNewRequest):
    pass


class MethodBaseClass(BaseModel):
    additionalInfo: Optional[Dict[str, AdditionalInfo]] = Field(
        None, description='Additional arbitrary info'
    )
    bibliographicalReference: Optional[str] = Field(
        None,
        description='Bibliographical reference describing the method.\n\nMIAPPE V1.1 (DM-91) Reference associated to the method - URI/DOI of reference describing the method.',
        example='Smith, 1893, Really Cool Paper, Popular Journal',
    )
    description: Optional[str] = Field(
        None,
        description='Method description\n\nMIAPPE V1.1 (DM-90) Method description - Textual description of the method, which may extend a method defined in an external reference with specific parameters, e.g. growth stage, inoculation precise organ (leaf number)',
        example='A measuring tape was used',
    )
    externalReferences: Optional[ExternalReferences] = None
    formula: Optional[str] = Field(
        None,
        description='For computational methods i.e., when the method consists in assessing the trait by computing measurements, write the generic formula used for the calculation',
        example='a^2 + b^2 = c^2',
    )
    methodClass: Optional[str] = Field(
        None,
        description='Method class (examples: "Measurement", "Counting", "Estimation", "Computation", etc.)',
        example='Measurement',
    )
    methodName: Optional[str] = Field(
        None,
        description='Human readable name for the method\n\nMIAPPE V1.1 (DM-88) Method  Name of the method of observation',
        example='Measuring Tape',
    )
    ontologyReference: Optional[OntologyReference] = None


class Person(PersonNewRequest):
    personDbId: str = Field(
        ..., description='Unique ID for a person', example='14340a54'
    )


class Program(ProgramNewRequest):
    programDbId: str = Field(
        ...,
        description='The ID which uniquely identifies the program',
        example='f60f15b2',
    )


class ServerInfo(BaseModel):
    calls: List[Service] = Field(
        ..., description='Array of available calls on this server'
    )
    contactEmail: Optional[str] = Field(
        None,
        description='A contact email address for this server management',
        example='contact@institute.org',
    )
    documentationURL: Optional[str] = Field(
        None,
        description='A URL to the human readable documentation of this object',
        example='institute.org/server',
    )
    location: Optional[str] = Field(
        None,
        description='Physical location of this server (ie. City, Country)',
        example='USA',
    )
    organizationName: Optional[str] = Field(
        None,
        description='The name of the organization that manages this server and data',
        example='The Institute',
    )
    organizationURL: Optional[str] = Field(
        None,
        description='The URL of the organization that manages this server and data',
        example='institute.org/home',
    )
    serverDescription: Optional[str] = Field(
        None,
        description='A description of this server',
        example='The BrAPI Test Server\nWeb Server - Apache Tomcat 7.0.32\nDatabase - Postgres 10\nSupported BrAPI Version - V2.0',
    )
    serverName: Optional[str] = Field(
        None, description='The name of this server', example='The BrAPI Test Server'
    )


class Study(StudyNewRequest):
    studyDbId: str = Field(
        ...,
        description='The ID which uniquely identifies a study within the given database server\n\nMIAPPE V1.1 (DM-11) Study unique ID - Unique identifier comprising the name or identifier for the institution/database hosting the submission of the study data, and the identifier of the study in that institution.',
        example='175ac75a',
    )


class Trial(TrialNewRequest):
    trialDbId: str = Field(
        ...,
        description='The ID which uniquely identifies a trial\n\nMIAPPE V1.1 (DM-2) Investigation unique ID - Identifier comprising the unique name of the institution/database hosting the submission of the investigation data, and the accession number of the investigation in that institution.',
        example='1883b402',
    )


class Method1(MethodBaseClass):
    methodDbId: Optional[str] = Field(
        None, description='Method unique identifier', example='0adb2764'
    )


class VariableBaseClass(BaseModel):
    additionalInfo: Optional[Dict[str, AdditionalInfo]] = Field(
        None, description='Additional arbitrary info'
    )
    commonCropName: Optional[str] = Field(
        None, description='Crop name (examples: "Maize", "Wheat")', example='Maize'
    )
    contextOfUse: Optional[List[str]] = Field(
        None,
        description='Indication of how trait is routinely used. (examples: ["Trial evaluation", "Nursery evaluation"])',
        example=['Trial evaluation', 'Nursery evaluation'],
    )
    defaultValue: Optional[str] = Field(
        None,
        description='Variable default value. (examples: "red", "2.3", etc.)',
        example='2.0',
    )
    documentationURL: Optional[AnyUrl] = Field(
        None,
        description='A URL to the human readable documentation of this object',
        example='https://wiki.brapi.org/documentation.html',
    )
    externalReferences: Optional[ExternalReferences] = None
    growthStage: Optional[str] = Field(
        None,
        description='Growth stage at which measurement is made (examples: "flowering")',
        example='flowering',
    )
    institution: Optional[str] = Field(
        None,
        description='Name of institution submitting the variable',
        example='The BrAPI Institute',
    )
    language: Optional[str] = Field(
        None,
        description='2 letter ISO 639-1 code for the language of submission of the variable.',
        example='en',
    )
    method: Method1
    ontologyReference: Optional[OntologyReference] = None
    scale: Scale
    scientist: Optional[str] = Field(
        None,
        description='Name of scientist submitting the variable.',
        example='Dr. Bob Robertson',
    )
    status: Optional[str] = Field(
        None,
        description='Variable status. (examples: "recommended", "obsolete", "legacy", etc.)',
        example='recommended',
    )
    submissionTimestamp: Optional[datetime] = Field(
        None, description='Timestamp when the Variable was added (ISO 8601)'
    )
    synonyms: Optional[List[str]] = Field(
        None,
        description='Other variable names',
        example=['Maize Height', 'Stalk Height', 'Corn Height'],
    )
    trait: Trait


class GeoJSON(BaseModel):
    geometry: Optional[Union[PointGeometry, PolygonGeometry]] = Field(
        None,
        description='A geometry as defined by GeoJSON (RFC 7946). In this context, only Point or Polygon geometry are allowed.',
        example={'coordinates': [-76.506042, 42.417373, 123], 'type': 'Point'},
        title='GeoJSON Geometry',
    )
    type: Optional[str] = Field(
        'Feature', description='The literal string "Feature"', example='Feature'
    )


class GeoJSONSearchArea(GeoJSON):
    pass


class Metadata(MetadataBase):
    pagination: Optional[IndexPagination] = None


class CommonCropNamesResponse(BaseModel):
    _context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: CommonCropNamesResponseResult


class ListsListResponse(BaseModel):
    _context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: ListsListResponseResult


class ListsSingleResponse(BaseModel):
    _context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: ListDetails


class ListResponse(BaseModel):
    _context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: ListDetails


class PersonSingleResponse(BaseModel):
    _context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: Person


class ProgramSingleResponse(BaseModel):
    _context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: Program


class Field202AcceptedSearchResponse(BaseModel):
    _context: Optional[Context] = Field(None, alias='@context')
    metadata: Optional[Metadata] = None
    result: Optional[Field202AcceptedSearchResponseResult] = None


class SeasonListResponse(BaseModel):
    _context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: SeasonListResponseResult


class SeasonSingleResponse(BaseModel):
    _context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: Season


class ServerInfoResponse(BaseModel):
    _context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: ServerInfo


class StudySingleResponse(BaseModel):
    _context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: Study


class StudyTypesResponse(BaseModel):
    _context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: StudyTypesResponseResult


class TrialSingleResponse(BaseModel):
    _context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: Trial


class PersonListResponseResult(BaseModel):
    data: List[Person] = Field(..., description='Array of people')


class ProgramListResponseResult(BaseModel):
    data: List[Program]


class StudyListResponseResult(BaseModel):
    data: List[Study]


class TrialListResponseResult(BaseModel):
    data: List[Trial]


class LocationNewRequest(BaseModel):
    abbreviation: Optional[str] = Field(
        None, description='An abbreviation which represents this location', example='L1'
    )
    additionalInfo: Optional[Dict[str, AdditionalInfo]] = Field(
        None, description='Additional arbitrary info', example={}
    )
    coordinateDescription: Optional[str] = Field(
        None,
        description='Describes the precision and landmarks of the coordinate values used for this location. (ex. the site, the nearest town, a 10 kilometers radius circle, +/- 20 meters, etc)',
        example='North East corner of greenhouse',
    )
    coordinateUncertainty: Optional[str] = Field(
        None,
        description='Uncertainty associated with the coordinates in meters. Leave the value empty if the uncertainty is unknown.',
        example='20',
    )
    coordinates: Optional[GeoJSON] = None
    countryCode: Optional[str] = Field(
        None,
        description=' [ISO_3166-1_alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) spec\nMIAPPE V1.1 (DM-17) Geographic location (country) - The country where the experiment took place, either as a full name or preferably as a 2-letter code.',
        example='PER',
    )
    countryName: Optional[str] = Field(
        None,
        description='The full name of the country where this location is\n\nMIAPPE V1.1 (DM-17) Geographic location (country) - The country where the experiment took place, either as a full name or preferably as a 2-letter code.',
        example='Peru',
    )
    documentationURL: Optional[AnyUrl] = Field(
        None,
        description='A URL to the human readable documentation of this object',
        example='https://brapi.org',
    )
    environmentType: Optional[str] = Field(
        None,
        description='Describes the general type of environment of the location. (ex. forest, field, nursery, etc)',
        example='Nursery',
    )
    exposure: Optional[str] = Field(
        None,
        description='Describes the level of protection/exposure for things like sun light and wind.',
        example='Structure, no exposure',
    )
    externalReferences: Optional[ExternalReferences] = None
    instituteAddress: Optional[str] = Field(
        None,
        description='The street address of the institute representing this location\n\nMIAPPE V1.1 (DM-16) Contact institution - Name and address of the institution responsible for the study.',
        example='71 Pilgrim Avenue Chevy Chase MD 20815',
    )
    instituteName: Optional[str] = Field(
        None,
        description='Each institute/laboratory can have several experimental field\n\nMIAPPE V1.1 (DM-16) Contact institution - Name and address of the institution responsible for the study.',
        example='Plant Science Institute',
    )
    locationName: Optional[str] = Field(
        None,
        description='A human readable name for this location\n\nMIAPPE V1.1 (DM-18) Experimental site name - The name of the natural site, experimental field, greenhouse, phenotyping facility, etc. where the experiment took place.',
        example='Location 1',
    )
    locationType: Optional[str] = Field(
        None,
        description='The type of location this represents (ex. Breeding Location, Storage Location, etc)',
        example='Storage Location',
    )
    siteStatus: Optional[str] = Field(
        None,
        description='Description of the accessibility of the location (ex. Public, Private)',
        example='Private',
    )
    slope: Optional[str] = Field(
        None,
        description='Describes the approximate slope (height/distance) of the location.',
        example='0',
    )
    topography: Optional[str] = Field(
        None,
        description='Describes the topography of the land at the location. (ex. Plateau, Cirque, Hill, Valley, etc)',
        example='Valley',
    )


class LocationSearchRequest(
    SearchRequestParametersPaging,
    SearchRequestParametersExternalReferences,
    SearchRequestParametersLocations,
):
    abbreviations: Optional[List[str]] = Field(
        None,
        description='An abbreviation which represents this location',
        example=['L1', 'LHC'],
    )
    altitudeMax: Optional[float] = Field(
        None, description='The maximum altitude to search for', example=200
    )
    altitudeMin: Optional[float] = Field(
        None, description='The minimum altitude to search for', example=20
    )
    coordinates: Optional[GeoJSONSearchArea] = None
    countryCodes: Optional[List[str]] = Field(
        None,
        description='[ISO_3166-1_alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) spec',
        example=['USA', 'PER'],
    )
    countryNames: Optional[List[str]] = Field(
        None,
        description='The full name of the country to search for',
        example=['United States of America', 'Peru'],
    )
    instituteAddresses: Optional[List[str]] = Field(
        None,
        description='The street address of the institute to search for',
        example=['123 Main Street', '456 Side Street'],
    )
    instituteNames: Optional[List[str]] = Field(
        None,
        description='The name of the institute to search for',
        example=['The Institute', 'The Other Institute'],
    )
    locationTypes: Optional[List[str]] = Field(
        None,
        description='The type of location this represents (ex. Breeding Location, Storage Location, etc)',
        example=['Nursery', 'Storage Location'],
    )


class PersonListResponse(BaseModel):
    _context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: PersonListResponseResult


class ProgramListResponse(BaseModel):
    _context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: ProgramListResponseResult


class StudyListResponse(BaseModel):
    _context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: StudyListResponseResult


class TrialListResponse(BaseModel):
    _context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: TrialListResponseResult


class Location(LocationNewRequest):
    locationDbId: Optional[str] = Field(
        None, description='The unique identifier for a Location', example='3cfdd67d'
    )


class LocationSingleResponse(BaseModel):
    _context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: Location


class LocationListResponseResult(BaseModel):
    data: List[Location]


class LocationListResponse(BaseModel):
    _context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: LocationListResponseResult
