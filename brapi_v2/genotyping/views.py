# generated by fastapi-codegen:
#   filename:  PlantBreedingAPI-BrAPI-Genotyping-2.0-swagger.yaml
#   timestamp: 2021-02-18T01:47:11+00:00

from __future__ import annotations

from typing import List, Optional, Union

from fastapi import FastAPI, Query
from pydantic import constr

from .models import (
    CallsetsallSetDbIcallsGetResponse,
    CallsetsallSetDbIdGetResponse,
    CallsetsGetResponse,
    CallSetsSearchRequest,
    CallsGetResponse,
    CallsSearchRequest,
    MapsapDbIdGetResponse,
    MapsapDbIlinkagegroupsGetResponse,
    MapsGetResponse,
    MarkerPositionSearchRequest,
    MarkerpositionsGetResponse,
    ReferenceseferenceDbIbasesGetResponse,
    ReferenceseferenceDbIdGetResponse,
    ReferencesetseferenceSetDbIdGetResponse,
    ReferencesetsGetResponse,
    ReferenceSetsSearchRequest,
    ReferencesGetResponse,
    ReferencesSearchRequest,
    SampleNewRequest,
    SamplesampleDbIdGetResponse,
    SamplesampleDbIdPutResponse,
    SampleSearchRequest,
    SamplesGetResponse,
    SamplesPostResponse,
    SearchCallsearchResultsDbIdGetResponse,
    SearchCallsetsearchResultsDbIdGetResponse,
    SearchCallsetsPostResponse,
    SearchCallsPostResponse,
    SearchMarkerpositionsearchResultsDbIdGetResponse,
    SearchMarkerpositionsPostResponse,
    SearchReferencesearchResultsDbIdGetResponse,
    SearchReferencesetsearchResultsDbIdGetResponse,
    SearchReferencesetsPostResponse,
    SearchReferencesPostResponse,
    SearchSamplesearchResultsDbIdGetResponse,
    SearchSamplesPostResponse,
    SearchVariantsearchResultsDbIdGetResponse,
    SearchVariantsetsearchResultsDbIdGetResponse,
    SearchVariantsetsPostResponse,
    SearchVariantsPostResponse,
    VariantsariantDbIcallsGetResponse,
    VariantsariantDbIdGetResponse,
    VariantsetsariantSetDbIcallsetsGetResponse,
    VariantsetsariantSetDbIcallsGetResponse,
    VariantsetsariantSetDbIdGetResponse,
    VariantsetsariantSetDbIvariantsGetResponse,
    VariantsetsExtractPostResponse,
    VariantSetsExtractRequest,
    VariantsetsGetResponse,
    VariantSetsSearchRequest,
    VariantsGetResponse,
    VariantsSearchRequest,
    VendorOrdersGetResponse,
    VendorOrdersPostResponse,
    VendorOrdersrderIplatesGetResponse,
    VendorOrdersrderIresultsGetResponse,
    VendorOrdersrderIstatusGetResponse,
    VendorOrderSubmissionRequest,
    VendorPlatesPostResponse,
    VendorPlatesubmissionIdGetResponse,
    VendorPlateSubmissionRequest,
    VendorSpecificationsGetResponse,
)

app = FastAPI(
    description='The Breeding API (BrAPI) is a Standardized REST ful Web Service API Specification for communicating Plant Breeding Data. BrAPI allows for easy data sharing between databases and tools involved in plant breeding.\n<div class="brapi-section">\n<h2 class="brapi-section-title">General Reference Documentation</h2>\n<div class="gen-info-link"><a href="https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/URL_Structure.md">URL Structure</a></div>\n<div class="gen-info-link"><a href="https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Response_Structure.md">Response Structure</a></div>\n<div class="gen-info-link"><a href="https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Date_Time_Encoding.md">Date/Time Encoding</a></div>\n<div class="gen-info-link"><a href="https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Location_Encoding.md">Location Encoding</a></div>\n<div class="gen-info-link"><a href="https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Error_Handling.md">Error Handling</a></div>\n<div class="gen-info-link"><a href="https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Search_Services.md">Search Services</a></div>\n</div>\n\n<div class="brapi-section">\n<h2 class="brapi-section-title">BrAPI Core</h2>\n<div class="brapi-section-description">The BrAPI Core module contains high level entities used for organization and management. This includes Programs, Trials, Studies, Locations, People, and Lists</div>\n<div class="version-number">V2.0</div>\n<div class="link-btn"><a href="https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Core">GitHub</a></div>\n<div class="link-btn"><a href="https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Core">SwaggerHub</a></div>\n<div class="link-btn"><a href="https://brapicore.docs.apiary.io">Apiary</a></div>\n<div class="stop-float"></div>\n</div>\n\n<div class="brapi-section">\n<h2 class="brapi-section-title">BrAPI Phenotyping</h2>\n<div class="brapi-section-description">The BrAPI Phenotyping module contains entities related to phenotypic observations. This includes Observation Units, Observations, Observation Variables, Traits, Scales, Methods, and Images</div>\n<div class="version-number">V2.0</div>\n<div class="link-btn"><a href="https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Phenotyping">GitHub</a></div>\n<div class="link-btn"><a href="https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Phenotyping">SwaggerHub</a></div>\n<div class="link-btn"><a href="https://brapiphenotyping.docs.apiary.io">Apiary</a></div>\n<div class="stop-float"></div>\n</div>\n\n<div class="current-brapi-section brapi-section">\n<h2 class="brapi-section-title">BrAPI Genotyping</h2>\n<div class="brapi-section-description">The BrAPI Genotyping module contains entities related to genotyping analysis. This includes Samples, Markers, Variant Sets, Variants, Call Sets, Calls, References, Reads, and Vendor Orders</div>\n<div class="version-number">V2.0</div>\n<div class="link-btn"><a href="https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Genotyping">GitHub</a></div>\n<div class="link-btn"><a href="https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Genotyping">SwaggerHub</a></div>\n<div class="link-btn"><a href="https://brapigenotyping.docs.apiary.io">Apiary</a></div>\n<div class="stop-float"></div>\n</div>\n\n<div class="brapi-section">\n<h2 class="brapi-section-title">BrAPI Germplasm</h2>\n<div class="brapi-section-description">The BrAPI Germplasm module contains entities related to germplasm management. This includes Germplasm, Germplasm Attributes, Seed Lots, Crosses, Pedigree, and Progeny</div>\n<div class="version-number">V2.0</div>\n<div class="link-btn"><a href="https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Germplasm">GitHub</a></div>\n<div class="link-btn"><a href="https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Germplasm">SwaggerHub</a></div>\n<div class="link-btn"><a href="https://brapigermplasm.docs.apiary.io">Apiary</a></div>\n<div class="stop-float"></div>\n</div>\n\n<style>\n.link-btn{\nfloat: left; \nmargin: 2px 10px 0 0; \npadding: 0 5px; \nborder-radius: 5px; \nbackground-color: #ddd;\n}\n.stop-float{\n  clear: both;\n}\n.version-number{\n  float: left; \n  margin: 5px 10px 0 5px;\n}\n.brapi-section-title{\n  margin: 0 10px 0 0;\n  font-size: 20px;\n}\n.current-brapi-section{\n  font-weight: bolder;\n  border-radius: 5px; \n  background-color: #ddd;\n}\n.brapi-section{\n  padding: 5px 5px; \n}\n.brapi-section-description{\n  margin: 5px 0 0 5px;\n}\n</style>',
    title='BrAPI-Genotyping',
    version='2.0',
)


@app.get('/calls', response_model=CallsGetResponse)
def get_calls(
    call_set_db_id: Optional[str] = Query(None, alias='callSetDbId'),
    variant_db_id: Optional[str] = Query(None, alias='variantDbId'),
    variant_set_db_id: Optional[str] = Query(None, alias='variantSetDbId'),
    expand_homozygotes: Optional[bool] = Query(None, alias='expandHomozygotes'),
    unknown_string: Optional[str] = Query(None, alias='unknownString'),
    sep_phased: Optional[str] = Query(None, alias='sepPhased'),
    sep_unphased: Optional[str] = Query(None, alias='sepUnphased'),
    page_token: Optional[str] = Query(None, alias='pageToken'),
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> CallsGetResponse:
    """
    Gets a filtered list of `Calls`
    """
    pass


@app.get('/callsets', response_model=CallsetsGetResponse)
def get_callsets(
    call_set_db_id: Optional[str] = Query(None, alias='callSetDbId'),
    call_set_name: Optional[str] = Query(None, alias='callSetName'),
    variant_set_db_id: Optional[str] = Query(None, alias='variantSetDbId'),
    sample_db_id: Optional[str] = Query(None, alias='sampleDbId'),
    germplasm_db_id: Optional[str] = Query(None, alias='germplasmDbId'),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> CallsetsGetResponse:
    """
    Gets a filtered list of `CallSet` JSON objects.
    """
    pass


@app.get('/callsets/{call_set_db_id}', response_model=CallsetsallSetDbIdGetResponse)
def get_callsets_call_set_db_id(
    call_set_db_id: str = Query(..., alias='callSetDbId'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> CallsetsallSetDbIdGetResponse:
    """
    Gets a `CallSet` by ID.
    """
    pass


@app.get(
    '/callsets/{call_set_db_id}/calls', response_model=CallsetsallSetDbIcallsGetResponse
)
def get_callsets_call_set_db_id_calls(
    call_set_db_id: str = Query(..., alias='callSetDbId'),
    expand_homozygotes: Optional[bool] = Query(None, alias='expandHomozygotes'),
    unknown_string: Optional[str] = Query(None, alias='unknownString'),
    sep_phased: Optional[str] = Query(None, alias='sepPhased'),
    sep_unphased: Optional[str] = Query(None, alias='sepUnphased'),
    page_token: Optional[str] = Query(None, alias='pageToken'),
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> CallsetsallSetDbIcallsGetResponse:
    """
    Gets a list of `Calls` associated with a `CallSet`.
    """
    pass


@app.get('/maps', response_model=MapsGetResponse)
def get_maps(
    common_crop_name: Optional[str] = Query(None, alias='commonCropName'),
    map_db_id: Optional[str] = Query(None, alias='mapDbId'),
    map_p_u_i: Optional[str] = Query(None, alias='mapPUI'),
    scientific_name: Optional[str] = Query(None, alias='scientificName'),
    type: Optional[str] = None,
    program_db_id: Optional[str] = Query(None, alias='programDbId'),
    trial_db_id: Optional[str] = Query(None, alias='trialDbId'),
    study_db_id: Optional[str] = Query(None, alias='studyDbId'),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> MapsGetResponse:
    """
    Get the Genomic Maps
    """
    pass


@app.get('/maps/{map_db_id}', response_model=MapsapDbIdGetResponse)
def get_maps_map_db_id(
    map_db_id: str = Query(..., alias='mapDbId'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> MapsapDbIdGetResponse:
    """
    Get the details of a specific Genomic Map
    """
    pass


@app.get(
    '/maps/{map_db_id}/linkagegroups', response_model=MapsapDbIlinkagegroupsGetResponse
)
def get_maps_map_db_id_linkagegroups(
    map_db_id: str = Query(..., alias='mapDbId'),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> MapsapDbIlinkagegroupsGetResponse:
    """
    Get the Linkage Groups of a specific Genomic Map
    """
    pass


@app.get('/markerpositions', response_model=MarkerpositionsGetResponse)
def get_markerpositions(
    map_db_id: Optional[str] = Query(None, alias='mapDbId'),
    linkage_group_name: Optional[str] = Query(None, alias='linkageGroupName'),
    variant_db_id: Optional[str] = Query(None, alias='variantDbId'),
    min_position: Optional[int] = Query(None, alias='minPosition'),
    max_position: Optional[int] = Query(None, alias='maxPosition'),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> MarkerpositionsGetResponse:
    """
    Get marker position info
    """
    pass


@app.get('/references', response_model=ReferencesGetResponse)
def get_references(
    reference_db_id: Optional[str] = Query(None, alias='referenceDbId'),
    reference_set_db_id: Optional[str] = Query(None, alias='referenceSetDbId'),
    accession: Optional[str] = None,
    md5checksum: Optional[str] = None,
    is_derived: Optional[bool] = Query(None, alias='isDerived'),
    min_length: Optional[int] = Query(None, alias='minLength'),
    max_length: Optional[int] = Query(None, alias='maxLength'),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> ReferencesGetResponse:
    """
    Gets a filtered list of `Reference` objects.
    """
    pass


@app.get(
    '/references/{reference_db_id}', response_model=ReferenceseferenceDbIdGetResponse
)
def get_references_reference_db_id(
    reference_db_id: str = Query(..., alias='referenceDbId'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> ReferenceseferenceDbIdGetResponse:
    """
    Gets a `Reference` by ID.
    """
    pass


@app.get(
    '/references/{reference_db_id}/bases',
    response_model=ReferenceseferenceDbIbasesGetResponse,
)
def get_references_reference_db_id_bases(
    reference_db_id: str = Query(..., alias='referenceDbId'),
    start: Optional[int] = None,
    end: Optional[int] = None,
    page_token: Optional[str] = Query(None, alias='pageToken'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> ReferenceseferenceDbIbasesGetResponse:
    """
    Lists `Reference` bases by ID and optional range.
    """
    pass


@app.get('/referencesets', response_model=ReferencesetsGetResponse)
def get_referencesets(
    reference_set_db_id: Optional[str] = Query(None, alias='referenceSetDbId'),
    accession: Optional[str] = None,
    assembly_p_u_i: Optional[str] = Query(None, alias='assemblyPUI'),
    md5checksum: Optional[str] = None,
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> ReferencesetsGetResponse:
    """
    Gets a list of `ReferenceSets`.
    """
    pass


@app.get(
    '/referencesets/{reference_set_db_id}',
    response_model=ReferencesetseferenceSetDbIdGetResponse,
)
def get_referencesets_reference_set_db_id(
    reference_set_db_id: str = Query(..., alias='referenceSetDbId'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> ReferencesetseferenceSetDbIdGetResponse:
    """
    Gets a `ReferenceSet` by ID.
    """
    pass


@app.get('/samples', response_model=SamplesGetResponse)
def get_samples(
    sample_db_id: Optional[str] = Query(None, alias='sampleDbId'),
    observation_unit_db_id: Optional[str] = Query(None, alias='observationUnitDbId'),
    plate_db_id: Optional[str] = Query(None, alias='plateDbId'),
    germplasm_db_id: Optional[str] = Query(None, alias='germplasmDbId'),
    study_db_id: Optional[str] = Query(None, alias='studyDbId'),
    external_reference_i_d: Optional[str] = Query(None, alias='externalReferenceID'),
    external_reference_source: Optional[str] = Query(
        None, alias='externalReferenceSource'
    ),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> SamplesGetResponse:
    """
    Get the Samples
    """
    pass


@app.post('/samples', response_model=SamplesPostResponse)
def post_samples(
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
    body: List[SampleNewRequest] = None,
) -> SamplesPostResponse:
    """
    Add new Samples
    """
    pass


@app.get('/samples/{sample_db_id}', response_model=SamplesampleDbIdGetResponse)
def get_samples_sample_db_id(
    sample_db_id: str = Query(..., alias='sampleDbId'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> SamplesampleDbIdGetResponse:
    """
    Get the details of a specific Sample
    """
    pass


@app.put('/samples/{sample_db_id}', response_model=SamplesampleDbIdPutResponse)
def put_samples_sample_db_id(
    sample_db_id: str = Query(..., alias='sampleDbId'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
    body: SampleNewRequest = None,
) -> SamplesampleDbIdPutResponse:
    """
    Update the details of an existing Sample
    """
    pass


@app.post(
    '/search/calls',
    response_model=Union[SearchCallsPostResponse, SearchCallsPostResponse],
)
def post_search_calls(
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
    body: CallsSearchRequest = None,
) -> Union[SearchCallsPostResponse, SearchCallsPostResponse]:
    """
    Submit a search request for `Calls`
    """
    pass


@app.get(
    '/search/calls/{search_results_db_id}',
    response_model=Union[
        SearchCallsearchResultsDbIdGetResponse, SearchCallsearchResultsDbIdGetResponse
    ],
)
def get_search_calls_search_results_db_id(
    search_results_db_id: str = Query(..., alias='searchResultsDbId'),
    page_token: Optional[str] = Query(None, alias='pageToken'),
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> Union[
    SearchCallsearchResultsDbIdGetResponse, SearchCallsearchResultsDbIdGetResponse
]:
    """
    Returns a filtered list of `Call` JSON objects.
    """
    pass


@app.post(
    '/search/callsets',
    response_model=Union[SearchCallsetsPostResponse, SearchCallsetsPostResponse],
)
def post_search_callsets(
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
    body: CallSetsSearchRequest = None,
) -> Union[SearchCallsetsPostResponse, SearchCallsetsPostResponse]:
    """
    Gets a list of call sets matching the search criteria.
    """
    pass


@app.get(
    '/search/callsets/{search_results_db_id}',
    response_model=Union[
        SearchCallsetsearchResultsDbIdGetResponse,
        SearchCallsetsearchResultsDbIdGetResponse,
    ],
)
def get_search_callsets_search_results_db_id(
    search_results_db_id: str = Query(..., alias='searchResultsDbId'),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> Union[
    SearchCallsetsearchResultsDbIdGetResponse, SearchCallsetsearchResultsDbIdGetResponse
]:
    """
    Gets a list of call sets matching the search criteria.
    """
    pass


@app.post(
    '/search/markerpositions',
    response_model=Union[
        SearchMarkerpositionsPostResponse, SearchMarkerpositionsPostResponse
    ],
)
def post_search_markerpositions(
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
    body: MarkerPositionSearchRequest = None,
) -> Union[SearchMarkerpositionsPostResponse, SearchMarkerpositionsPostResponse]:
    """
    Get marker position info
    """
    pass


@app.get(
    '/search/markerpositions/{search_results_db_id}',
    response_model=Union[
        SearchMarkerpositionsearchResultsDbIdGetResponse,
        SearchMarkerpositionsearchResultsDbIdGetResponse,
    ],
)
def get_search_markerpositions_search_results_db_id(
    search_results_db_id: str = Query(..., alias='searchResultsDbId'),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> Union[
    SearchMarkerpositionsearchResultsDbIdGetResponse,
    SearchMarkerpositionsearchResultsDbIdGetResponse,
]:
    """
    Get marker position info
    """
    pass


@app.post(
    '/search/references',
    response_model=Union[SearchReferencesPostResponse, SearchReferencesPostResponse],
)
def post_search_references(
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
    body: ReferencesSearchRequest = None,
) -> Union[SearchReferencesPostResponse, SearchReferencesPostResponse]:
    """
    Gets a list of `Reference` matching the search criteria.
    """
    pass


@app.get(
    '/search/references/{search_results_db_id}',
    response_model=Union[
        SearchReferencesearchResultsDbIdGetResponse,
        SearchReferencesearchResultsDbIdGetResponse,
    ],
)
def get_search_references_search_results_db_id(
    search_results_db_id: str = Query(..., alias='searchResultsDbId'),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> Union[
    SearchReferencesearchResultsDbIdGetResponse,
    SearchReferencesearchResultsDbIdGetResponse,
]:
    """
    Gets a list of `Reference` matching the search criteria.
    """
    pass


# @app.post(
#     '/search/referencesets',
#     response_model=Union[
#         SearchReferencesetsPostResponse, SearchReferencesetsPostResponse
#     ],
# )
# def post_search_referencesets(
#     authorization: Optional[constr(regex='^Bearer .*$')] = Query(
#         None, alias='Authorization'
#     ),
#     body: ReferenceSetsSearchRequest,
# ) -> Union[SearchReferencesetsPostResponse, SearchReferencesetsPostResponse]:
#     """
#     Gets a list of `ReferenceSet` matching the search criteria.
#     """
#     pass


@app.get(
    '/search/referencesets/{search_results_db_id}',
    response_model=Union[
        SearchReferencesetsearchResultsDbIdGetResponse,
        SearchReferencesetsearchResultsDbIdGetResponse,
    ],
)
def get_search_referencesets_search_results_db_id(
    search_results_db_id: str = Query(..., alias='searchResultsDbId'),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> Union[
    SearchReferencesetsearchResultsDbIdGetResponse,
    SearchReferencesetsearchResultsDbIdGetResponse,
]:
    """
    Gets a list of `ReferenceSet` matching the search criteria.
    """
    pass


@app.post(
    '/search/samples',
    response_model=Union[SearchSamplesPostResponse, SearchSamplesPostResponse],
)
def post_search_samples(
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
    body: SampleSearchRequest = None,
) -> Union[SearchSamplesPostResponse, SearchSamplesPostResponse]:
    """
    Submit a search request for Samples
    """
    pass


@app.get(
    '/search/samples/{search_results_db_id}',
    response_model=Union[
        SearchSamplesearchResultsDbIdGetResponse,
        SearchSamplesearchResultsDbIdGetResponse,
    ],
)
def get_search_samples_search_results_db_id(
    search_results_db_id: str = Query(..., alias='searchResultsDbId'),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> Union[
    SearchSamplesearchResultsDbIdGetResponse, SearchSamplesearchResultsDbIdGetResponse
]:
    """
    Get the results of a Samples search request
    """
    pass


@app.post(
    '/search/variants',
    response_model=Union[SearchVariantsPostResponse, SearchVariantsPostResponse],
)
def post_search_variants(
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
    body: VariantsSearchRequest = None,
) -> Union[SearchVariantsPostResponse, SearchVariantsPostResponse]:
    """
    Gets a list of `Variant` matching the search criteria.
    """
    pass


@app.get(
    '/search/variants/{search_results_db_id}',
    response_model=Union[
        SearchVariantsearchResultsDbIdGetResponse,
        SearchVariantsearchResultsDbIdGetResponse,
    ],
)
def get_search_variants_search_results_db_id(
    search_results_db_id: str = Query(..., alias='searchResultsDbId'),
    page_token: Optional[str] = Query(None, alias='pageToken'),
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> Union[
    SearchVariantsearchResultsDbIdGetResponse, SearchVariantsearchResultsDbIdGetResponse
]:
    """
    Gets a list of `Variant` matching the search criteria.
    """
    pass


@app.post(
    '/search/variantsets',
    response_model=Union[SearchVariantsetsPostResponse, SearchVariantsetsPostResponse],
)
def post_search_variantsets(
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
    body: VariantSetsSearchRequest = None,
) -> Union[SearchVariantsetsPostResponse, SearchVariantsetsPostResponse]:
    """
    Gets a list of `VariantSet` matching the search criteria.
    """
    pass


@app.get(
    '/search/variantsets/{search_results_db_id}',
    response_model=Union[
        SearchVariantsetsearchResultsDbIdGetResponse,
        SearchVariantsetsearchResultsDbIdGetResponse,
    ],
)
def get_search_variantsets_search_results_db_id(
    search_results_db_id: str = Query(..., alias='searchResultsDbId'),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> Union[
    SearchVariantsetsearchResultsDbIdGetResponse,
    SearchVariantsetsearchResultsDbIdGetResponse,
]:
    """
    Gets a list of `VariantSet` matching the search criteria.
    """
    pass


@app.get('/variants', response_model=VariantsGetResponse)
def get_variants(
    variant_db_id: Optional[str] = Query(None, alias='variantDbId'),
    variant_set_db_id: Optional[str] = Query(None, alias='variantSetDbId'),
    page_token: Optional[str] = Query(None, alias='pageToken'),
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> VariantsGetResponse:
    """
    Gets a filtered list of `Variants`.
    """
    pass


@app.get('/variants/{variant_db_id}', response_model=VariantsariantDbIdGetResponse)
def get_variants_variant_db_id(
    variant_db_id: str = Query(..., alias='variantDbId'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> VariantsariantDbIdGetResponse:
    """
    Gets a `Variant` by ID.
    """
    pass


@app.get(
    '/variants/{variant_db_id}/calls', response_model=VariantsariantDbIcallsGetResponse
)
def get_variants_variant_db_id_calls(
    variant_db_id: str = Query(..., alias='variantDbId'),
    expand_homozygotes: Optional[bool] = Query(None, alias='expandHomozygotes'),
    unknown_string: Optional[str] = Query(None, alias='unknownString'),
    sep_phased: Optional[str] = Query(None, alias='sepPhased'),
    sep_unphased: Optional[str] = Query(None, alias='sepUnphased'),
    page_token: Optional[str] = Query(None, alias='pageToken'),
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> VariantsariantDbIcallsGetResponse:
    """
    Gets a list of `Calls` associated with a `Variant`.
    """
    pass


@app.get('/brapi/v2/variantsets', response_model=VariantsetsGetResponse)
def get_variantsets(
    variant_set_db_id: Optional[str] = Query(None, alias='variantSetDbId'),
    variant_db_id: Optional[str] = Query(None, alias='variantDbId'),
    call_set_db_id: Optional[str] = Query(None, alias='callSetDbId'),
    study_db_id: Optional[str] = Query(None, alias='studyDbId'),
    study_name: Optional[str] = Query(None, alias='studyName'),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> VariantsetsGetResponse:
    """
    Gets a filtered list of `VariantSets`.
    """
    pass


@app.post('/brapi/v2/variantsets/extract', response_model=VariantsetsExtractPostResponse)
def post_variantsets_extract(
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
    body: VariantSetsExtractRequest = None,
) -> VariantsetsExtractPostResponse:
    """
    Create new `VariantSet` based on search results
    """
    pass


@app.get(
    '/variantsets/{variant_set_db_id}',
    response_model=VariantsetsariantSetDbIdGetResponse,
)
def get_variantsets_variant_set_db_id(
    variant_set_db_id: str = Query(..., alias='variantSetDbId'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> VariantsetsariantSetDbIdGetResponse:
    """
    Gets a `VariantSet` by ID.
    """
    pass


@app.get(
    '/variantsets/{variant_set_db_id}/calls',
    response_model=VariantsetsariantSetDbIcallsGetResponse,
)
def get_variantsets_variant_set_db_id_calls(
    variant_set_db_id: str = Query(..., alias='variantSetDbId'),
    expand_homozygotes: Optional[bool] = Query(None, alias='expandHomozygotes'),
    unknown_string: Optional[str] = Query(None, alias='unknownString'),
    sep_phased: Optional[str] = Query(None, alias='sepPhased'),
    sep_unphased: Optional[str] = Query(None, alias='sepUnphased'),
    page_token: Optional[str] = Query(None, alias='pageToken'),
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> VariantsetsariantSetDbIcallsGetResponse:
    """
    Gets a list of `Calls` associated with a `VariantSet`.
    """
    pass


@app.get(
    '/variantsets/{variant_set_db_id}/callsets',
    response_model=VariantsetsariantSetDbIcallsetsGetResponse,
)
def get_variantsets_variant_set_db_id_callsets(
    call_set_db_id: Optional[str] = Query(None, alias='callSetDbId'),
    call_set_name: Optional[str] = Query(None, alias='callSetName'),
    variant_set_db_id: str = Query(..., alias='variantSetDbId'),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> VariantsetsariantSetDbIcallsetsGetResponse:
    """
    Gets a list of `CallSets` associated with a `VariantSet`.
    """
    pass


@app.get(
    '/variantsets/{variant_set_db_id}/variants',
    response_model=VariantsetsariantSetDbIvariantsGetResponse,
)
def get_variantsets_variant_set_db_id_variants(
    variant_db_id: Optional[str] = Query(None, alias='variantDbId'),
    variant_set_db_id: str = Query(..., alias='variantSetDbId'),
    page_token: Optional[str] = Query(None, alias='pageToken'),
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> VariantsetsariantSetDbIvariantsGetResponse:
    """
    Gets a `Variants` for a given `VariantSet`.
    """
    pass


@app.get('/vendor/orders', response_model=VendorOrdersGetResponse)
def get_vendor_orders(
    order_id: Optional[str] = Query(None, alias='orderId'),
    submission_id: Optional[str] = Query(None, alias='submissionId'),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> VendorOrdersGetResponse:
    """
    List current available orders
    """
    pass


@app.post('/vendor/orders', response_model=VendorOrdersPostResponse)
def post_vendor_orders(
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
    body: VendorOrderSubmissionRequest = None,
) -> VendorOrdersPostResponse:
    """
    Submit New Order
    """
    pass


@app.get(
    '/vendor/orders/{order_id}/plates',
    response_model=VendorOrdersrderIplatesGetResponse,
)
def get_vendor_orders_order_id_plates(
    order_id: str = Query(..., alias='orderId'),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> VendorOrdersrderIplatesGetResponse:
    """
    Get the Plates for a specific Order
    """
    pass


@app.get(
    '/vendor/orders/{order_id}/results',
    response_model=VendorOrdersrderIresultsGetResponse,
)
def get_vendor_orders_order_id_results(
    order_id: str = Query(..., alias='orderId'),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> VendorOrdersrderIresultsGetResponse:
    """
    Get the results of a specific Order
    """
    pass


@app.get(
    '/vendor/orders/{order_id}/status',
    response_model=VendorOrdersrderIstatusGetResponse,
)
def get_vendor_orders_order_id_status(
    order_id: str = Query(..., alias='orderId'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> VendorOrdersrderIstatusGetResponse:
    """
    Get the status of a specific Order
    """
    pass


@app.post('/vendor/plates', response_model=VendorPlatesPostResponse)
def post_vendor_plates(
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
    body: VendorPlateSubmissionRequest = None,
) -> VendorPlatesPostResponse:
    """
    Submit a new set of Sample data
    """
    pass


@app.get(
    '/vendor/plates/{submission_id}', response_model=VendorPlatesubmissionIdGetResponse
)
def get_vendor_plates_submission_id(
    submission_id: str = Query(..., alias='submissionId'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> VendorPlatesubmissionIdGetResponse:
    """
    Get the data for a submitted set of plates
    """
    pass


@app.get('/vendor/specifications', response_model=VendorSpecificationsGetResponse)
def get_vendor_specifications(
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    )
) -> VendorSpecificationsGetResponse:
    """
    Get the Vendor Specifications
    """
    pass
